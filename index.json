[
{
	"uri": "http://dnsprivacy.org/",
	"title": "DNS Privacy Project",
	"tags": [],
	"description": "",
	"content": "Welcome to the DNS Privacy project Quick Start Links DNS Privacy The Problem The Solution Ongoing Work Tutorial Reference Material For Users Stubby DNS Privacy Clients Public Resolvers Test Servers Test Server Monitoring For Operators Running a DNS Privacy Server Implementation Status Best Current Practices (BCP232) Encrypted DNS Initiative Performance Measurements DNS Privacy Workshop 2021 2018 2017 Recordings NDSS This site is the home of a collaborative open project to promote, implement and deploy DNS Privacy. The goals of this project include:\n(1) Raising awareness of the issue of DNS Privacy\n(2) Empowering users to take advantage of DNS Privacy tools and resources (client applications, DNS Privacy resolvers)\n(3) Evolving the DNS to support DNS Privacy and in particular developing new DNS Protocol standards\n(4) Working towards full support for DNS Privacy in a range of Open Source DNS implementations including: getdns, Unbound, NSD, BIND, PowerDNS and Knot (Auth and Resolver)\n(5) Co-ordinating deployment of DNS Privacy services and documenting operational practices\nAmong the many contributors to this project are Sinodun IT, NLnet Labs, SalesForce, Surftnet, NLnet Foundation, OTF, Stephane Bortzmeyer and No Mountain Software.\nOngoing DNS Privacy work Q3 2025 DPRIVE working group closed as the goals of the charter have been achieved Announcement of IETF side meeting on ADoT/ADoQ deployment initiative Q2 2025 \u0026ldquo;I-D:Extensible Delegation for DNS\u0026rdquo; is adopted by DELEG Let\u0026rsquo;s Encrypt announced short-lived IP based certificates Launch of Public Beta of the DNS4EU Service See all previous DNS work Overview of DNS Privacy Status High level overview of ongoing work on DNS Privacy with monthly updates\nIETF Working Groups Many DNS Privacy standards were developed in the now closed DPRIVE Working group. Work on adaptive discovery mechanisms for DNS is happening in the ADD Working Group. New delegation mechanisms that could support authenticated encryption to authoritative servers is happening in DELEG Working Group Reference Material For a list of useful RFCs, Internet Drafts and presentations see the Reference Material page.\nSupport Thanks to NLnet Foundation, OTF and the Comcast Innovation Fund for donations to support DNS Privacy work. Thanks for past support from Verisign Labs.\nContact If you are interested in contributing to the project please contact:\nSara Dickinson (sara@sinodun.com) Allison Mankin (allison.mankin@gmail.com) Benno Overeinder (benno@NLnetLabs.nl) We have a YouTube channel with a selection of relevant presentations.\nComments, code and issues For comments, updates or corrections to content here, please create an issue in our GitHub project issue tracker All code now lives on GitHub Last updated Jul 18, 2025 14:22 BST\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/workshop_notes/breakout_room_1/",
	"title": "Zoom Breakout Room 1: Measurement of Encrypted DNS",
	"tags": [],
	"description": "",
	"content": "Zoom Breakout Room 1: Measurement of Encrypted DNS Kick-off question from Sandra: Who are we designing encrypted DNS protocols for? Idea from Benno (who couldn\u0026rsquo;t be present in the session): these protocols need to be designed to work for everybody. Alec: I don\u0026rsquo;t think \u0026ldquo;designing for everybody\u0026rdquo; would go well. DNS is a distributed protocol; it is a distributed database. It is very presumpuous of us to designate threat models onto third parties. Telling users how much privacy they are allowed to have (i.e., the security/privacy properties of encrypted DNS protocols) will inevitable have consequences. It may drive them underground. Sandra: I agree, but most people don\u0026rsquo;t know what DNS is, nor DoT/DoH. They don\u0026rsquo;t necessarily know what decisions to make. Paul: Historically, the IETF has been pretty bad at predicting user behavior. The development of the Internet in general has shown that every new protocol has been bent (and that may be one of the charms of the Internet!) There\u0026rsquo;s clearly a need for better education. The best we can do right now is \u0026ldquo;turn loose\u0026rdquo; a bunch of stuff (e.g., protocols) and see what sticks. Paras: Until now, every presentation I\u0026rsquo;ve heard on encrypted DNS has been about how to get the lowest latency. Alec, I like that your presentation doesn\u0026rsquo;t just focus on getting the lowest latency, but rather something that\u0026rsquo;s acceptable. However, I have kids in my house, and they\u0026rsquo;re really impatient. If I ask my 13 y/o, they just want the fastest protocol; they\u0026rsquo;re not as concerned about privacy. Thus, the decisions we make about protocols and tradeoffs between latency/privacy are very individualistic. Alec: In my experience, waiting for Netflix with DoHoT is not too bad. It\u0026rsquo;s no worse than using 4G in a well-served area. Occasionally, you go through days where there\u0026rsquo;s extra latency for a brand new domain name that isn\u0026rsquo;t cached, but otherwise that\u0026rsquo;s lost in the noise. I can\u0026rsquo;t speak for your kid, but I\u0026rsquo;m just happy to make something that just works. I want to make the point that latency is a budget, not a cost. Simone: Because of my work with OONI, I spend a lot of time speaking with users not in the West. I am humbled by the amount of information these people have about censorship, and how to circumvent it, e.g. with DoT/DoH/VPNs. They know this out of necessity. I believe that on the one hand saying that users are \u0026ldquo;dumb\u0026rdquo; is true to an extent, but we have to qualify this statement. Increasingly, this is not becoming the case. Who am I designing for: everyone where \u0026ldquo;everyone\u0026rdquo; means people that have difficulties using it. I would encourage us to design stuff that considers everyone in the world. Sudheesh: I did not mean to say that users are \u0026ldquo;dumb.\u0026rdquo; I agree with the idea that latency and performance are not everything. There are a huge number of people that don\u0026rsquo;t even have cellular connectivity. However, we can\u0026rsquo;t neglect the idea that latency and performance matter. The goal should be to drive down latency while increasing connectivity and increasing security/privacy. Alec: Imagine you worked for a really large social network. They have to deal with the fact that people have satellite links, and people are joining the network from less well-connected networks. You may want to build caches that are close to these users. Why not, then, address the question of making DNS fast for everyone by having a \u0026ldquo;local\u0026rdquo; version of ODoH (or DoHoT) that works in local networks, rather than a centralized solution? "
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/call_for_papers/",
	"title": "Call for Papers",
	"tags": [],
	"description": "",
	"content": "2021: NDSS DNS Privacy Workshop - Call for Papers The 2021 workshop was a virtual online conference held on 21st February 2021. Workshop on DNS Privacy: Measuring deployment and effectiveness of encrypted DNS. Submission link: https://dnspriv21.hotcrp.com/\nBackground The landscape around DNS Privacy has changed dramatically in the last few years, with tremendous developments in multiple areas. These include\nMany new Internet Standards from the IETF primarily focussed on stub-to-recursive resolution privacy\nDNS-over-TLS (RFC7858) BCP: Recommendations for DNS Privacy Operators (RFC8932) DPRIVE WG DOH WG - DNS-over-HTTP (RFC8484) DNSOP WG - QNAME Minimisation (RFC7816) Implementation of the new standards in the vast majority of Open Source DNS software\nMultiple recursive operators offering encrypted DNS services on both Public Resolvers and major ISP networks\nAll major browsers supporting DoH (with varying policies)\nMajor operating systems are in the process of offering encrypted DNS e.g. Microsoft’s Windows Native DoH and Apple’s DoH/DoT API Ongoing work in the IETF\nHow to encrypt recursive to Authoritative resolution How to encrypt zone transfers DNS-over-QUIC ADD WG - work in progress on Adaptive DNS Discovery mechanism DPRIVE WG - proposals for Complementary technologies e.g. TLS Encrypted Client Hello (ECH). However numerous challenges remain, including:\nThe path to encryption of DNS by default, both for stub to recursive and recursive to authoritative Transparency of operator management of DNS data. Blocking of newer encryption technologies, including DoT and DoH, in certain environments (from local networks to nation state level) User engagement and understanding of ‘Encrypted DNS’ This workshop will allow participants to contribute to the accelerating progress of DNS privacy technologies and deployment throughout the Internet. We aim to bring together a quorum to discuss these technologies, both established and emerging. One special focus will be the contributions that DNS privacy makes in civil society applications, in conjunction with related and newer technology such as Encrypted Client Hello.\nCall for Submissions We welcome submissions in the form of research papers, short papers, or draft presentations concerning all aspects of the threats, the protocols, and future design spaces of DNS privacy or the privacy of adjacent protocols. Usability, traceability, measurement and analytical evaluations are particularly encouraged. Research papers may also cover the equivalent privacy topics concerning domain name metadata of other infrastructure protocols such as WebPKI, DHCP, DIAMETER, etc. where the authors are willing to discuss the interrelation of these other protocols with DNS in the infrastructure. Submissions should address impacts and effectiveness of DNS Privacy in the context of usable privacy and/or civil society. Potential Topics Measurements of DoT and DoH (if previously published, updates on results are welcome) Encrypted Client Hello (ECH): DNS privacy aspects of DNS SVCB and HTTPS DNS Zone Transfer over TLS (XoT) DNS privacy and censorship circumvention Real-world deployments of DNS Privacy technologies DNS privacy operator best practices and experiences Traffic analysis of DNS encryption Privacy versus DNS consolidation Realtime privacy inspectors such such as Project Blacklight and DNS privacy Privacy implications of DNS over QUIC Evolving threat model Submission and Proceedings Details Submissions will not be anonymous.\nTypes of submission:\nPreviously published paper - with a 2 page cover letter describing how the presentation will be updated or focused for the workshop. Note: your paper needs to be available in some freely available format. New full paper - up to 12 pages, not counting well-marked appendices. Appendices are unlimited in length; however, Workshop Technical Program Committee members may base their decisions solely on the contents of the main bodies of submissions. New preliminary or work-in-progress paper - not fewer than 5 pages. If accepted, these will appear in the proceedings with a label of the authors’ choice, to facilitate classifications as preliminary work under the policies of other conference organizations. Slides-only - this must be detailed and in the range of 20-30 pages of PDF slides. The evaluation will be based only on the content of the slides. We expect to be flexible on length and format given relevant submissions. We will publish proceedings online as in the past. All material will be linked there a few days ahead of the workshop.\nSubmission link: https://dnspriv21.hotcrp.com/\nLocation and Important Dates Online, virtual conference. CFP (including confirmed PC member list) - late-November Submissions due - January 4th 2021 January 4th 2021 Acceptances sent out - mid/late January Presentation materials due - 15th Feb Workshop - TBD, one of 21-24th of February Sunday February 21st 2021 Technical Program Committee Allison Mankin (Salesforce) - co-chair Sara Dickinson (Sinodun IT) - co-chair Shivan Sahib (Salesforce) - co-chair Amelia Andersdotter (CENTR) Benno Overeinder (NLnet Labs) Gurshabad Grover (Center for Internet and Society) Melinda Shore (Fastly) Nick Feamster (University of Chicago) Phillip Winter (The Tor Project) Sandra Siby (EPFL) Tommy Pauly (Apple) Contact If you have any questions about topics or otherwise, send email to Sara Dickinson \u0026lt;sara@sinodun.com\u0026gt; and Allison Mankin \u0026lt;allison.mankin@gmail.com\u0026gt;\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/",
	"title": "2021 NDSS DNS Privacy Workshop",
	"tags": [],
	"description": "",
	"content": " The 2021 DNS Privacy workshop was again co-hosted by NDSS. This years conference was be a virtual online conference on Sunday, 21st February 2021.\n2021 Topic: Measuring deployment and effectiveness of encrypted DNS. Workshop topics This workshop will allow participants to contribute to the accelerating progress of DNS privacy technologies and deployment throughout the Internet. We aim to bring together a quorum to discuss these technologies, both established and emerging. Special focus will be on new measurements of encrypted DNS, and also the contributions that DNS privacy makes in civil society applications, in conjunction with related and newer technology. The program will be a mixture of accepted and invited talks, and open discussion.\nLocation and Important information Date and time: Sunday, 21st February 2021 15:00-21:00 UTC\nCall for Papers: NDSS DNS Privacy Workshop CFP (Submissions are now closed)\nVideos are now available on our You Tube Channel NDSS 2021 Playlist\nSlack channel: The General Information section of the dashboard also contains a link to the NDSS Slack workspace - the workshop channel is #dns-priv-dns-privacy-workshop. Ongoing discussions can continue there after the workshop/\nTwitter hashtags: #DNSPRIVACY21 and #NDSS21. Also follow us on Twitter at @DNSPrivacyProj\nWork Shop Proceedings Workshop Report Full meeting notes are now available Main sessions Breakout room 1, Breakout room 2, Breakout room 3 Agenda All times are UTC.\nSession Duration Session Topic Presentation (and link to slides/paper) Authors (speaker(s) in bold) Time 15:00 - 16:30\nMeasurement of Encrypted DNS\n(Chair: Sara Dickinson) Welcome from the Chairs\nPDF\n15:00-\n15:10 Oblivious DNS over HTTPS (ODoH): A Practical Privacy Enhancement to DNS (Measurements \u0026amp; Feasibility)\nPDF Sudheesh Singanamalla*†, Suphanat Chunhapanya*, Jonathan Hoyland*, Marek Vavruša*, Tanya Verma*, Peter Wu*, Marwan Fayed*, Kurtis Heimerl†, Nick Sullivan*, Christopher Wood* (*Cloudflare Inc. †University of Washington) 15:10-\n15:35 Measuring DoT/DoH Blocking Using OONI Probe: a Preliminary Study\nPDF Paper\nS. Basso (Open Observatory of Network Interference)\n15:35-\n16:00 \"No Port 53, Who Dis?\"; a year of DNS over HTTPS over Tor\nPDF Paper\nAlec Muffett (https://alecmuffett.com/about)\n16:00-\n16:15 Round up and open discussion 16:15-\n16:30 BREAK 16:30-17:00 17:00 - 18:30 Civil Society, Usability and DNS(Chair: Allison Mankin) DNS Privacy Vs : Confronting protocol design trade offs in the public interest\nPDF Mallory Knodel (Center for Democracy and Technology), Shivan Sahib (Salesforce) 17:00-\n17:25 Censored Planet: An Internet-wide, Longitudinal Censorship Observatory\nPDF\nR. Sundara Raman, P. Shenoy, K. Kohls, and R. Ensafi (University of Michigan) 17:25-\n17:45 When DNS Goes Dark: Understanding Privacy and Shaping Policy of an Evolving Protocol\nPDF Vijay k. Gurbani and Cynthia Hood ( Illinois Institute of Technology), Anita Nikolich (University of Illinois), Henning Schulzrinne (Columbia University) and Radu State (University of Luxembourg)\n17:45-\n18:05 User Expectations and Understanding of Encrypted DNS Settings\nPDF Paper\nAlexandra Nisenoff, Nick Feamster, Madeleine A Hoofnagle†, Sydney Zink. (University of Chicago and †Northwestern) 18:05-\n18:20 Round up and open discussion 18:20-18:30 BREAK 18:30-19:30 19:30 - 21:00 Novel work, ADoT and Future Research\n(Chair: Shivan Sahib) Work in Progress: Programmable In-Network Obfuscation of DNS Traffic\nPDF Paper\nLiang Wang, Hyojoon Kim, Prateek Mittal, Jennifer Rexford (Princeton University) 19:30-\n19:55 A Balanced DNS Information Protection Strategy: Minimize at Root and TLD, Encrypt When Needed Elsewhere\nPDF\nS. Hollenbeck, B. Kalinski (Verisign) 19:55-\n20:10 Keynote: \"Armor for the back half of the camel: Why confidentiality matters for recursive DNS traffic\"\nPDF\nDaniel Kahn Gillmor (ACLU) 20:10-\n20:30 Open Discussion Open Discussion on future research directions. Zoom breakout rooms:\nRoom 1: Measurement of Encrypted DNS (Chair: Sandra Siby)\nRoom 2: Civil Society, Usability and DNS (Chair: Gurshabad Grover)\nRoom 3: Novel work, ADoT and Future Research (Chair: Benno Overeinder)\n20:30-\n20:55 Round up by the Chairs 20:55-\n21:00 Social Session Hang out and chat with everyone! 21:00-\n22:00 Note takers: Han Zhang, Austin Hounsel.\nTechnical Program Committee Allison Mankin (Salesforce) - co-chair Sara Dickinson (Sinodun IT) - co-chair Shivan Sahib (Salesforce) - co-chair Amelia Andersdotter (CENTR) Benno Overeinder (NLnet Labs) Gurshabad Grover (Center for Internet and Society) Melinda Shore (Fastly) Nick Feamster (University of Chicago) Phillip Winter (The Tor Project) Sandra Siby (EPFL) Tommy Pauly (Apple) Contact If you have any questions about topics or otherwise, send email to Sara Dickinson \u0026lt;sara@sinodun.com\u0026gt;, Allison Mankin \u0026lt;allison.mankin@gmail.com\u0026gt; and Shivan Sahib \u0026lt;ssahib@salesforce.com\u0026gt;\n"
},
{
	"uri": "http://dnsprivacy.org/project_notes/dns-over-tls_patches/",
	"title": "DNS-Over-TLS Patches",
	"tags": [],
	"description": "",
	"content": " Git repository TFO patches LDNS: ldns.1.6.17_dns-over-tls.patch Features Installation Unbound: unbound-1.5.1_t-dns.patch Features Installation NSD: nsd-4.1.0_dns-over-tls.patch Features Installation Git repository Patches are available here: https://portal.sinodun.com/stash/projects/TDNS/repos/dns-over-tls_patches/browse\nSTARTTLS is DNS is no longer described in any active draft, but is still available in these patches.\nTFO patches Various TFO patches are provided - please see the TFO patch repository.\nLDNS: ldns.1.6.17_dns-over-tls.patch Since this patches use TLS v1.2 a recent version of OpenSSL is required.\nFeatures Adds -F option to read multiple message files from a directory. Adds -R option to re-use TCP/TLS connections when possible. Adds -l option to do TLS on a dedicated TLS port. Adds -C option to do STARTTLS (no TO bit) (experimental). Adds -L option to do STARTTLS (with TO bit) (experimental). Adds -P option to prevent failed STARTTLS negotiation falling back to TCP. Adds experimental support for TCP Fast open (linux only). Enable with \u0026ndash;enable-tcp-fastopen configure option. Installation apply patch run \u0026lsquo;autoreconf \u0026ndash;force\u0026rsquo; additionally specify the \u0026lsquo;\u0026ndash;with-ssl\u0026rsquo; and \u0026ndash;with-tls\u0026rsquo; flags when running \u0026lsquo;configure\u0026rsquo; optionally specify the \u0026ndash;enable-tcp-fastopen when running \u0026lsquo;configure\u0026rsquo; make, make install Unbound: unbound-1.5.1_t-dns.patch Features Add support for DNS-over-TLS (experimental) to Unbound as a server and a client. Adds new configuration file options: \u0026lsquo;do-starttls: yes/no\u0026rsquo; # enable STARTTLS for downstream queries \u0026lsquo;starttls-upsteam\u0026rsquo; : yes/no # enable STARTTLS for upstream queries \u0026lsquo;starttls-delay\u0026rsquo;: number of second # time to cache the STARTTLS capability of an upstream server before retrying a STARTTLS negotiation Adds option to use the TO bit for STARTTLS downstream. Enable with \u0026ndash;enable-TObit configure option. Adds new statistics counters: SSL queries, EDNS_TO queries and STARTTLS queries Initial attempt to change behaviour of writes over SSL so that the DNS message is sent in a single packet when possible. (Previous behaviour was to send the length and message content separately.) Should be improved to avoid malloc on each write. Adds experimental client and server support for TCP Fast open (linux only). Enable with \u0026ndash;enable-tcp-fastopen configure option. Installation apply patch run \u0026lsquo;autoreconf \u0026ndash;force\u0026rsquo; optionally specify the \u0026ndash;enable-tcp-fastopen and/or \u0026ndash;enable-TObit flags and when running \u0026lsquo;configure\u0026rsquo; make, make install NSD: nsd-4.1.0_dns-over-tls.patch Features Implement a TLS service on a dedicated TLS port Adds new options in configuration file: \u0026rsquo;tls-service-key: \u0026lt;path_to_key_file\u0026gt; \u0026rsquo;tls-service-pem: \u0026lt;path_to_pem_file\u0026gt;\u0026rsquo; tls-port: \u0026lt;port for TLS service\u0026gt; Add support for DNS-over-TLS (experimental). Adds new configuration file options: \u0026lsquo;do-starttls: yes/no\u0026rsquo; # enable STARTTLS Adds option to use the TO bit for STARTTLS. Enable with \u0026ndash;enable-TObit configure option. Initial attempt to change behaviour of writes over SSL so that the DNS message is sent in a single packet when possible. (Previous behaviour was to send the length and message content separately.) Should be improved to avoid malloc on each write. Adds experimental server support for TCP Fast open (linux only). Enable with \u0026ndash;enable-tcp-fastopen configure option. Installation apply patch run \u0026lsquo;autoreconf \u0026ndash;force\u0026rsquo; optionally specify the \u0026ndash;enable-tcp-fastopen and/or \u0026ndash;enable-TObit flags and when running \u0026lsquo;configure\u0026rsquo; make, make install Attachments: [patch.diff](attachments/1277985/1278030.diff) (application/octet-stream) "
},
{
	"uri": "http://dnsprivacy.org/performance_measurements/initial_performance_measurements_q1_2018/",
	"title": "Initial Performance Measurements (Q1 2018)",
	"tags": [],
	"description": "",
	"content": " Initial work Nameservers Test setup Software Test parameters Hardware OS tuning Nameserver configuration Results Increasing load UDP only UDP vs TCP TCP vs TLS TCP and TLS as a percentage of UDP Vary queries per connection Less than 60,000 queries per connection Less than 10,000 queries per connection Less than 500 queries per connection Key conclusions TODO list Comments on test stability Thanks to funding from the Open Technology Fund we have started work on some performance measurements for various DNS Privacy implementations. We report our initial results below.\nInitial work The goal of the first phase of work it to get a general understanding of the characteristics of the behaviour of several open source recursive implemetnations under TCP and TLS load. The first measurements look at 2 aspects:\nHow does TCP and TLS compare to UDP for a very small number of client connections (1-16) For a small number of connections how does performance vary with the number of queries per connection We concentrate on relative performance rather than absolute values.\nResults and configuration files can be found in the Performance Testing git repo.\nWe also presented this work at RIPE 76: Slides, Video\nFurther follow up work can be found here: Follow-up Performance Measurements (Q4 2108)\nNameservers We tested four nameservers:\nBind 9.12.1 (does not support TLS) Unbound 1.7.0 Knot Resolver 2.3.0 dnsdist 1.3.0 Test setup Software We have used the well known dnsperf from Nominum (now owned by Akamai) for the basis of our testing. dnsperf: For UDP measurements to original tool from Nominum was used dnsperf-tcp: For TCP measurements we used a fork from dnsperf with added TCP support. The code is available on github. (This work was funded by a grant from NLnet Foundation). dnsperf-tls: For TLS we had to re-factor dnsperf-tcp somewhat to accommodate TLS support. We implemented this with both OpenSSL and GnuTLS but saw no difference if performance of dnsperf and so we used the version with OpenSSL (TLS 1.2) for the tests below. This code is also available on github. We do note that we see some reduced performance for this version when using TCP and TLS at very low queries per connection (we believe due to limitations in the implementation because of how the dnsperf threading model interacts with TLS read/writes). For future work we would like to create a bespoke testing tool designed to specifically handle TCP and TLS. We have started a review of existing testing tools here.\nWe control the test runs from Jenkins and the scripts use a mix of bash, awk and GNUplot to automatically generate plots of the results. Test parameters The results are the averages of 5 repeated runs each of 20 seconds with dnsperf set to allow a total of 5000 outstanding queries. We note that with a smaller number of outstanding queries we see quite different results and above this number we see no differences. Hardware Our current set up simply consists of one client machine and one nameserver machine connected via a 10Gb switch:\nThe servers are both Supermicro Super Servers with a X10DRW-iT Motherboard running BIOS v2.0b. Each has 2 Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz with 8 cores (16 threads).\nThey have an Intel Corporation 82574L Gigabit Network Connection used for management and a dual port Intel Corporation Ethernet Controller 10-Gigabit X540-AT2 for load testing. The two 10Gb interfaces are connected to a Netgear M4300-8X8F 10Gb switch.\nThe servers are running Ubuntu 18.04 LTS\nThe 10Gb ethernet controller (ixgbe) drivers have been upgraded to the latest from Intel https://downloadcenter.intel.com/download/14687/?product=60020 version 5.3.3.\nSee below for sample results on 18.04 without the spectre/meltdown fixes and 16.04.\nOS tuning Only minimal OS tuning was performed in these first tests:\nThe number of file descriptors was raised by adding the following to /etc/security/limits.conf * soft nofile 100000 * soft nofile 100000 The following TCP TIME_WAIT and ephemeral port range changes were made sudo sysctl -w net.ipv4.tcp_fin_timeout=20 sudo sysctl -w net.ipv4.tcp_tw_reuse=1 sudo sysctl -w net.ipv4.ip_local_port_range=\u0026#34;1025 65535\u0026#34; Nameserver configuration The nameserver test machine is also is set up with NSD acting as a root server that is able to answer all the questions in the queryfile-example-current from Nominum. At the start of each test run the recursive server cache was populated buy running the test queries against the nameserver which was configured to fetch the answers from the NSD instance. The configurations used for each nameserver are available in the git repo.\nIn each case the nameserver was locked to four cores to ensure the client could saturate the nameserver. For Unbound, Knot resolver and BIND the nameserver was configured to use 4 threads. dnsdist was configured with 4 listeners and it should be noted that for TCP it uses a different threading model where it spawns a separate thread for each TCP connection it handles (creating them as required) so this most probably explains the different behaviour of dnsdist observed below.\nResults The test results and a full set of plots can be found in the git repo.\nIncreasing load In the first test runs UDP, TCP and TLS were used to load the nameserver as the number of dnsperf clients were increased from 1 to 16. For TCP /TLS 20,000 queries per connection were sent so this is simulating persistent connections to measure the throughput of TCP/TLS connections. UDP only We note that Unbound and dnsdist have the best performance here and BIND and Knot Resolver have lower UPD performance. It is interesting to note how flat the performance of BIND is compared to the other nameservers.\nUDP vs TCP The surprising finding here is that with these specific test conditions dnsdist shows much better TCP performance the UDP performance. But as noted above it uses a very different threading model to the other nameservers. The other nameservers all show a roughly similar decrease in throughput over TCP of around 50%.\nNote that Unbound serially processes the TCP queries on a connection (i.e. it processes and sends a response to a TCP query before processing the next query on the connection) instead of processing queries concurrently (as specified in RFC7766). Work is in progress to change this behaviour. TCP vs TLS (BIND does not support TLS yet). As expected there is a drop in performance for TLS compared to TCP, of roughly 20-30%. TCP and TLS as a percentage of UDP The plot below show the TCP/TLS performance as a percentage of the UDP performance of the nameserver for loading with 8 clients (20,000 queries per connection for TCP/TLS). Whilst dnsdist show the best TCP performance, the relative drop in performance for TLS compared to TCP is significant.\nUnbound has the lowest TCP/TLS performance due to the lack of concurrent processing, whereas BIND and Knot have comparable UDP vs TCP performance. Vary queries per connection Less than 60,000 queries per connection Most of the nameservers show steady performance above 10,000 q/conn as would be expected.\nLess than 10,000 queries per connection dnsdist has a relatively smooth decline in performance in this range, Unbound and BIND are much flatter and decline only below ~1500 q/con. It is noted that Knot appears very flat for TCP until much lower q/conn (but not for TLS - we think this is due to limitations in our test tool and are investigating).\nLess than 500 queries per connection By examining the region below 500 in detail we see a marked difference for Knot Resolver compared to the other nameservers. Unfortunately our current test configuration encounters issues at low numbers of q/con so we don\u0026rsquo;t have numbers for below 60q/con. We are actively working to resolve this and extend these plots. The plot below includes a purely theoretical extrapolation of Knot resolver performance if amortization of the TCP handshake is the only factor that degrades performance (handshakes are amortized at (N+1)/N where N is the number of queries per connection).\nKey conclusions Typically saw TCP was 40-50% of UDP throughput (except dnsdist, which uses a different threading model and performed better) TLS was 30-40% of UDP throughput Varying the number of queries per connection (including low numbers) shows amortisation of setup occurs between 100 or ~2000 q/conn depending on the nameserver TODO list We clearly have more work to do to further investigate the behaviour we seen This includes:\nDrill to lower q/conn for TCP and TLS Dig into implementations…. Experiment with OS and nameserver tuning Add more options: TFO, TLS Session Resumption, TLS 1.3,… Compare to TLS proxy e.g. nginx, haproxy Add concurrent processing to Unbound Scale to MANY clients Use new/different test tool? Comments on test stability We do note that we see variations of the order of 10-15% when performing identical test runs on the same setup at different times (e.g. on following days with not change to the setup).\nSo each of the the data sets for a given setup is from sequential runs of the test suite for each nameserver for better comparison.\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/comparison_of_policy_and_privacy_statements_2019/",
	"title": "Comparison of policy and privacy statements 2019",
	"tags": [],
	"description": "",
	"content": "The goal of this page is to provide a high level overview of the operations and privacy policies and practices (as published in 2019) of some of the larger DNS Privacy service offerings. NOTE: An analysis of privacy statements by operators will clearly only provide a snapshot at the time of writing. The page content was last reviewed on 18th Dec 2019. Please email any corrections to sara@sinodun.com\nOperators Operators Quad9 Cloudflare Google OpenDNS Comparison Policy Practice Quad9 UDP/TCP and TLS (port 853) service provided on two addresses:\n\u0026lsquo;Secure\u0026rsquo;: 9.9.9.9, 149.112.112.112, 2620:fe::fe, 2620:fe::9 \u0026lsquo;Unsecured\u0026rsquo;: 9.9.9.10, 149.112.112.10, 2620:fe::10, 2620:fe::fe:10 Policy:\nhttps://www.quad9.net/policy/ https://www.quad9.net/privacy/ https://www.quad9.net/faq/ Cloudflare UDP/TCP and TLS (port 853) service provided on 1.1.1.1, 1.0.0.1, 2606:4700:4700::1111 and 2606:4700:4700::1001.\nPolicy:\nhttps://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/privacy-policy/ DoH provided on: https://cloudflare-dns.com/dns-query\nPolicy:\nhttps://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/ Tor endpoint: https://dns4torpnlfs2ifuz2s2yf3fc7rdmsbhm6rw75euj35pac6ap25zgqad.onion\nGoogle UDP/TCP and TLS (port 853) service provided on 8.8.8.8, 8.8.4.4, 2001:4860:4860::8888 and 2001:4860:4860::8844.\nPolicy: https://developers.google.com/speed/public-dns/privacy\nOpenDNS UDP/TCP service provided on 208.67.222.222 and 208.67.220.220 (no IPv6).\nWe could find no specific privacy policy for the DNS resolution, only a general one from Cisco that seems focussed on websites.\nPolicy: https://www.cisco.com/c/en/us/about/legal/privacy-full.html\nComparison The following tables provides a high-level comparison of the policy and practice statements above and also some observations of practice measured at dnsprivacy.org. The data is not exhaustive and has not been reviewed or confirmed by the operators.\nThe List Items in the title are those from version -01 of the BCP for DNS privacy operators.\nA question mark indicates no clear statement or data could be located on the issue. A dash indicates the category is not applicable to the service.\nPolicy List Item 1 2 3 4 5 6 7 Redirect NXDOMAIN IP address are PII IP address logging Clear list of what data stored and for how long Share anonymized data with partners Share identifiable data with partners Share or sell data to third parties Exceptions to collection for attack analysis non-profit Partners Combine DNS data with other data sources Redirect NXDOMAIN Block domains Quad9 Secure Y N Y Y N N Y Y IBM\nPCH\nGCA\nN N Y Quad9 Unsecured Y N Y Y N N Y Y N N N Cloudflare\nY N Y Y N N N N APNIC N N ? Cloudflare DoH Y N Y Y N N N N Mozilla/\nFirefox N N ? Google N Y(1) Y ? ? ? N N ? N N N(1) OpenDNS Y Y N ? Y Y ? N ? Y N ? (1) Only in temporary logs\nPractice List Item 2 3 4 5 6 DNSSEC EDNS(0) Padding OOOR EDNS(0)\nKeepalive\nQuery\nName Minimization\nSend\nECS\nRespect client ECS Local root zone Auth Domain Name SPKI pinset Juristdiction\n(TBD) Obtaining consent\n(TBD) Quad9 Secure Y N N N N N ? N Y N Quad9 Unsecured N N N N N N ? N Y N Cloudflare\nY Y Y N Y N - Y Y N Cloudflare DoH Y Y Y N Y N - Y - - Google Y N Y N N Y Y N Y N OpenDNS N - - - ? ? ? ? - - (1) Only in exceptional circumstances\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/automated_certificate_management_1/",
	"title": "Certificate management Method 1",
	"tags": [],
	"description": "",
	"content": " Background DNS setup CNAMES Configure dehydrated Create a domains file Write a hook script Write a script to download the certificates to your DNS servers Background At Sinodun we use dehydrated https://github.com/lukas2511/dehydrated to manage our certificates. Also we use the dns-01 challenge to renew them.\nSince we run multiple DNS-over-TLS servers, the method used here employs a single \u0026lsquo;certificate management\u0026rsquo; server to renew the certificates, update the zone with the dns-01 challenge and make the renewed certificates available via ftp. A script is then run on each DNS server to download any new certificates using ftp to each server and restart the DNS service. In this example we use TLS proxies in front of BIND, or Knot resolver.\nDNS setup You could put the dns-01 challenge responses in your organisations main zone. However it is more flexible to dedicate a separate zone for that, especially if you are responsible for running the servers but someone else or some other organisation is responsible for the DNS.\nFor authoritative DNS we use knot https://www.knot-dns.cz/ because it has a nice interface for managing zones. The same effect could be obtained using dynamic updates.\nIt is a good idea to sign your zone if you are going to be putting challenge response records in it. However, the nameserver must be able to sign updates as they are applied.\nCNAMES Lets assume that we are managing certificates for two servers dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;. and dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;.\nAdd CNAME RRs to the \u0026lt;YOURDOMAIN\u0026gt; zone like these. These will redirect queries for the dns-01 challenge to a dedicated zone which can exist on and be served by a dedicated certificate management server\n_acme-challenge.dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;. 300 CNAME dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;.acme.\u0026lt;YOURDOMAIN\u0026gt;. _acme-challenge.dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;. 300 CNAME dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;.acme.\u0026lt;YOURDOMAIN\u0026gt;. Delegate acme.\u0026lt;YOURDOMAIN\u0026gt; to the certificate management server by adding NS and DS RRs to the \u0026lt;YOURDOMAIN\u0026gt; zone. Lets assume the server is called ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\nCreate an empty zone for acme.\u0026lt;YOURDOMAIN\u0026gt; (SOA and NS and A/AAAA RRs). Configure knot to sign the domain\nserver: listen: \u0026lt;YOURIP4\u0026gt;@53 listen: \u0026lt;YOURIP6\u0026gt;@53 user: knot:knot log: - target: syslog any: info policy: - id: dnssec algorithm: ECDSAP256SHA256 zone: - domain: acme.\u0026lt;YOURDOMAIN\u0026gt; file: \u0026#34;acme.\u0026lt;YOURDOMAIN\u0026gt;.zone\u0026#34; dnssec-signing: on dnssec-policy: dnssec acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 SOA ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. user.\u0026lt;YOURDOMAIN\u0026gt;. 2016120927 30000 300 604800 300 acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 NS ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 A \u0026lt;YOURIP4\u0026gt; ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;. 3600 AAAA \u0026lt;YOURIP6\u0026gt; Configure dehydrated Get dehydrated https://github.com/lukas2511/dehydrated and create some config. Uncomment the first two lines until you are sure everything is working. This will allow you to run the scripts for debugging without exceeding the production Let\u0026rsquo;s Encrypt limits\n## CA=\u0026#34;https://acme-staging.api.letsencrypt.org/directory\u0026#34; ## CA_TERMS=\u0026#34;https://acme-staging.api.letsencrypt.org/terms\u0026#34; LICENSE=\u0026#34;https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\u0026#34; CERTDIR=/\u0026lt;PATH\u0026gt;/dehydrated/certs DOMAINS_TXT=/\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains CHALLENGETYPE=\u0026#34;dns-01\u0026#34; HOOK=/\u0026lt;PATH\u0026gt;/dehydrated/hook.sh PRIVATE_KEY_RENEW=\u0026#34;no\u0026#34; PRIVATE_KEY_ROLLOVER=\u0026#34;no\u0026#34; CONTACT_EMAIL=you AT email The two PRIVATE_KEY lines ensure that the key is not replaced and so SPKI pinning will work.\nCreate a domains file Create a dehydrated.domains file (/\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains)\ndnsovertls.\u0026lt;YOURDOMAIN\u0026gt; dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt; Write a hook script Create a hook.sh script (/\u0026lt;PATH\u0026gt;/dehydrated/hook.sh). #!/usr/bin/env bash set -e set -u set -o pipefail check_knotc_exit_code() { if [[ ! $1 -eq 0 ]] ; then /usr/sbin/knotc zone-abort acme.\u0026lt;YOURDOMAIN\u0026gt;. exit 1 fi } deploy_challenge() { local DOMAIN=\u0026#34;${1}.acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; RDATA=\u0026#34;${3}\u0026#34; if [[ \u0026#34;${1}\u0026#34; == \u0026#34;ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; ]] ; then DOMAIN=\u0026#34;_acme-challenge.${1}.\u0026#34; fi echo \u0026#34;Adding $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; echo \u0026#34;zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? echo \u0026#34;zone-set acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; /usr/sbin/knotc zone-set acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34; check_knotc_exit_code $? echo \u0026#34;zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? } clean_challenge() { local DOMAIN=\u0026#34;${1}.acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; RDATA=\u0026#34;${3}\u0026#34; if [[ \u0026#34;${1}\u0026#34; == \u0026#34;ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; ]] ; then DOMAIN=\u0026#34;_acme-challenge.${1}.\u0026#34; fi echo \u0026#34;Removing $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; echo \u0026#34;zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-begin acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? echo \u0026#34;zone-unset acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; /usr/sbin/knotc zone-unset acme.\u0026lt;YOURDOMAIN\u0026gt;. $DOMAIN TXT check_knotc_exit_code $? echo \u0026#34;zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;.\u0026#34; /usr/sbin/knotc zone-commit acme.\u0026lt;YOURDOMAIN\u0026gt;. check_knotc_exit_code $? } deploy_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; TIMESTAMP=\u0026#34;${6}\u0026#34; ## Copy cert files (not the keys) to your download site of choice - web, ftp etc... echo \u0026#34;Deploying certs to ftp server\u0026#34; echo \u0026#34;Deploy for domain ${DOMAIN}: ${CERTFILE} ${FULLCHAINFILE} ${CHAINFILE}\u0026#34; cp ${CERTFILE} /srv/ftp/certs/${DOMAIN}/ cp ${FULLCHAINFILE} /srv/ftp/certs/${DOMAIN}/ cp ${CHAINFILE} /srv/ftp/certs/${DOMAIN}/ chmod 644 /srv/ftp/certs/${DOMAIN}/* } unchanged_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; ## nothing yet.. } startup_hook() { ## This hook is called before the cron command to do some initial tasks ## (e.g. starting a webserver). for i in $(awk \u0026#39; { print $1 } \u0026#39; /\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains ) ; do CERTPATH=/srv/ftp/certs/$i if [[ ! -d ${CERTPATH} ]] || \\ [[ $(stat -c %a ${CERTPATH}) -ne 770 ]] || \\ [[ $(stat -c %U ${CERTPATH}) != \u0026#34;\u0026lt;USER THE CERTS ARE CREATED BY\u0026gt;\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}) != \u0026#34;ftp\u0026#34; ]] ; then echo \u0026#34;Creating, chmod, chown FTP directory for $i\u0026#34; mkdir -p ${CERTPATH} chown \u0026lt;USER THE CERTS ARE CREATED BY\u0026gt;:ftp ${CERTPATH} chmod 770 ${CERTPATH} fi done for i in $(cat /\u0026lt;PATH\u0026gt;/dehydrated/dehydrated.domains) ; do ## Now check that the zone owner has a CNAME pointing to us for this domain CNAME=$(dig _acme-challenge.$i CNAME +short) if [[ -z ${CNAME} ]] ; then echo \u0026#34;There is no CNAME pointing here for $i in the DNS\u0026#34; exit 1 fi done } exit_hook() { ## This hook is called at the end of the cron command and can be used to ## do some final (cleanup or other) tasks. : } invalid_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RESPONSE=\u0026#34;${2}\u0026#34; ## This hook is called if the challenge response has failed, so domain ## owners can be aware and act accordingly. # ## Parameters: ## - DOMAIN ## The primary domain name, i.e. the certificate common ## name (CN). ## - RESPONSE ## The response that the verification server returned } request_failure() { local STATUSCODE=\u0026#34;${1}\u0026#34; REASON=\u0026#34;${2}\u0026#34; REQTYPE=\u0026#34;${3}\u0026#34; ## This hook is called when an HTTP request fails (e.g., when the ACME ## server is busy, returns an error, etc). It will be called upon any ## response code that does not start with \u0026#39;2\u0026#39;. Useful to alert admins ## about problems with requests. # ## Parameters: ## - STATUSCODE ## The HTML status code that originated the error. ## - REASON ## The specified reason for the error. ## - REQTYPE ## The kind of request that was made (GET, POST...) } HANDLER=\u0026#34;$1\u0026#34;; shift if [[ \u0026#34;${HANDLER}\u0026#34; =~ ^(deploy_challenge|clean_challenge|deploy_cert|unchanged_cert|invalid_challenge|request_failure|startup_hook|exit_hook)$ ]]; then \u0026#34;$HANDLER\u0026#34; \u0026#34;$@\u0026#34; fi Write a script to download the certificates to your DNS servers Do something like the following on each servers to download the certificates from your main certificate server. #!/usr/bin/env bash set -e set -u set -o pipefail if [[ ${LOGNAME} != \u0026#34;root\u0026#34; ]] ; then echo \u0026#34;Must be root. Exiting...\u0026#34; exit 1 fi ## depending on what you are using to terminate the TLS connections ## you might need to ensure the correct user can access the certificate files SERVICEAPP=$1 if [[ ${SERVICEAPP} == \u0026#34;haproxy\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;knot-resolver\u0026#34; ]] ; then GROUPUSER=${SERVICEAPP} elif [[ ${SERVICEAPP} == \u0026#34;apache2\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;apache\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;nginx\u0026#34; ]] ; then GROUPUSER=\u0026#34;www-data\u0026#34; else echo \u0026#34;Unsupported service application. Exiting...\u0026#34; exit 1 fi CERTPATH=\u0026#34;/etc/certs\u0026#34; if [[ ! -d ${CERTPATH} ]] || \\ [[ $(stat -c %a ${CERTPATH}) -ne 750 ]] || \\ [[ $(stat -c %U ${CERTPATH}) != \u0026#34;root\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}) != ${GROUPUSER} ]] ; then echo \u0026#34;No ${CERTPATH} directory or permissions not good.\u0026#34; echo \u0026#34;Do something like:\u0026#34; echo \u0026#34; sudo mkdir -p ${CERTPATH}\u0026#34; echo \u0026#34; sudo chmod 750 ${CERTPATH}\u0026#34; echo \u0026#34; sudo chown root:${GROUPUSER} ${CERTPATH}\u0026#34; echo \u0026#34;Exiting...\u0026#34; exit 1 fi cd ${CERTPATH} if [[ ! -f privkey.pem ]] || \\ [[ $(stat -c %a privkey.pem) -ne 640 ]] || \\ [[ $(stat -c %U privkey.pem) != \u0026#34;root\u0026#34; ]] || \\ [[ $(stat -c %G ${CERTPATH}/privkey.pem) != ${GROUPUSER} ]] || \\ [[ ! -s privkey.pem ]] ; then echo \u0026#34;Private key not found or permissions not good. Exiting...\u0026#34; exit 1 fi ## Use the hostname to figure out the cert CN CN=$(hostname -f) if [[ \u0026#34;${CN}\u0026#34; == \u0026#34;test1.dnsovertls.nl\u0026#34; ]] ; then CN=\u0026#34;dnsovertls.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; elif [[ \u0026#34;${CN}\u0026#34; == \u0026#34;test2.dnsovertls.nl\u0026#34; ]] ; then CN=\u0026#34;dnsovertls1.\u0026lt;YOURDOMAIN\u0026gt;\u0026#34; fi tar -cf backup-$(date +%s).tar *.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/cert.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/chain.pem curl -s --ssl-reqd --tlsv1 -O ftp://ns1.acme.\u0026lt;YOURDOMAIN\u0026gt;:21/certs/${CN}/fullchain.pem if [[ ! -s cert.pem ]] || \\ [[ ! -s chain.pem ]] || \\ [[ ! -s fullchain.pem ]] ; then echo \u0026#34;At least one of the certificate files is empty or missing. Exiting...\u0026#34; exit 1 fi cat fullchain.pem \u0026gt; keycert.pem cat privkey.pem \u0026gt;\u0026gt; keycert.pem chmod 640 cert.pem chain.pem fullchain.pem keycert.pem chown root:${GROUPUSER} cert.pem chain.pem fullchain.pem keycert.pem if [[ ${SERVICEAPP} == \u0026#34;haproxy\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;apache2\u0026#34; ]] || \\ [[ ${SERVICEAPP} == \u0026#34;nginx\u0026#34; ]] ; then INITNAME=${SERVICEAPP} elif [[ ${SERVICEAPP} == \u0026#34;apache\u0026#34; ]] ; then INITNAME=\u0026#34;apache2\u0026#34; else echo \u0026#34;Unsupported service application. Exiting...\u0026#34; exit 1 fi systemctl reload-or-restart ${INITNAME} "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_a_tls_proxy/building_haproxy_using_tlsv1_3/",
	"title": "Building HAProxy using TLSv1.3",
	"tags": [],
	"description": "",
	"content": "Building HAProxy so that it can use TLSv1.3 This page gives an outline of how to build HAProxy with OpenSSL so it can use TLS v1.3. It assumes Ubuntu 16.04 as the platform. Build Openssl In order to have TLS 1.3 support you will need to grab version 1.1.1 of OpenSSL.\nThese instructions build OpenSSL into a directory /opt/openssl-1.1.1 to ensure that it\u0026rsquo;s separate to any other OpenSSL installs on the machine.\nwget https://www.openssl.org/source/openssl-1.1.1.tar.gz tar -xzf openssl-1.1.1.tar.gz cd openssl-1.1.1 ./config --prefix=/opt/openssl-1.1.1 shared make sudo make install Build HAProxy You need HAProxy 1.8.1 or later to enable TLS 1.3 support. We are using 1.8.13.\nsudo apt install build-essential libpcre2-dev zlib1g-dev wget https://www.haproxy.org/download/1.8/src/haproxy-1.8.13.tar.gz tar -xzf haproxy-1.8.13.tar.gz cd haproxy-1.8.13/ make TARGET=linux2628 CPU=native USE_PCRE2=1 USE_PCRE2_JIT=1 USE_OPENSSL=1 SSL_LIB=/opt/openssl-1.1.1/lib SSL_INC=/opt/openssl-1.1.1/include USE_ZLIB=1 sudo make install # Edit the haproxy.service unit file and ensure you have [Service] Environment=LD_LIBRARY_PATH=/opt/openssl-1.1.1/lib/ Modify the HAProxy configuration Add the following to the HAProxy config (Note the ssl-default-bind-ciphers and ssl-default-bind-options lines), updating any paths as required.\nIf you only want TLSv1.3 with no fallback to TLSv1.2 then set ssl-default-bind-options to force-tlsv13\nglobal log /dev/log local0 chroot /usr/local/var/lib/haproxy user haproxy group haproxy maxconn 4000 pidfile /usr/local/var/run/haproxy.pid tune.ssl.default-dh-param 2048 ssl-default-bind-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20 ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private defaults balance roundrobin timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout check 10s listen dns bind :::853 v4v6 tfo ssl crt /etc/certs/keycert.pem mode tcp server server1 127.0.0.1:9999 Note the keycert.pem file is the concatenation of the certificate chain and key into one file which is what HAProxy requires.\nCreate required paths The above configuration sets HAProxy to run chroot in a directory /usr/local/var/lib/haproxy. It\u0026rsquo;s necessary to create this directory. OpenSSL also needs access to /dev/urandom and /dev/random in the chroot.\n\u0026gt; mkdir -p /usr/local/var/lib/haproxy/dev \u0026gt; cd /usr/local/var/lib/haproxy/dev \u0026gt; mknod urandom c 1 9 \u0026gt; mknod random c 1 8 "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_unbound/",
	"title": "Using Unbound",
	"tags": [],
	"description": "",
	"content": " Use at least version 1.5.5 of Unbound if you want to configure your server with a certificate (as support for intermediate certificates was introduced in this version).\nVersion 1.6.7 or later is recommended.\nConfig file An example configuration file for Unbound that runs DNS-over-TLS on port 853 is below.\nserver: directory: \u0026#34;/etc/unbound\u0026#34; username: unbound chroot: \u0026#34;/etc/unbound\u0026#34; # logfile: \u0026#34;/etc/unbound/unbound.log\u0026#34; #uncomment to use logfile. pidfile: \u0026#34;/etc/unbound/unbound.pid\u0026#34; # verbosity: 1 # uncomment and increase to get more logging. # listen on all interfaces on port 853, answer queries from the local subnet. interface: 0.0.0.0@853 interface: ::0@853 tls-service-key: \u0026#34;\u0026lt;path_to_private_key\u0026gt;\u0026#34; tls-service-pem: \u0026#34;\u0026lt;path_to_certifcate_file\u0026gt;\u0026#34; tls-port: 853 incoming-num-tcp: 1000 # Number of simultaneous incoming TCP connections per thread to allow # Listen on UDP but still issues queries upstream over UDP. # Only available in 1.6.7 and later do-udp: no udp-upstream-without-downstream: yes qname-minimisation: yes # Enable QNAME minimisation to increase client privacy Depending on how your certificate is issued you may to add the intermediate certificate to your certificate file for clients to be able to validate. For example, if you use Let\u0026rsquo;s encrypt to create your certificate you will need to add the intermediate certificate (found in the /etc/letsencrypt/certs/000\u0026lt;N\u0026gt;_chain.pem file) to the cert file.\nIf you are using a version earlier than 1.6.7 then Unbound listens on UDP on port 853 with the above configuration. If want to disable UDP both upstream and downstream then use do_udp: no however this means all queries authoritative resolvers use TCP which may lead to resolution failures.\nAlso in older versions of unbound the tls-* parameters where called ssl-*\nDocker Image A docker image kindly provided by Lard de Bruin is also available.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/linux_from_source/",
	"title": "Linux From Source",
	"tags": [],
	"description": "",
	"content": " Build options Dependencies Download the getdns source Build the code Configuration Run Stubby from the command line Logging Test Stubby Modify your upstream resolvers Build options The Stubby code can be built either\nas a submodule of getdns (see below) or standalone with libgetdns as a dependancy. Instructions for this are in the Stubby github repo https://github.com/getdnsapi/stubby Dependencies For the most minimal Stubby build, the dependencies are\nlibssl and libcrypto from the OpenSSL Project. Version 1.0.2 of OpenSSL or later is required.\nlibyaml\nIf you intend to install the built libgetdns as system-wide component then Unbound is also a dependancy and the --enable-stub-only flag should be omitted below! See getdns README.\nDownload the getdns source Either clone the code:\n\u0026gt; git clone https://github.com/getdnsapi/getdns.git \u0026gt; cd getdns \u0026gt; git checkout master to use the very latest stable version of getdns, or grab a release tarball from this page: Latest getdns releases. Build the code \u0026gt; git submodule update --init \u0026gt; libtoolize -ci \u0026gt; autoreconf -fi \u0026gt; mkdir build \u0026gt; cd build \u0026gt; ../configure --prefix=\u0026lt;install_location\u0026gt; --without-libidn --without-libidn2 --enable-stub-only --with-ssl=\u0026lt;openssl_location\u0026gt; --with-stubby \u0026gt; make \u0026gt; sudo make install NOTE: Only use the --enable-stub-only flag with configure IF you want remove the dependancy on libunbound for getdns for some reason (Stubby works fine when getdns is built like this but beware this limits the functions of the getdns library as a generic system component and should be used with care).\nLogging/debugging\n--enable-debug-stub If you do want to see very detailed debug information as messages are processed (including connection statistics) then add the --enable-debug-stub option to the configure line above. Configuration It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. From 1.2.0 it is installed in /usr/local/etc/stubby/stubby.yml. For earlier versions a JSON like format was used - this is still supported but the file name must be specified on the command line using the -C flag. In versions prior to 1.1.3 the file was not installed automatically but can be manually copied to a convenient location by simply running something like:\n\u0026gt; sudo cp ../src/tools/stubby.yml /etc/stubby.yml More information on how to customise the configuration can be found here.\nRun Stubby from the command line Simply invoke Stubby on the command line.\nBy default it runs in the foreground, the -g flag runs it in the background. The pid file is in /usr/local/var/run/stubby.pid by default or can the piddir can be specified on the configure using an configure option.) \u0026gt; sudo stubby -l Logging The logging currently simply writes to stderr. In releases 1.2 and later runtime logging is controlled using the -l (enable full logging) and -v (choose logging level) flags.\nIf you built with stub logging enabled (using the \u0026ndash;enable-stub-debug flag) but want to hide it use: 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null | grep 'STUBBY' Stubby can also be run as a service - how to do this will depend on what distro you are using.\nTest Stubby A quick test can be done by using dig (or your favourite DNS tool) on the loopback address\n\u0026gt; dig @127.0.0.1 www.example.com Modify your upstream resolvers Once this change is made your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\nFor Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening. It might be useful to note your existing default nameservers before making this change!\nOn older systems just edit the /etc/resolv.conf file or on more modern systems update the DNS settings for your distribution e.g. systemd\nComment out the existing nameserver entries\nAdd the following (only add the IPv4 address if you don\u0026rsquo;t have IPv6)\nnameserver 127.0.0.1 nameserver ::1 You most likely need to restart the DNS resolver service\nYou can monitor the traffic using Wireshark watching on port 853.\nIf you encounter problems reverse this change to restore your default settings (no DNS Privacy).\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/about_stubby/",
	"title": "About Stubby",
	"tags": [],
	"description": "",
	"content": "\u0026lsquo;Stubby\u0026rsquo; is an application that acts as a local DNS Privacy stub resolver (using DNS-over-TLS). Stubby encrypts DNS queries sent from a client machine (desktop or laptop) to a DNS Privacy resolver increasing end user privacy.\nStubby is developed by the getdns project, has it\u0026rsquo;s own github repo and issue tracker but dnsprivacy.org currently hosts the online documentation for Stubby .\nFAQ What is Stubby?\nANSWER: Stubby runs as a daemon on the local machine sending DNS queries to resolvers over an encrypted TLS connections providing increased privacy for the user. Passive observers on the network can therefore no longer see the DNS queries made by the client, which are normally send in clear text on the wire using UDP. DNS-over-TLS was recently standardised by the IETF in RFC7858. The DNS server the client connects to can also be authenticated if the correct information is configured in Stubby - this prevents active attacks where a client might be directed to a server controlled by an attacker.\nHow does it relate to getdns?\nANSWER: Stubby is developed by the getdns team. libgetdns is a dependancy for Stubby, the getdns library provides all the core functionality for DNS resolution done by Stubby so it is important to build against the latest version of getdns. How is it different to DNSCrypt?\nANSWER: DNSCrypt is a method of authenticating communications between a DNS client and a DNS resolver. It prevents DNS spoofing. It uses cryptographic signatures to verify that responses originate from the chosen DNS resolver and haven\u0026rsquo;t been tampered with (the messages are still sent over UDP). As a side effect it provides increased privacy because the DNS message content is encrypted. It is an open specification but it has not been standardized by the IETF. Stubby uses only DNS-over-TLS to provide privacy, it does not implement DNSCrypt.\nDoes Stubby offer both \u0026lsquo;Strict\u0026rsquo; and \u0026lsquo;Opportunistic\u0026rsquo; usage profiles as described in RFC8310? What are the differences?\nANSWER: Yes, Stubby can work in both modes. In \u0026lsquo;Strict\u0026rsquo; mode authentication information (e.g. an authentication name or a SPKI pinset) MUST be provided for each nameserver and DNS queries will only be sent if Stubby can authenticate the namerserver using this information. This guarantees against a trivial MitM attack on the connection to the DNS Privacy nameserver. In \u0026lsquo;Opportunistic\u0026rsquo; mode Stubby will try to authenticate the nameserver if possible, but will settle for using an unauthenticated, encrypted connection. Or if none of the configured servers support DNS-over-TLS is will fallback to using clear text over UDP or TCP in order to provide DNS service. This is a less secure mode than \u0026lsquo;Strict\u0026rsquo; but means that Stubby can still resolver your DNS queries even if a DNS Privacy server is not available. See Configuring Stubby for more information.\nWhat is the difference between using Stubby and using Unbound as a local forwarding resolver?\nANSWER: Unbound can be configured as a local forwarder using DNS-over-TLS to forward queries. However at the moment Unbound does not have all the TCP/TLC features that Stubby has for example, it cannot support \u0026lsquo;Strict\u0026rsquo; mode, it cannot pad queries to hide query size and it opens a separate connection for every DNS query (Stubby will re-use connections). However, Unbound is a mature and stable daemon and many people already use it as a local resolver. While there were some early issues the last few releases of Stubby have focussed on stability and security and have significantly improved the usability of Stubby. We also have plans to add a small cache to stubby! Note that some users choose to use the two together, unbound for caching and stubby for upstream TLS.\nWhat TLS version and Cipher suites does Stubby use?\nANSWER: Stubby supports TLS v1.2. In \u0026lsquo;Strict\u0026rsquo; mode Stubby is limited to using the 4 Cipher Suites recommended in RFC7525, in Opportunistic mode is uses the default OpenSSL Cipher suites.\nThe 1.3.0 release of getdns will support TLS 1.3 when using OpenSSL 1.1.1 or later, so build Stubby against that if you want to try it out! It also has a configuration option to allow the user to specify the Cipher Suites to be used.\nDoes Stubby support IPv6?\nANSWER: Yes - it fully supports IPv6.\nDoes Stubby support DNSSEC?\nANSWER: Yes, stubby can be configured to be a local validating stub. Note that this can currently add an overhead to DNS resolution because a greater number of queries are required (this will be mitigated in a future release when a small cache will be added to stubby).\nWhat version of OpenSSL does Stubby require?\nANSWER: Stubby requires OpenSSL 1.0.2 or later for all functionality to be available.\nHow does Stubby decide which upstreams to use when some are failing?\nANSWER: In the 1.3 release of getdns a number of criteria are used to determine when to \u0026lsquo;back-off\u0026rsquo; from an upstream server e.g. how many times a connection to the server is tried but failed, if the server can be authenticated successfully (in Strict mode), how many times the server closes down the TLS connect before stubby does, how many timeouts are received from the server. When a server fails it is retried at increasing intervals up to a period of one hour. Some of these parameters are configurable. What if I don\u0026rsquo;t have a local certificate store to validate certificates (e.g. I\u0026rsquo;m running on a router with minimal TLS library install)?\nANSWER: Since the 1.4 release of getdns validation of self-signed certificates can be done using just a SPKI pinset. See Issue#46 and PR#371.\nContributors Many people have contributed to developing and testing Stubby including (but not limited to!):\nAllison Mankin Willem Toroop Sara Dickinson Joel Purra Melinda Shore The rest of the getdns team! Mohit Batra Georgina Hawes Molly Carton Jim Hague John Dickinson "
},
{
	"uri": "http://dnsprivacy.org/test_servers/map_of_test_server_locations/",
	"title": "Map of test server locations",
	"tags": [],
	"description": "",
	"content": "The map below is an static image of the current DNS-over-TLS test server locations. We don\u0026rsquo;t show Quad9 on here because they run an anycast service (see their website for details).\nThe icons reflect the software being used:\nGreen pin: Unbound Pink pin: Knot Resolver Blue pin: TLS proxy in front of a nameserver Blue flag: Unknown "
},
{
	"uri": "http://dnsprivacy.org/the_problem/",
	"title": "The Problem",
	"tags": [],
	"description": "",
	"content": "Why is DNS a privacy concern? DNS Queries DNS Zone Transfers Institutional Privacy Overview of solutions Client (stub) to recursive resolver Recursive discovery Recursive resolver to Authoritative server Zone transfer A note on SNI The DNS is one of the most significant leaks of data about an individuals and an organisations activity on the Internet.\nSome of the issues in simple terms:\nDNS Queries Almost every activity on the Internet starts with a DNS query (and often several). A key function of the DNS is to map human readable names (e.g. example.com) to IP addresses that computers need in order to connect to each other. Those queries can reveal not only what websites an individual visits but also meta data about other services such as the domains of email contacts or chat services. Whilst the data in the DNS is public, individual transactions made by an end user should not be public.\nHowever DNS queries are sent in clear text (using UDP or TCP) which means passive eavesdroppers can observe all the DNS lookups performed.\nThe DNS is a globally distributed system that crosses international boundaries and often uses servers in many different countries in order to provide resilience.\nIt is well known that the NSA used the MORECOWBELL and QUANTUMDNS tools to perform covert monitoring, mass surveillance and hijacking of DNS traffic.\nSome ISPs log DNS queries at the resolver and share this information with third-parties in ways not known or obvious to end users. Some ISPs embed user information (e.g. a user id or MAC address) within DNS queries that go to the ISPs resolver in order to provide services such as Parental Filtering. This allows for fingerprinting of individual users.\nSome CDNs embed user information (client subnets) in queries from resolvers to authoritative servers (to geo-locate end users). This allows for correlations of queries to particular subnets.\nNote that even when using a VPN some VPNs will still leak your DNS queries by sending them unencrypted to your ISP. Use the nice tool from anonymyster.com to check is this is happening with your VPN!\nAn overview of the problems is given in this Tutorial: DNS Privacy Tutorial.\nFor an expert review of this topic recommended reading is DNS Privacy Considerations.\nDNS Zone Transfers DNS zone transfers are transmitted in clear text, which gives attackers the opportunity to collect the content of a zone by eavesdropping on network connections. The contents of the zone could include information such as names of persons used in names of hosts. Best practice is not to use personal information for domain names, but many such domain names exist. The contents of the zone could also include references to locations that allow inference about location information of the individuals associated with the zone\u0026rsquo;s organization. It could also include references to other organizations. Institutional Privacy Interesting work has recently highlighted institutional privacy risks in DNS data.\nOverview of solutions For a full discussion of the options available please see DNS Privacy - The Solutions.\nClient (stub) to recursive resolver The two most widely deployed solutions for stub to recursive resolution are DNS-over-TLS and DNS-over-HTTP; they both encrypt DNS data and prevent passive surveillance of network data revealing users\u0026rsquo; DNS queries. They can both allow users to validate the server they choose for their DNS service to make sure they are using a provider who has a good privacy policy for how they handle user data. But they do have some different protocol properties and in practice are being deployed in somewhat different ways at the moment. Neither of these are trivial changes in the way DNS works and encryption of all DNS queries by default will not happen overnight. A Best Current Practice document describing Recommendations for DNS Privacy Service Operators has been approved for publication. This covers both downstream and upstream protocol issues and data handling recommendations for Operators of recursive resolvers that offer an encrypted protocol. See DNS Privacy Clients, DNS Privacy Implementation Status, DNS Privacy Public Resolvers, DNS Privacy Test Servers for more information.\nRecursive discovery One significant challenge is around discovery of which transports a particular resolver supports and securely acquiring information required to connect and validate a particular resolver. The ADD working groupin the IETF is currently working on a range of proposals around this issue.\nRecursive resolver to Authoritative server The DPRIVE working group at the IETF worked on requirements and solutions for that, if you are interested see the DPRIVE mailing list. In particular DNS-over-QUIC has being stanadardized as an attractive solution for this space. Additionally RFC 9539 - Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS has been published.\nCurrently the DELEG working group is looking at developing mechanisms to allow authoritives to securely publish credentials that recursive resolvers can use to validate encrypted connections to them.\nZone transfer The DPRIVE working group has now standardized Zone Transfer over TLS (XoT)\nA note on SNI Unfortunately the Server Name Indicator header in HTTPS messages also reveals the name of the website contacted by the user so provides a similar leakage channel for web traffic as the DNS queries. However there is work underway in the TLS working group at IETF to encrypt the Client Hello including the SNI: TLS Encrypted Client Hello\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/workshop_notes/breakout_room_2/",
	"title": "Zoom Breakout Room 2: Civil Society, Usability and DNS",
	"tags": [],
	"description": "",
	"content": "Zoom Breakout Room 2: Civil Society, Usability and DNS 9 people joined the breakroom of Session 2: Civil Society, Usability and DNS\n0-5 minutes: Gurshabad summarized the talks in the second session\n5-10 minutes to cover the questions to the talks: All the questions were covered during the talks, no questions asked.\n10-25 minutes: discussion\nDiscussion:\nQ: Paul Syverson: what can be done to make balkanization itself costly at an ecosystem level, so protocols that might be resistant to being functional if set up for use in a private space? That is clearly in great tension to modular design and testing. (Easy narrow question what can be done to make\nRam: If we look at the top alexa companies, most of them are based on US and EU. It\u0026rsquo;s important to let people access these companies. CDN could be an option as the CDN points cannot be blocked.\nGurshabad: even the govt needs access to these endpoints, like CDN. the externality of consolidation is that it is disincentive for balkanisation.\nUlrich Wisser: A country can do whatever they can, we can\u0026rsquo;t stop that, we need to make one to participate. what is one\u0026rsquo;s incentive to stay on?\nVijay: China and Russian applies a lot of censorship. It\u0026rsquo;s hard to find a resolution for such countries.\nRam: if the protocol can consider the censorship when it is designed and standardized, it might be hard for the countries to block\nGurshabad: TLS 1.3 is not usually blocked (because of critical mass)\nRam: you need TLS 1.3 to protect the internet, but it\u0026rsquo;s not true for Dot and DoH\nVijay: it\u0026rsquo;s easy to port 853, but it\u0026rsquo;s hard to block 443. It\u0026rsquo;s hard to change how a big country applies their censorship.\nHan: even we add consideration of censorship in protocol, a country may run their own protocol within the country and translate the protocol to the standard one on the country edge. But we can make the protocol conversion hard.\nGurshabad: looked at the Firefox UI: placement of DoH option matters (whether it is under network settings or privacy, currently it\u0026rsquo;s under network settings)\nWhat people want to see/ do research in the future?\nbetter education: people are worried that they will break things if they change the default settings. Provide more support (e.g., youtube video) on the Web browser.\nprivacy policy that can be read within 10 seconds.\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/workshop_notes/",
	"title": "Workshop Notes",
	"tags": [],
	"description": "",
	"content": "Session 1: Measurement of Encrypted DNS Oblivious DNS over HTTPS (ODoH) Plaintext, traditional DNS (Do53) is the most widely used variant of the DNS protocol (92% of traffic seen at 1.1.1.1) However, Do53 leaks information about user traffic on the network DoH encrypts stub-to-resolver traffic. However, resolver operators can still associate queries with clients, enabling them to profile clients There are a number of additional problems in DoH today: centralization, privacy by policy, and regulatory concerns Key goals of ODoH: address association of queries to clients, and privacy by policy Key insight of ODoH: de-couple client IP addresses from the DoH queries they issue ODoH protocol (simplified) Client encrypts query name, wraps it in a DoH query and sends it to a proxy node, which terminates an HTTPS connection with the client The proxy node then forwards this query to a DoH resolver or Oblivious target on behalf of the client Once the proxy node receives the response, it sends the response back to the client Important considerations Clients need to choose proxy nodes and target resolvers that are not operated by the same entity Clients need to have some level of certainty that proxy nodes and target resolvers are not colluding Proxy nodes can see client\u0026rsquo;s IP address, but not the contents of the query Target resolver can see query contents, but not the client\u0026rsquo;s IP address Performance measurement setup Three public resolvers: 1.1.1.1, 8.8.8.8, and 9.9.9.9 90 client stub resolvers, 10 per vantage point 7 Google Cloud datacenters in the western/central/eastern United States, 1 datacenter in Montreal, and 1 datacenter in San Paulo Experiment: 21,000 DNS requests per day (15 per minute) DNS response time measurements Takeaway 1: important to choose low latency proxy/target resolver pair Takeaway 2: re-use connections Connection re-use improves median DNS response time performance by 48% Takeaway 3: co-location between proxy/target resolver results in better performance Takeaway 4: compared to DoH, average query response times increase by 100% without co-location, and 50% with co-location In-browser measurements (page load times) PLTs increase by ~20% compared to Do53 without co-location, and 13% with co-location Measuring DoT/DoH Blocking Using OONI Probe OONI is a platform for measuring Internet censorship. Measurements performed from more than 200 countries. The platform is collaborative in that users install a tool called OONI Probe to run measurements (desktop app, mobile app, CLI) Motivation for measuring DoT/DoH blocking States are increasingly asserting their power of sections of the Internet that they control If I\u0026rsquo;m a user querying a domain name that I \u0026ldquo;should not be\u0026rdquo; with an ISP resolver, then I may not get the correct response DoT and DoH should help avoid this DNS-based censorship in theory, so it\u0026rsquo;s important to see whether or not DoT/DoH are getting blocked in practice DNSCheck experiment Step 1: Bootstrap a DoT/DoH service. If the resolver URL contains a domain name (not something like 127.0.0.1), resolve the domain name using the client\u0026rsquo;s system resolver, and see if you get an IP address or an NXDOMAIN. Add the result to the set of known IP addresses. Step 2: Lookups. For every IP address we discover (plus ones we knew from beginning), try to connect to this IP address, do TLS handshake. If everything is successful, send a query and record a reply. Measurements Dec 15th, 2020 - Jan 10th, 2021 123 DoT/DoH services measured. This presentation focuses on DoH over TCP only Used an experimental CLI client (miniooni) Presentation focuses on three vantage points: Kazakhstan (AS48716), Iran (AS197207), China (AS45090) Main findings dns.adquard.com resolved to 10.10.34.36 in IR Most endpoints fail or succeed with lookups consistently 1.1.1.1:853 and 1.0.0.1:853 were blocked and unblocked frequently in KZ Same for 1.1.1.1:853 in IR dot://dot-jp.blahdns.com was unblocked in CN around Jan 1st, 2021 [Presentation included success/failure rates by vantage point in a table] In KZ, most blocked resolver was Cloudflare (91% DoT, 88% DoH) Most common cause of failure in KZ was timeout after TLS handskae Most common cause of failure in IR was timeout during TLS handshake Most common cause of failure in CN was TCP connection timeout SNI-based blocking occurred in KZ for DoH cloudflare-dns.com: 99% failure via timeout after TLS handshake mozilla.cloudflare-dns.com: 100% success Future work Make DNSCheck available to all OONI Probe users, rather than just miniooni users Study DoH over QUIC blocking Study whether Encrypted Client Hello reduces blocking Study the fingerprints of popular TLS implementations \u0026ldquo;No Port 53, Who Dis?\u0026rdquo;; a year of DNS over HTTPS over Tor Alec and his partner have exclusively used DNS over HTTPS over Tor for over a year. It worked marvelously, and he forgot that he set it up. It\u0026rsquo;s a system that is meant to provide additional privacy guarantees to your DNS queries. Concern: latency is going to be terrible. Median latency for Alec: 262 ms. Goes up to 464 ms if you disable caching. Some people live with worse performance, day-in, day-out. Some people are willing to trade off latency for other values, e.g. privacy. Arguing about 5 ms vs. 50 ms vs 500 ms is an act of tech privilege. Minimum latency isn\u0026rsquo;t everything. If you accept this persepective, you may instead think about latency in terms of a budget. DoHoT was designed to address a privacy-invasive threat model based around actors who.. May surveil network links Block queries Tamper with queries Learn that my identity was/is associated with certain queries etc.. Traditional DNS (Do53) risks all of these threats. DoT, DoH, ODNS, ODoH risk some of these. DoHoT risks arguably none of these, unless Tor relays become severly compromised. Setup Copy of dnscrypt-proxy configured as stub Presented to the LAN as a DHCP Do53 service Configured to make all resolution requests over Tor via SOCKS Used a load-balanced pool of public DoH servers Takeaway: please stop thinking of latency as cost. Please consider it a budget to offer value. Q/A / buffer time discussion Oblivious DNS over HTTPS (ODoH)\nQ (Paul Hoffman): Who are the users of this protocol, given that it is a larger and more fragile protocol than Do53/DoT/DoH? Who would not trust their immediate upstream resolver to profile but would trust them to collude with their resolver? A (Sudheesh Singanamalla): One way to ensure that entities don\u0026rsquo;t collude is to have some Mozilla-like organization that vets resolvers (logging resolvers, non-logging resolvers, etc) so that users can make informed decisions. A (Chris Wood): Anyone who is interested in adopting DoH also consider the resolver to be malicious. ODoH in a way fills in the gap that DoH left. Q ([?]): How do you limit the metadata leakage of DoH, e.g. a rogue resolver wanting to associate clients with queries? A (Sudheesh): If there was a rogue resolver that wanted to identify what the client was doing, they could send a unique IP address and see who connects to that IP address. However, that\u0026rsquo;s outside the security/privacy guarantees of the protocol itself. Q ([?]): Would it be better to use proxy nodes in a round-robin fashion to limit any concerns related to associating a user (or set of users) with a proxy? A (Sudheesh): This issue should not occur is many users are using a proxy. However, if there are very few users using a proxy, it could be indirectly possible to associate a proxy to a user. Measuring DoT/DoH Blocking Using OONI Probe\nQ (Allison Mankin): Are you generally using TLS 1.2 for measurements? You mentioned TLS 1.3 specifically on one data point. A: We manually ran some measurements with TLS 1.3 to see whether outcome changed, and it did not change the outcome. Q (Sara Dickinson): Am I correct in thinking that you ran some measurements in India that produced slightly different results? A: We did some measurements in India. IIRC, there was no blocking in India. Q (Ulrich Wisser): There was so much blocking w/ Cloudflare. Is that because the IP is allocated from a research network? A: QUIC for 1.1.1.1, which means it was possible to route to this address. Q (Puneet S.): I represent Google DNS. It was surprising that 8.8.4.4 worked but 8.8.8.8 didn\u0026rsquo;t work. Do you have any thoughts on that? A: Censorship is not consistent. Every network has its own set of rules. Q ([?]): Did you only use one VPS in KZ? Is the blocking specific to certain ASes or country-wide? A: In KZ, we used two networks. One was a VPN and another was a VPS, but we stopped measuring with the VPN because nothing seemed to be blocked. Thus, it was unclear whether or not the VPN was actually located in KZ. Anecdotally, the structure of blocking is centralized, though. \u0026ldquo;No Port 53, Who Dis?\u0026rdquo;; a year of DNS over HTTPS over Tor\nQ (dkg): Can you characterize the typical workflow for people on the network that this was deployed on? When you say this is liveable, what does that mean? Presumably due to lockdown there\u0026rsquo;s not very many people in your house. A: Domestic environment for me and my partner. They connect to DHCP who gives the IP address of the resolver. The resolver runs on a Raspberry Pi. Not sure whether you would roll this out in a coffee shop or have everyone run this on their laptop independently. Q (Chris Wood): I want to drill in on the threat model. You\u0026rsquo;re assuming an NSA-inspired actor that can use endless compute to track down what a client is doing. However, this threat model doesn\u0026rsquo;t seem to scale. If every client was using something like ODoH, do we think there is enough resources available to track down what every client is doing? A: I\u0026rsquo;m skeptical of this, too. However, there is a waterhole attack for DoH/ODoH, in which you log everything, throw it into an Oracle bin, and perform an analysis when you need to. Q (Paul Syverson): My understanding is that Tor browser does not currently support DoH. This raises a learning curve/usability issue. How steep of a learning curve do you think is setting up DoHoT, and are you working on this? A: I am not working on this because it\u0026rsquo;s a home setup thing right now. It\u0026rsquo;s hardly like I\u0026rsquo;m investing in it right now. I greatly encourage people to work on this and experiment on their own accord. However, because we have something like DHCP which literally tells people which resolver to use, the only additional thing I had to do was setup a firewall to ensure that no Do53 queries get leaked. You could easily turn a DoHoT service into an appliance. Misc questions\nQ (Paul Hoffman): It seems like everything discussed so far requires users to have a certain level of understanding about privacy/latency tradeoffs. Doesn\u0026rsquo;t that go against everything we know so far about users? Who are we designing these protocols for? A (Alec Muffett): I\u0026rsquo;ll turn that around: are we designing protocols only for speed demons, or people who want to achieve some other goal? Some people use Tor browser because they want some level of privacy. They are willing to accept latency tradeoffs. I don\u0026rsquo;t see that as elitist or discriminatory; it is offering value for people that are trying to solve a particular issue. A (Sudheesh Singanamalla): It may seem like these protocols are designed for people who know exactly what they\u0026rsquo;re doing, but that\u0026rsquo;s how protocols like HTTPS came into place. Most people don\u0026rsquo;t even know that HTTPS is in place right now, due to the big push that was made by the [networking/privacy/security] community. I suspect something similar will happen with DNS. I don\u0026rsquo;t think users are dumb; they clearly know what they want and what they\u0026rsquo;re doing. Session 2: Civil Society, Usability and DNS DNS Privacy Vs based on a paper\n4 Goals: confront tensisons between privacy protest, tradeoffs between privacy and other considerarions, a lot of researches are needed.\nAbstract:\nmake DNS lookup more private for the user affects internet mearsurements DNS cencership DNS privacy is a big win as a public interest. Two fondational docs: RFC 6973, RFC 8280.\nMeasurement:\nPublic interest benefits: 1) knowlede of network perf and op are inportant 2) empower users as consumers, 3) monitor bad behacvious. However, it comes at the cost of user pvivacy and 2) M is harder when user data is private (e.g., DoT, DoH) The research question is Which resrarch methods will work and not work with private DNS. Does user choise have impact, e.g, DoT, DoH? Consolidation\npublic interest concern 1) eco detrimental 2) degrades quality of services 3) slows innovations 4) single points of failure 5) facilitates mass surveillance 6) complicates regulatory jurisdiction. But there is huge market like browsers to adopt private DNS and the early adopator have better business model The key question is does ubiquitous adoption of private DNS resolve consolidation? Abuse\npublic interest benefit: mitiagte abusive behavior and lemitigate restrictions at the content layer But more private, more hard to mitigate Shutdowns\npublic interest concern: internet shutdowns violate the rights to free expression, access to information, and assembly. Next steps:\nadk for feedbacks in GitHub inlcude \u0026ldquo;Vs Usability and Accessibility\u0026rdquo; Make more distinctions between DoH, DoT and others find publication Censored Planet From a paper published in CCS 2020 Internet censorship (e.g., certain web sites are blocked) is pervasaive and evaolving The measure is very complex, cen mathos variance, geo and network variance, logtitudual varians previous studies, few contries Direct cen mesurement platform (direct measurement), limitatiaons: scales, coverage, continuity, syn, ethics Remot cen measurement techs: Augur, Iris, Satellite, Quack, etc Iris, Satellite are used to measure DNS manipulate, compare answers from control resolvers and test resolvers Satellite Scals (8.2.M OpenDNS resolvers in 232 countries). To reduce risk, only use infra resolvers (30k resolvers in 175 coutries) To resolve the Limitations of remote, Censored Planet was introduced launched in 8/2018 95,000 vp in 221 countried 21.8b meausremnts in 20 months 8 ASes/ country Modular Design Input scanner selects vantange point, test list Interference scanner: scheduler, health monitoring Data Pre-propessing: aggreate data, false positive Censorship analysis censorship values vary within coutries Time series analysis: anolmoly detection , trend analysis Findings 15 event, 4 reported, 10 unreported. Trends DNS censorship in more than 100 countries Some countries DNS filter of COVID-19 related websites (e.g., China, Iran), but most websites are not malicious. Data is publicly available When DNS Goes Dark: Understanding Privacy and Shaping Policy of an Evolving Protocol based on a TPRC paper The question is as the protocol evoles, do the privacy preserving extentions enhance user privacy? between clients and ISPs browsers public DNS operators (google, cloudflare, 75% of the resolver market): more orgs don\u0026rsquo;t want to maintain their own DNS resolvers EFF, cdt, (NGO) Who are looking our for the user privacy? despite DoH, DoT, ODoT, someonce has access to a users\u0026rsquo;a DNS lookups DNS and PII: Is IP addess PII? most legal regulations in EU, US: IP by itself may not be PII, but if the IP can be linked be linked to a household, then it\u0026rsquo;s PII examined 12 DNS providers (e.t., google, dclouforce) 9 had privacy polies (6 has DNS policies), other 3 do not have privacy policies examine the 6 providers under the GDPR articles - legalally read (10-30minutes) GDPR Article 5(b): Purpose limititations, not clear that whether it\u0026rsquo;s ok to share data for profit. 5(c): Data minimization. The generak policies are too board, cover all sevices, not specific to DNS 5(e): Storage limitations: DNS only privacy policies are far more stringent than general privacy policies. Artical 7: Conditions for consent: consent is a gray area. The question is what does the content mean? Article 45: Data transfers on the basis of adequacy: User Expectations and Understanding of Encrypted DNS Settings encrypted DNS is not often \u0026ldquo;on by default\u0026rdquo;. And trustes recursive is also selected by default. What are the defualt settings? Do the users understand it? Do the users lnow how to change? Different web browsers have different UIs to enable DNS-over-HTTPS. Hard to find. Choosing a trusted recursice also differs by web browsers pilot survey: do users unstead what DNS setting options do? How do users interact with current DNS setting options? Why do users choose the seeting that they do? findings: people do change the default setting if they knew how people had limited knowledge of DNS privacy preliminary: 15 users in survey via prolific, plan for larger survey changing setting in Firefox some are not willing to change choised of encrypoted DNS setting? Automatic? People make different decisions if they know more about the encyrpted DNS People more ISP, but most do not know NextDNS cloudflare, Quad9 Main findings: stick with defualt settings don\u0026rsquo;t understand differene options some peiple change options when they have more info Future steps: larger sample size more extensive interface testing Q/A / buffer time discussion Talk 1:\nPaul Hoffman: good research, DNS privacy introduces some problems. Benefit the entire DNS community. A: present the public interests. Needs to be acceptable bu non-tech peeple, but the it needs to tech reasonable Ram: Shutdown, 2019, Iran blocked internet. had their own internet. intranet? A: Vijay: just a comment: where to publish, (regulation, law): TPRC could be a good fit, legal comm (e.g., senatros), technitians paul Syversion: anybody designs the protocol in an overall A: please contribute to the paper on GitHub Talk 2\nDo your DNS measurements cover encrypted DNS protocols as well?\nA: not included, to add. DoH Vijay Gurbani :slide 25, russian is under estimated\nA: number of vp, limit selection: only select infra/org vp. throw some potential vp, all countre 10,000 vps Paul Syverson: Tricky questions: people trying to get good, e.g., COVID information out there might be inclined to block anything that is known/validated. Horrible from a censorship general use perspective. Smart and good public protection in quick use of available resources perspective. Response?\nMore speech is not better speech\nA: the covid ones are not malicious in various secrutiy categories. It might not be a good idea to block all the related covid-19 websites Pallavi: was any investigation done to determine if RPZ for some of the open resolvers might be a contributor to the censorship.\nWill be covered at the end of the day Talk 3:\nBenno Overeinder: slide 14: did you look at 9.9.9.9? They don\u0026rsquo;t collect IP, they transfer IPs to geo location. A: didn\u0026rsquo;t. but none of the provider listed in the slide had policy about data transfer. Although some providers said they no storage, they do have retention periods. Talk 4:\nMurtuza Jadliwala: I am assuming your study targets users who know what DNS is. A sizeable internet population doesn\u0026rsquo;t know what DNS is or what it does. So how representative these results will be of the entire Internet user population?\nA: didn\u0026rsquo;t assume people know DNS. The survey started with questions of DNS and encrypted DNS. DKG: similar thing about HTTP and HTTPs consolidation?\nA : a paper about cwarling the DNS. but not awrare of paper HTTP and HTTPs consolidation. Sandra Siby: additional info provider to users to make decision?\nA: not from specific provider, just text what is encrypted DNS, optunistic mode. A lot people chose to stay worring phone may not work if they change the mode. Sudheesh Singanamalla: Super interesting work. Do you think there’s an interesting opportunity towards the education aspect of privacy to have some sort of a landing page like the ones during browser updates to show users some explanations of what their settings could mean and suggestions to switch any settings if necessary?\nA: firefox has a popups when it changed to DoH defult. An education page can be very helpful. The firefox changed the popups during the survey - added more information. Session 3: Novel work, ADoT and Future Research Programmable In-Network Obfuscation of DNS Traffic Liang Wang about this in-progress paper Do53 traffic reveals sensitive information Encrypted DNS methods put trust in public DNS resolvers, use a strategy of keeping the IPs of the queriers away from the public DNS resolvers. One solution is to use proxy-based solutions such as Tor or ODNS - no party can see the query and the source IP at the same time. This adds some issues to the deployment - introduction of latency or performance bottleneck. Also, configuration and user effort may be needed - adds learning curve or possibility of error.\nSuggestion: programmable network, upload a policy about the source IP into it. It has good performance properties. Do not need to make it do all the encryption work - which it may have some limits for - convert the source IPv4 to an IPv6 address. Encrypt the IPv4 address in the IPv6 address. Do not need cooperation with clients etc.\nPINOT sits at border of IPv4 network. PINOT encrypts the source IP in each packet individually. After encryption, the source IPs are meaningless to parties outside the network.\nChallenges include limitations of the programmable switch in PINOT - need to not put a packet through the pipeline only once, otherwise this hits too hard on throughput and latency. Decided to use a crypto algorithm that allows for this restriction, two-round Evan-Mansour. Not as secure as AES, but it is hard to break, and they think it is sufficient for this application - see the paper for details. Using IPv6 to allow the ciphertext to be put into the packet - use in the source IP address. Can\u0026rsquo;t use another field due to routers modifying along path. PINOT stores the encryption keys only. It is stateless.\nReserved IPv6 prefix is used Deploy at multiple ingress and egress points in the network. DNS traffic can leave the network from any egress point. Good for connectionless protocols, but working on an approach to connection-oriented DNS. Extra layer of protection on the IP address without modifying anything else. PINOT: network operator can still inspect and filter DNS traffic because only the source is obscured for the operator. They tried it with 350+ public DNS resolvers that support IPv6 - they were fine with requesting A records from this IPv6.\nThey did find asymmetry but the performance was not affected by this. They also use PINOT to talk to public NTP and for a key-based source address encryption for third party scanners - keep the source addresses from these public or third parties\nQuestions \u0026ndash;\nPaul Syverson: Even if the acknowledged weaker encryption is sufficient for these purposes, there is a long history of such restricted security mechanisms resulting in insecurity via function creep. Why do you think that won\u0026rsquo;t happen here? And what would be the cost of using AES instead?\nA: the cost of using AES is very poor performance in the data plane, tradeoff between those Paul: have you got numbers of what the contribution of AES would be to be able to reason about the tradeoff? A: we didn\u0026rsquo;t build this, but there are calculations about AES in another paper from the group Chris Wood: What is the threat model here? Given that the network is generally considered untrusted, how could clients reasonably ensure they benefit from PINOT? A: Value-added service. Make the network trusted in this case.\nBenno Overeinder: you used P4 switches, but did you consider XDP or eBPF which is easier to deploy?\nA: Once the P4 network is deployed, no user involvement. Benno: could test the threat model and protocol with the other protocols.\nTalk offline Britta Hale: You state that you are using static, pre-installed keys. Considering that a proxy may be compromised or by oversight request have its keys given up, how do you propose your system maintaining or achieving security over time and at scale? A: it\u0026rsquo;s not a static key. We do not record the key - just for a short-term. Generate new ones Britta: doing negotiation of keys from previous? A: just random keys\nSudheesh Singanamalla: Is there a reason why in the campus network the communication between the end-host to PINOT switch isn’t necessarily secured (exception with DNSCrypt)? Does the organization (campus/enterprise) want to know DNS requests made by users locally within the network? A: we just want to show the usefulness of this potentially, but it\u0026rsquo;s not tied to the organization model particularly\nA Balanced DNS Information Protection Strategy Scott Hollenbeck speaking for Verisign as TLD and Root operator Points out the number of TLS vulnerabilities surfaced every year. For some operators, the tradeoff to add encryption to the DNS stacks may be too risky Client information is not sent from recursive servers to authoritatives but the full FQDN is sent. We believe that Qname minimization is the best for this. It significantly reduces the risk of exposure. Maybe the risk is reduced enough versus encrypting with ADoT We do think that SLD (second level DNS servers)have a good case to do encryption with recursives.\nBut note that there is potential for operational impact on both parties. We encourage measurement studies to understand the impacts Other minimization techniques - NXDOMAIN/query cut, aggressive NSEC caching Minimize when possible, encrypt when needed elsewhere\nQuestions\nJim Reid: IETF has multiple WGs tackling this work in isolation from each other, should we take a holistic approach to the IETF and maybe stop some of the work on encryption?\nA: the IETF has done a pretty good job that the various DNS WGs are sharing info. E.g. ADD and DPRIVE. IETF is traditionally challenged in operator involvement, need to get operators to this topic\nWes Hardaker: concern about things that aren\u0026rsquo;t sent on purpose, e.g. the keywords that turn into queries.\nA: Verisign does publish a lot of info about the traffic we see at the root servers\nPaul Hoffman: this is not an official statement from ICANN but I don\u0026rsquo;t believe that any root server or TLD operator shoud be prevented from offering better privacy with encryption. Let the operators decide themselves. In the absence of the resolvers adding the minmization features, it\u0026rsquo;s better to let the operators make their decision on this\nA: no disagreement. We take this decision very seriously. If you operate a TLD that isn\u0026rsquo;t as big as COM, \u0026ldquo;knock yourself out\u0026rdquo;\nAlec Muffett: what are the risks you see of not being able to see the traffic. He leans to instrumentation at the endpoints to make sure users are going to the right server etc. He doesn\u0026rsquo;t see this in the overall discussion. Is it part of the overall model A: just my opinion, I believe it is considered. Verisign blocks DOH on its corporate networks.\nArmor for the back half of the camel: Why confidentiality matters for recursive DNS traffic DKG - two humps of the camel are the Stub-to-Recursive and the Recursive-to-the-Authoritative Assumption of a network-based adversary (more or less powerful) - what we have \u0026ldquo;solved\u0026rdquo; with DOH and DOT, but of course raising other issues. Head of the camel - armor there still allows the adversary to see queries coming to recursive and leaving it. The recursive is acting as a steward of the end-user.\nTiming analysis/side-analysis all remain possible and the stewardship by the resolver operator should include protecting the back half of the camel Previous talk characterized this as traffic to root, TLDs etc. Important to ack how problematic SLD are. Ex. of the New Yorker article about the Trump campaign contacts with a Russian bank - it could be done with just recursive to authoritative. DNS queries were coming from two orgs for a domain that nobody else looked up. Very revealing to see that those two were talking to each other because nobody else was looking up the domain. Problems with misconfigurations - the minimizations are risky to deploy, a SLD may be unreachable with issues of minimization A network monitor may not be able to pick out and target an individual from traffic above recursive. Who was visiting a site such as disruptj20.org? Get the ISPs from the data, then push on the ISPs by legal or extra-legal means. An resolver would do well to encrypt the back half for this. What does it mean to the authoritative if they are not offering encryption to the resolvers. The clients of an authoritative - the domain operator vs. the users of the domain. Resolver operators are stewards of both below and above. When might someone look up OpenPGP key for DKG at aclu.org. If the authoritative server doesn\u0026rsquo;t encrypt this, they are leaking info about how often DKG gets encrypted email. Lots of other types of DNS info leaks info. Authoritative servers stewardship. All of the surveillance concerns raised earlier are also the precursors to censorship. You may not be able to modify responses, if DNSSEC in use, but you can block and deny service.\nAuthoritative servers can consider using authoritative. It still encrypts a bunch of traffic on the network. Still need to get the rest of this figured out. The latter is next-level and we need to learn from opportunistic and get to authenticated encrypted DNS by authoritatives eventually.\nQuestions:\nSara says the threat landscape is well covered in this talk. We had trouble getting DoT deployed. Firefox taking control of the client was the game-changer for all of the client-2-recursive. What first mover would drive authoritatives? A: I\u0026rsquo;m not sure the analogy is super-precise here. We did see DOT adoption on Android before Firefox. People who could be first movers? Someone like Cloudflare probing toward authoritatives? Some authoritatives may decide it\u0026rsquo;s a priority and then they probers will get some benefit. Room for a bunch of folks to be first movers in this space. If there are academics researchers looking at this, create a scorecard of the results from minimized or probed/opportunistically encrypted.\nGeoff Huston: do what extent to SVC queries add the potential “leakage” issue in terms of information leakage by a richer semantics of intention signalling? A: I wish I had a better metric of this. Another example is the ECH keying material. We need analysis of this topic.\nQ/A / buffer time discussion Go straight to breakouts now rather than buffer time questions\n**Thanks a lot to our notetakers, Han Zhang and Austin Hounsel! **\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2018_ndss_dns_privacy_workshop/",
	"title": "2018 NDSS DNS Privacy Workshop",
	"tags": [],
	"description": "",
	"content": " 2018 Topic: Increasing Usability and Decreasing Traceability 2018 Topic: Increasing Usability and Decreasing Traceability Location and Important Dates Agenda Technical Programme Committee Contact Location and Important Dates Workshop Location: San Diego, CA, USA\nWorkshop date: 18th Feb 2018 (co-located with NDSS 2018)\nSubmission deadline: 15th Dec 2017 anywhere-on-earth.\nThe Call for papers for the 2018 workshop has now closed.\nNotifications and invitations to present at the workshop: 13th Jan 2018\nRemote participation Details:.\nJoin from PC, Mac, Linux, iOS or Android: https://isoc.zoom.us/j/209512592\nOr via Telephone: US: +1 646 558 8656 or +1 669 900 6833\nMeeting ID: 209 512 592. International numbers available: https://isoc.zoom.us/zoomconference?m=pP2_aKoQ51N0eBNxQxhcXTHqO-ooVtqj\nOr iPhone one-tap : US: +16465588656,,209512592# or +16699006833,,209512592#\nAdditionally, there is a jabber room available: ndss@conference.amsl.com\nRecordings of the sessions are now available on YouTube\nWe tweeted from @DNSPrivacyProj Twitter Hashtags: #NDSS18 #DNSPrivacy\nAgenda All times are PST.\nSession Duration Session Topic Presentation Authors (speaker in italics) Time 08:30 - 10:00\nTraceability (Video) Welcome from the Chairs 08:30 - 08:40 Cancelled due to illness: Let a Thousand Filters Bloom - DNS-Based Threat Monitoring That Respects User Privacy\nipcipher: Encrypting IP Addresses\nRoland M. van Rijswijk-Deij (SURFnet bv):\nBert Hubert (PowerDNS)\n08:40 - 09:00 Privacy and usability implications of onion domains\nPhillip Winter (Princeton University) 09:00 - 09:30 Enumerating Privacy Leaks in DNS Data Collected above the Recursive\n(Link to submitted paper)\nBasileal Imana (USC), Aleksandra Korolova (USC) and John Heidemann (USC/ISI) 09:30 - 10:00 BREAK 10:30 - 12:30 The Changing Role of the Recursive (Video) Trust relationships between users and private DNS resolvers Daniel Kahn Gillmor (ACLU) 10:30 - 11:00 Panel Session: DNS-over-HTTPS (DOH) - Privacy considerations\nPanel Members: Paul Hoffman (ICANN), Ben Schwartz (Google), Daniel Kahn Gillmor (ACLU)\nModerator: Melinda Shore\n11:00 - 11:40 Quad9 Deployment of DNS-over-TLS John Todd (PCH) 11:40 - 12:00 Panel Session: Deployment and Adoption Blockers Panel Members: John Todd (PCH), Allison Mankin (Salesforce), Wes Hardaker (USC/ISI)\nModerator: Vicky Risk (ISC)\n12:00 - 12:30 LUNCH 13:30 - 15:00 Usability (Video) DNS-over-TLS on Android\nBen Schwartz (Google), Erik Kline (Google) 13:30 - 13:50 Stubby - A DNS Privacy client: Current status and GUI\nSara Dickinson (Sinodun) 13:50 - 14:00 Panel Session: DNS Privacy Usability Panel Members: Mary Ellen Zurko (MIT Lincoln Laboratory), Emily Stark (Google) , Ben Schwartz (Google), Daniel Kahn Gillmor (ACLU)\nModerator: Allison Mankin\n14:00 - 14:30 BREAK 15:30 - 17:30 The Recursive and Beyond! (Video) Leakage via Certificate Transparency\nMelinda Shore (Fastly) 15:30 - 15:50 Analyzing and Mitigating Privacy with the DNS Root Service\n(Link to submitted paper)\nWes Hardaker (USC/ISI) 15:50 - 16:20 DNS Client Privacy through CDNs Christian Huitema (Private Octopus Inc.) 16:20 - 16:50 Wrap-up Session Rapporteur: Han Zhang (Salesforce) 16:50 - 17:30 Chatroom/jabber scribe: Han Zhang (Salesforce)\nTechnical Programme Committee Sara Dickinson, Sinodun IT (TPC Co-chair) Allison Mankin, Salesforce (TPC Co-chair) Melinda Shore, Fastly (TPC Co-chair) Roland M. van Rijswijk-Deij, SURFnet bv Joseph Lorenzo Hall, Center for Democracy \u0026amp; Technology Christian Huitema, Private Octopus Inc Stéphane Bortzmeyer, AFNIC Min Suk Kang, National University of Singapore Aaron Johnson, US Naval Research Lab Phillipp Winter (Independant) Contact If you have any questions about topics or otherwise, send email to Sara Dickinson \u0026lt;sara@sinodun.com\u0026gt; and Allison Mankin \u0026lt;allison.mankin@gmail.com\u0026gt;\n"
},
{
	"uri": "http://dnsprivacy.org/project_notes/tcp_fast_open/",
	"title": "TCP Fast Open",
	"tags": [],
	"description": "",
	"content": " References Patches Quick guide Message flow Implementation details Client side code changes Linux API OS X API Server side code changes Kernel Parameters Linux OS X FreeBSD On-the-wire Clients Servers References TCP Fast Open (TFO) mechanism is described in https://tools.ietf.org/html/rfc7413\nOther considerations can be found in this white paper.\nPatches TFO is currently available available on Linux (full implementation in 4.1), OS X 10.12 and server side will be available for FreeBSd 10/11. There are differences between the implementations described below.\nPatches for ldns, NSD and Unbound can be found in our Stash repo, which currently support TFO as implemented on Linux.\nhttps://portal.sinodun.com/stash/projects/TDNS/repos/tcp_fast_open_patches/browse\nNote that getdns 1.0 supports TFO on Linux and OS X.\nTo use these patches:\nDownload the source code from the relevant repository\nApply the relevant patch\nIMPORTANT! Run autoreconf Add \u0026ndash;enable-tcp-fastopen to the configure options\nmake \u0026amp; make install as normal\nQuick guide TCP fastopen [I-D.ietf-tcpm-fastopen] (TFO) allows data to be carried in the SYN packet (and optionally in the SYN-ACK). It therefore saves up to one RTT compared to standard TCP. TFO clients request a server cookie in the initial SYN packet at the\nstart of a new connection. The server returns a cookie in its SYN-ACK. The client caches the cookie and reuses it when opening subsequent connections to the same server. The cookie is stored by the client\u0026rsquo;s TCP stack (kernel) and persists if either the client or server processes are restarted. TFO also falls back to a regular TCP handshake gracefully. Message flow Requesting Fast Open Cookie in connection 1: TCP A (Client) TCP B(Server) ______________ _____________ CLOSED LISTEN #1 SYN-SENT ----- \u0026lt;SYN,CookieOpt=NIL\u0026gt; ----------\u0026gt; SYN-RCVD #2 ESTABLISHED \u0026lt;---- \u0026lt;SYN,ACK,CookieOpt=C\u0026gt; ---------- SYN-RCVD (caches cookie C) Performing TCP Fast Open in connection 2: TCP A (Client) TCP B(Server) ______________ _____________ CLOSED LISTEN #1 SYN-SENT ----- \u0026lt;SYN=x,CookieOpt=C,DATA_A\u0026gt; ----\u0026gt; SYN-RCVD #2 ESTABLISHED \u0026lt;---- \u0026lt;SYN=y,ACK=x+len(DATA_A)+1\u0026gt; ---- SYN-RCVD #3 ESTABLISHED \u0026lt;---- \u0026lt;ACK=x+len(DATA_A)+1,DATA_B\u0026gt;---- SYN-RCVD #4 ESTABLISHED ----- \u0026lt;ACK=y+1\u0026gt;--------------------\u0026gt; ESTABLISHED #5 ESTABLISHED --- \u0026lt;ACK=y+len(DATA_B)+1\u0026gt;----------\u0026gt; ESTABLISHED Implementation details Adding support for this to existing name server implementations is relatively easy, but does require source code modifications. It is also controlled via various kernel parameters documented below.\nClient side code changes Linux API On the client, the call to connect() is replaced with a call to sendmsg() or sendto() with the flags parameter set to MSG_FASTOPEN. For blocking sockets this performs both the handshake and sends the data before returning. For non-blocking socket it returns the number of bytes buffered and sent in the SYN packet. If the cookie is available it will send the data before returning.\nIf the cookie is not available locally, it returns -1 with errno EINPROGRESS, and sends a SYN with TFO cookie request automatically. The caller needs to write the data again when the socket is connected with a call to send() or similar.\nSubsequent writes on this socket must also be done with send() or similar. A subsequent call with sendto() will return the error EISCONN.\nOS X API The normal connect() call is replaced by connectx(), which requires 2 OS X specific flags: connectx(fd, \u0026amp;endpoints, SAE_ASSOCID_ANY, CONNECT_DATA_IDEMPOTENT | CONNECT_RESUME_ON_READ_WRITE, NULL, 0, NULL, NULL) The the usual socket functions (e.g. write()) can be used to send data. Initiating the TCP handshake is delayed until the first data is actually send. The Linux implementation follows the pattern suggested in the appendix of the RFC for maximum backwards compatibility, however the OS X API offers some advantages because TFO can be used in conjunction with libraries that require a \u0026lsquo;connected\u0026rsquo; file descriptor to be available (e.g. OpenSSL). The hope is the Linux API will be extended to offer both modes (no FreeBSD client implemented yet).\nServer side code changes The server must simply set the TCP_FASTOPEN flag using setsockopt() on the listening socket. On linux/FreeBSD the qlen value passed in to the function limits the number of outstanding TFO requests as a simple defense against IP spoofing attacks (see RFC7413). Note on OS X the socket MUST be listening already for this flag to be set, and the qlen MUST be 1 (the actual value is set via the net.inet.tcp.fastopen_backlog kernel parameter. On linux this call can be done after bind() is called. Kernel Parameters Linux The kernel parameter net.ipv4.tcp_fastopen controls TFO and since 4.1 has been set to 1 by default. This enables client mode but not server mode. To act in pure server mode set the integer value to 2. To enable both client and server mode, set it to 3, for example:\nsysctl -w net.ipv4.tcp_fastopen=2 OS X The analogous kernel parameter is net.inet.tcp.fastopen but is set to 3 by default. The fastopen backlog and fallback minimum can also be set via kernel parameter.\nThe parameter net.inet.tcp.clear_tfocache can be used to reset the TFO back-off when problems are encountered (this can be helpful when testing).\nFreeBSD 6 kernel parameters are available, TFO is controlled by net.inet.tcp.fastopen.enabled which is 0 by default and must be 1 to enable TFO. On-the-wire The implementations have slightly different behaviour on the wire. Observations from testing include:\nClients The current Linux client implementation (4.4 at the time of writing) does not currently support receiving data in the SYN-ACK (although it should to be compliant with the spec). But a patch for this has been submitted. This can cause interop problems because the server must re-transmit the data. OS X does support this (no FreeBSD client implemented yet). The back-off algorithms also appear different. For example, the OS X implementation will fallback to normal TCP for a long period of time if it detects problems during cookie or TFO data exchange. Prior to 4.1 Linux used the experimental option code (254) and format for TFO, in 4.1 the default is to use the official option code (34) and format but fallback to the experimental code is still supported. Servers Neither the Linux nor OS X servers send data in the SYN-ACK. The Linux server will send data after the SYN-ACK, without waiting for the ACK. My testing shows the OS X server always waits until after the handshake is complete, but the Apple folks tell me it should behave as Linux\u0026hellip;. The FreeBSD server implementation does send data in the SYN-ACK if it is available quickly enough. "
},
{
	"uri": "http://dnsprivacy.org/performance_measurements/follow-up_performance_measurements_q4_2108/",
	"title": "Follow-Up Performance Measurements (Q4 2108)",
	"tags": [],
	"description": "",
	"content": "Thanks to funding from the Open Technology Fund we have continued work on some performance measurements for various DNS Privacy implementations. We report our new results below.\nPrevious work Goals of this work Results - TCP vs UDP Unbound measurements Knot Resolver and BIND dnsdist Results - TLS proxy vs native TLS HA-Proxy fronting Unbound Limitations of these measurements Real DNS traffic data HTTP-like client population modelling? Previous work Our initial work on performance measurements can be found here: Initial Performance Measurements (Q1 2018). This work was presented at RIPE 76: Slides, Video. Key results from this work were:\nSetup: Used modified dnsperf with UDP/TCP/TLS on 2 bare metal machines Comparisons of 4 nameservers for small number of clients (10s) Typically saw TCP was 40-50% of UDP throughput (except dnsdist, which uses a different threading model and performed better) TLS was 30-40% of UDP throughput Varying the number of queries per connection (including low numbers) shows amortisation of setup occurs between 100 or ~2000 q/conn depending on the nameserver We also note some complimentary related work: High-Performance DNS over TCP by Baptiste Jonglez, University Grenoble Alpes who also presented at RIPE 76: Slides, Video. Key results from this work were:\nSetup: Measured just Unbound nameserver but used thousands of cloud VM clients. Measured just UDP/TCP (not TLS) and used a simple tcpscaler tool where TCP connections were never closed Determined that for Unbound TCP throughput for 25,000 clients was 25% of the UDP throughput and this decreased as the number of clients increased (see graph below) Eventually scaled to 6.5 million clients as a POC Goals of this work We had always intended to extend our work to tens of thousands of clients and were particularly intrigued by Baptiste\u0026rsquo;s results which showed a poorer TCP through put than we expected and an unexpected drop in throughput between 10 and 10,000 clients. However when we looked at the details of his work it became clear that the above graph was for the case where Unbound was restricted to a single thread (our work above had used 4 threads).\nSo we wanted to explore the performance across the *nameservers for 24,000 clients where the nameserver could effectively use all the resources of our test machine. *\nThis work used the same lab set up as the previous work, except that we used up to 24 separate dnsperf instances running in parallel, each spawning 1000 TCP connections to reach a total of 24,000 clients. In each test 5000 queries per connection were used to ensure the connections cycled during the test but that the handshake setup had been fully amortised. The following work has also been presented at RIPE 77: Slides, Video\nResults - TCP vs UDP In the following graphs blue lines are UDP, reds lines are TCP\nUnbound measurements Our findings are shown below for measuring Unbound using 1 thread and then 32 threads (on a 16 core machine with hyper threading enabled).\nFor a single thread we see a similar profile the above graph from High-Performance DNS over TCP by Baptiste Jonglez, however:\nwith a slightly lower throughput and less dramatic decline as the number of clients increases and we observe that TCP is 32% of UDP throughput for 24,000 clients. For 32 threads we see a quite different profile: a significantly higher throughput and TCP is 67% of UDP throughput for 24,000 clients. We also note is is almost the same for 5000 clients and suspect the decrease above that might be related to IRQ handling. Conclusion: When Unbound has sufficient resources the performance throughput of TCP is 2/3 of that of UDP even at large numbers of clients.\nKnot Resolver and BIND We repeated the test runs for both Knot Resolver and BIND for many clients - the results are below.\nKnot Resolver\nTCP is 50% of UDP at 24,000 clients Similar profile and throughput to Unbound BIND\nTCP is 25% of UDP at 24,000 clients Lower UDP throughput than the other name servers and a strange flat profile for TCP dnsdist We were unable to scale the number of simultaneous clients that dnsdist would accept over TCP past 1000. The reason for this, we have confirmed with PowerDNS, is due to the fundamental architecture of dnsdist when dealing with TCP connections - the number of simultaneous connections that can be processed is entirely dependent on the size of the thread pool. Increasing this takes system resources, and is not practicable beyond a point dependent on the server hardware.\nConclusion:\nWe have had to conclude that dnsdist is currently optimised for only a moderate number of client connections. We believe recent work in dnsdist is changing this model for the DoH implementation. Results - TLS proxy vs native TLS HA-Proxy fronting Unbound Finally, we also investigated the performance of native nameserver TLS support vs a TLS-TCP proxy/TCP nameserver setup (no \u0026rsquo;traditional\u0026rsquo; TLS proxy that we know of can receive DNS-over-TLS and forward over UDP).\nTo do this we configured Unbound to use 32 threads, and configured HAProxy to use 32 single-threaded processes (the recommended configuration for HAProxy in the TLS-TCP proxy use case). Note that with fewer threads available to HA proxy it appeared that that the encryption/decryption process was the main performance bottleneck. Performance of the proxy/nameserver combination is slightly below that of the native nameserver - unsurprising given that the proxy introduces an extra connection into the end to end processing chain However the overhead of using a proxy is at worst in the region of 20% of peak throughput. Adding DNS-over-TLS service to an existing nameserver when native nameserver TLS support is not available is, potentially, a realistic performance option for operators. Conclusion: These results show that use of a TLS-TCP proxy versus native nameserver TLS support performs as might be expected.\nLimitations of these measurements These measurements use a modified version of dnsperf, a widely used DNS UDP benchmarking tool. UDP benchmarking is rather simplistic and is only concerned with throughput and latency and has the luxury of treating the client population as heterogeneous. Session based benchmarking can’t do this:\nConsider individual client experience (throughput \u0026amp; latency) Clients behave differently: must simulate client population with varying profiles (qps, idle timeouts) For example, taking our measurements of Unbound (32 threads) and converting the data to represent the average queries per second per client gives the following graph:\nWith 24,000 clients, each client is making ~20 queries per second. Real DNS traffic data Very little real world data for DNS client populations is available that can describe the behaviour of individual clients. Some recently shared data (courtesy of Bert Hubert at PowerDNS) show how much variation there can be even in a small traffic sample. The following data was collected in in a 7 minute window observing traffic on a recursive resolver. We estimate the number of individual client (addresses) is in the region of 250k.\nIt can be easily observed that only a handful of clients are reaching a query rate of 20 q per second, and these are likely to be either forwarding resolvers or many devices behind e.g. a NAT The distribution is smooth apart from 2 peaks, which correspond to 1 query of ~35s and 1 query ever ~5s. We see a significant number of clients performing only a single query during the measurement window. It must be noted that this data is from a UDP client population and UDP clients use a different name serve selection algorithm to that specified for session based DNS (RFC7766). So there may be many reasons for the overall distribution including:\nClient resolver choice algorithm Service provider load balancing Client software performing periodic network probing Bursty traffic and device idle behaviour Routers with many devices Forwarding resolvers We believe we need to gather real world (anonymised) data from operators of DNS Privacy servers to correctly understand the client profiles of session based DNS to aid with further benchmarking.\nHTTP-like client population modelling? We suggest that further useful work on DNS benchmarking for session based protocols (DoT, DoH or DoQ) would require a new approach. In addition to gathering real world data we believe a new benchmarking tool is required.\nWe have investigated a number of tools designed for HTTP benchmarking that are capable of generating traffic with different percentages of client behaviour - our report is here. However we did not find any that could be easily modified to become useful DNS benchmarking tools. We suggest a new, hybrid tool will be required with a high DNS query throughput but with HTTP tester-like scripting capabilities to model a diverse client populate. We have sketched out some initial requirements for such a tool and are happy to hear feedback on this proposal. "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/data_minimisation_of_dns_traffic/",
	"title": "Data minimisation of DNS traffic",
	"tags": [],
	"description": "",
	"content": " Terminology History Notable pseudonymising techniques Google Analytics non-prefix filtering dnswasher Prefix-preserving map Cryptographic Prefix-Preserving Pseudonymisation Top-hash Subtree-replicated Anonymisation ipcipher Bloom filters Other data minimisation considerations References The DNS Privacy solutions presented here ensure that DNS queries made by an individual end user can\u0026rsquo;t be observed by eavesdroppers as they pass across the Internet. Only the operators of DNS privacy servers have access to the details of the queries. For operational reasons such as monitoring server performance or detecting and mitigating attacks operators need to keep logs of the DNS queries they see; in some circumstances they may need to share those logs with other operators. To preserve end user privacy, as RFC697317 observes it is important that the data in these logs limits the identifiability of end users; more generally, that the data in the logs is kept to the minimum required for purpose, a process the RFC terms data minimisation.\nData minimising a trace or logs of network traffic therefore includes ensuring the recorded data does not contain privacy-sensitive information. This is typically personal data, or data that can be used to link a record to an individual, but may also include revealing other confidential information, for example on the structure of an internal corporate network. In the case of identifiability, this means that if individual user identifiers cannot be omitted altogether, pseudonyms should be used instead.\nThe problem of effectively ensuring that DNS query logs do not contain privacy-sensitive information is not one that currently has a generally agreed solution. This page gives an overview of current approaches to identifier pseudonymisation. As RFC762616 makes clear, the big privacy risk in DNS is connecting DNS queries to an individual, so at present the main focus is on pseudonymising client IP addresses (though, of course, the MAC address, VLAN identifier and ARP data may be useful in particularly localised environments).\nTerminology Pseudonymising a dataset is generally done using either anonymisation or pseudonomysation. This discussion uses the definitions from RFC697317 Section 3, with additional observations from van Dijkhuizen et al.1\nAnonymisation. To enable anonymity of an individual, there must exist a set of individuals that appear to have the same attribute(s) as the individual. To the attacker or the observer, these individuals must appear indistinguishable from each other.\nPseudonymisation. The true identity is deterministically replaced with an alternate identity (a pseudonym). When the pseudonymisation schema is known, the process can be reversed, so the original identity becomes known again.\nIn practice there is a fine line between the two; for example, how to categorise a deterministic algorithm for pseudonymisation of IP addresses that produces a group of pseudonyms for a single given address?\nHistory Awareness of the need for pseudonymising data, so that significant corpuses of captures could be shared for research purposes, sparked research into particularly IP address pseudonymisation in the late 1990s/early 2000s. Several techniques reflecting different requirements for the pseudonymised addresses and different performance/resource tradeoffs emerged over the course of the decade. Developments over the last decade have been both a blessing and a curse; the large increase in size between an IPv4 and an IPv6 address, for example, renders some techniques (in particular TSA) impractical, but also makes available a much larger amount of input entropy. Pseudonymised IPv6 addresses are therefore much better placed to resist brute force re-identification attacks than IPv4 addresses. Several authors (e.g. Brenker \u0026amp; Arnes11) have observed that today any IPv4 address pseudonymisation is vulnerable to a brute force attack, particularly if an attacker is capable of ensuring packets are captured by the target and the attacker can send forged traffic with arbitrary source and destination addresses to the target thus permitting an attack along the lines of a cryptographic chosen plaintext attack.\nCategorising techniques for anonymising logs\nThe ways in which data may be pseudonymised can be classified into some broad categories.\nReplacement. A one-to-one replacement of a field to a new value of the same type, for example using a regular expression. Filtering. Removing (and thus truncating) or replacing data in a field. Field data can be overwritten, often with zeros, either partially (grey marking) or completely (black marking). Generalisation. Data is replaced by more general data with reduced specificity. One example would be to replace all TCP/UDP port numbers with one of two fixed values indicating whether the original port was ephemeral (\u0026gt;=1024) or non-ephemeral (\u0026gt;1024). Another example, precision degredation, reduces the accuracy of e.g. a numeric value or a timestamp. Enumeration. With data from a well-ordered set, replace the first data item data using a random initial value and then allocate ordered values for subsequent data items. When used with timestamp data, this preserves ordering but loses precision and distance. Reordering/shuffling. Preserving the original data, but rearranging its order, often in a random manner. Random substitution. As replacement, but using randomly generated replacement values. Cryptographic permutation. Using a permutation function, such as a hash function or cryptographic block cipher, to generate a replacement de-identified value. This list is derived from RFC6235 and van Dijkhuizen et al.1\nA pseudonymising technique may also have properties desirable in a particular application:\nFormat-preserving encryption. Normally when encrypting, the original data length and patterns in the data should be hidden from an attacker. Some applications of data minimisation, such as network capture pseudonymisation, require that the pseudonymised data is of the same form as the original data, to allow the data to be parsed in the same way as the original. Prefix preservation. Values such as IP addresses and MAC addresses contain prefix information that can be valuable in analysis, e.g. manufacturer ID in MAC addresses, subnet in IP addresses. Prefix preservation ensures that prefixes are pseudonymised consistently; e.g. if two IP addresses are from the same subnet, prefix preserving pseudonymising will ensure that their pseudonymised counterparts will also share a subnet. Prefix preservation may be fixed (the length of the prefix to be preserved must be set by the user in advance), or general (if two addresses share any length of prefix bits in common, their pseudonymised counterparts will also have the same length of prefix bits in common). Notable pseudonymising techniques Google Analytics non-prefix filtering Since May 2010, Google Analytics has provided a facility that allows website owners to request that all their users IP addresses are pseudonymised within Google Analytics processing. This very basic pseudonymisation simply sets to zero the least significant 8 bits of IPv4 addresses, and the least significant 80 bits of IPv6 addresses. The level of pseudonymisation this produces is perhaps questionable. There are some analysis results13 which suggest that the impact of this on reducing the accuracy of determining the user\u0026rsquo;s location from their IP address is less than might be hoped; the average discrepancy in identification of the user city for UK users is no more than 17%. Anonymisation: Format-preserving, Filtering (grey marking).\ndnswasher Since 2006, PowerDNS have included a data minimisation tool dnswasher14 with their PowerDNS product. This is a PCAP filter that performs a one-to-one mapping of end user IP addresses with an pseudonymised address. A table of user IP addresses and their de-identified counterparts is kept; the first IPv4 user addresses is translated to 0.0.0.1, the second to 0.0.0.2 and so on. The de-identified address therefore depends on the order that addresses arrive in the input, and running over a large amount of data the address translation tables can grow to a significant size. Anonymisation: Format-preserving, Enumeration.\nPrefix-preserving map Used in TCPdpriv2, this algorithm stores a set of original and pseudonymised IP address pairs. When a new IP address arrives, it is compared with previous addresses to determine the longest prefix match. The new address is pseudonymised by using the same prefix, with the remainder of the address pseudonymised with a random value. The use of a random value means that TCPdrpiv is not deterministic; different pseudonymised values will be generated on each run. The need to store previous addresses means that TCPdpriv has significant and unbounded memory requirements, and because of the need to allocated pseudonymised addresses sequentially cannot be used in parallel processing. Anonymisation: Format-preserving, prefix preservation (general), replacement, random substitution.\nCryptographic Prefix-Preserving Pseudonymisation Cryptographic prefix-preserving pseudonymisation was originally proposed as an improvement to the prefix-preserving map implemented in TCPdpriv, described in Xu et al3 and implemented in the Crypto-PAn tool4. Crypto-PAn is now frequently used as an acronym for the algorithm. Initially it was described for IPv4 addresses only; extension for IPv6 addresses was proposed in Harvan \u0026amp; Schönwälder5 and implemented in snmpdump6. This uses a cryptographic algorithm rather than a random value, and thus pseudonymity is determined uniquely by the encryption key, and is deterministic. It requires a separate AES encryption for each output bit, so has a non-trivial calculation overhead. This can be mitigated to some extent (for IPv4, at least) by pre-calculating results for some number of prefix bits. Pseudonymisation: Format-preserving, prefix preservation (general), cryptographic permutation.\nTop-hash Subtree-replicated Anonymisation Proposed in Ramaswamy \u0026amp; Wolf7, Top-hash Subtree-replicated Anonymisation (TSA) originated in response to the requirement for faster processing than Crypto-PAn. It used hashing for the most significant byte of an IPv4 address, and a pre-calculated binary tree structure for the remainder of the address. To save memory space, replication is used within the tree structure, reducing the size of the pre-calculated structures to a few Mb for IPv4 addresses. Address pseudonymisation is done via hash and table lookup, and so requires minimal computation. However, due to the much increased address space for IPv6, TSA is not memory efficient for IPv6. Pseudonymisation: Format-preserving, prefix preservation (general), cryptographic permutation.\nipcipher A recently-released proposal from PowerDNS8, ipcipher is a simple pseudonymisation technique for IPv4 and IPv6 addresses. IPv6 addresses are encrypted directly with AES-128 using a key (which may be derived from a passphrase). IPv4 addresses are similarly encrypted, but using a recently proposed (and confusingly closely named) encryption ipcypher9 suitable for 32bit block lengths. However, the author of ipcrypt has since indicated10 that it has low security, and further analysis has revealed it is vulnerable to attack. At the time of writing, progress on ipcipher appears to have stalled. Pseudonymisation: Format-preserving, cryptographic permutation.\nBloom filters van Rijswijk-Deij et al15 have recently described work using Bloom filters to categorise query traffic and record the traffic as the state of multiple filters. By this means, it is possible to determine with a high probability if, for example, a particular query was made, but the set of queries made cannot be recovered from the filter. Similarly, by mixing queries from a sufficient number of users in a single filter, it becomes practically impossible to determine if a particular user performed a particular query. Large numbers of queries can be tracked in a memory-efficient way. As filter status is stored, this approach cannot be used to regenerate traffic, and so cannot be used with tools used to process live traffic. Anonymisation: Generalisation.\nOther data minimisation considerations (A placeholder list).\nTTL/Hoplimit (if present) can be used to fingerprint client OS.\nMAC address/VLAN.\nDNS ID lack of randomisation ditto.\nAll queries down a single TCP stream must come from the same host.\nReferences Niels van Dijkhuizen and Jeroen van der Ham. 2018. A Survey of Network Traffic Anonymisation Techniques and Implementations. ACM Comput. Surv. 51, 3, Article 52 (May 2018), 27 pages. DOI: https://doi.org/10.1145/3182660 G. Minshall, Ipsilon Networks, Inc., TCPDRIV, Oct 2005. http://ita.ee.lbl.gov/html/contrib/tcpdpriv.html J. Xu, J. Fan, M. Ammar, and S. B. Moon, Prefix-Preserving IP Address Anonymization: Measurement-Based Security Evaluation and a New Cryptography-Based Scheme, Proceedings of the IEEE International Conference on Network Protocols, 2002. DOI: https://doi.org/10.1016/j.comnet.2004.03.033. http://an.kaist.ac.kr/~sbmoon/paper/intl-journal/2004-cn-anon.pdf CryptoPan page at Georgia Tech. https://www.cc.gatech.edu/computing/Telecomm/projects/cryptopan/ M. Harvan and J. Schönwälder. Prefix- and lexicographical-order-preserving IP address anonymization. In Proceedings of the 10th IEEE/IFIP Network Operations and Management Symposium 2006 (NOMS’06). 519–526. DOI: http://dx.doi.org/10.1109/NOMS.2006.1687580. http://mharvan.net/talks/noms-ip_anon.pdf J. Schönwälder, snmpdump, 2004, https://github.com/schoenw/snmpdump R. Ramaswamy and T. Wolf, \u0026ldquo;High-Speed Prefix-Preserving IP Address Anonymization for Passive Measurement Systems,\u0026rdquo; in IEEE/ACM Transactions on Networking, vol. 15, no. 1, pp. 26-39, Feb. 2007. DOI: https://doi.org/10.1109/TNET.2006.890128. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.7417\u0026amp;rep=rep1\u0026amp;type=pdf A. Hubert, PowerDNS, Feb 2018. https://github.com/PowerDNS/ipcipher. See also On IP address encryption: security analysis with respect for privacy, Medium.com, May 2018 by the same author. J.-P. Aumasson, Mar. 2015, https://github.com/veorq/ipcrypt J.-P. Aumasson, Re: [Cfrg] Analysis of ipcrypt?, Feb. 2018. https://www.ietf.org/mail-archive/web/cfrg/current/msg09494.html. See also J. Donenfeld, Feb. 2018. https://www.ietf.org/mail-archive/web/cfrg/current/msg09495.html T. Brekne and A. Årnes. “Circumventing IP-address pseudonymization.” Communications and Computer Networks (2005). https://pdfs.semanticscholar.org/7b34/12c951cebe71cd2cddac5fda164fb2138a44.pdf IP Anonymization in Analytics, https://support.google.com/analytics/answer/2763052?hl=en Huiyan, Anonymize IP Geolocation Accuracy Impact Assessment (blog posting), May 2017.https://www.conversionworks.co.uk/blog/2017/05/19/anonymize-ip-geo-impact-test/ dnswasher - A PowerDNS nameserver debugging tool, 2006 R. van Rijswijk-Deij, M. Bomhoff and R. Dolmans, Let a Thousand Filters Bloom: DNS-Based Threat Monitoring That Respects User Privacy, TNC18, June 2018, https://tnc18.geant.org/core/presentation/127 S. Bortzmeyer, DNS Privacy Considerations, RFC7626, https://datatracker.ietf.org/doc/rfc7626/ A. Cooper, H. Tschofenig, B. Aboba, J. Peterson, J. Morris, M. Hansen and R. Smith, Privacy Considerations for Internet Protocols, RFC6973, https://datatracker.ietf.org/doc/rfc6973/ "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/automated_certificate_management_2/",
	"title": "Certificate management method 2",
	"tags": [],
	"description": "",
	"content": "This page is assumes using OpenDNSSEC to sign zones. Thanks to Willem Toorop and Ralph Dolmans at NLnet Labs for developing this automated solution!\nAn example configuration file is:\nCA=\u0026#34;https://acme-v01.api.letsencrypt.org/directory\u0026#34; #CA=\u0026#34;https://acme-staging.api.letsencrypt.org/directory\u0026#34; LICENSE=\u0026#34;https://letsencrypt.org/documents/LE-SA-v1.1.1-August-1-2016.pdf\u0026#34; CERTDIR=/usr/local/etc/dehydrated/certs CHALLENGETYPE=\u0026#34;dns-01\u0026#34; HOOK=/usr/local/etc/dehydrated/dnshook.sh PRIVATE_KEY_RENEW=\u0026#34;no\u0026#34; PRIVATE_KEY_ROLLOVER=\u0026#34;no\u0026#34; CONTACT_EMAIL=alice@example.com Private keys are then stored in\n/usr/local/etc/dehydrated/certs/\u0026lt;domain\u0026gt;/privkey.pem The SubjectAltNames are then enumerated in the file\n/usr/local/etc/dehydrated/domains.txt Add one line in this for each \u0026lsquo;group\u0026rsquo; of names that should share a certificate e.g\nexample.com www.example.com example.org example1.com www.example1.com example1.net Then the challenge record needs to be provisioned in the corresponding zone in a record of the form\n_acme-challenge.\u0026lt;domain name\u0026gt; If you have many zones it can be helpful to use CNAMES to redirect to a single zone that can hold the acme_challenge records e.g. \u0026lt;domain\u0026gt;.acme.example.com\nThe domain acme.example.com is then hosted only on the server that also runs dehydrated. A script can then be used to deploy and clean the challenge in this domain. An example script is included below\n#!/bin/sh zonefile=/usr/local/etc/dehydrated/acmezone deploy_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RDATA=\u0026#34;${3}\u0026#34; echo \u0026#34;$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; \u0026gt;\u0026gt; $zonefile echo \u0026#34;$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;\u0026#34; ldns-read-zone $zonefile \u0026gt; /dev/null if [ $? -eq 0 ]; then cp $zonefile ~/unsigned/acme.example.com ods-signer sign acme.example.com sleep .5 fi } clean_challenge() { local DOMAIN=\u0026#34;${1}\u0026#34; RDATA=\u0026#34;${3}\u0026#34; sed -i \u0026#34;.old\u0026#34; \u0026#34;/$DOMAIN 10 TXT \\\u0026#34;$RDATA\\\u0026#34;/d\u0026#34; $zonefile ldns-read-zone $zonefile \u0026gt; /dev/null if [ $? -eq 0 ]; then cp $zonefile ~/unsigned/acme.example.com ods-signer sign acme.example.com fi } deploy_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; TIMESTAMP=\u0026#34;${6}\u0026#34; # nothing yet.. } unchanged_cert() { local DOMAIN=\u0026#34;${1}\u0026#34; KEYFILE=\u0026#34;${2}\u0026#34; CERTFILE=\u0026#34;${3}\u0026#34; FULLCHAINFILE=\u0026#34;${4}\u0026#34; CHAINFILE=\u0026#34;${5}\u0026#34; # nothing yet.. } HANDLER=\u0026#34;$1\u0026#34;; shift \u0026#34;$HANDLER\u0026#34; \u0026#34;$@\u0026#34; "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_knot_resolver/",
	"title": "Using Knot Resolver",
	"tags": [],
	"description": "",
	"content": "Config file An example configuration file for Knot that runs DNS-over-TLS on port 853 is below.\n-- Default empty Knot DNS Resolver configuration in -*- lua -*- -- Bind ports as privileged user (root) -- -- net = { \u0026#39;127.0.0.1\u0026#39;, \u0026#39;::1\u0026#39;, net.ens160 } net.tls(\u0026#39;/etc/sinodun/certs/fullchain.pem\u0026#39;,\u0026#39;/etc/sinodun/certs/privkey.pem\u0026#39;) net.listen(\u0026#39;::\u0026#39;, 853) net.listen(\u0026#39;145.100.185.17\u0026#39;, 853) -- Switch to unprivileged user -- user(\u0026#39;knot-resolver\u0026#39;,\u0026#39;knot-resolver\u0026#39;) -- Unprivileged -- cache.size = 100*MB -- verbose(true) If you are using systemd with socket-based activation you need to remove the net.listen lines above and instead run systemctl edit kresd-tls.socket. and put [Socket]. ListenStream=145.100.185.17:853 ListenStream=[2001:610:1:40ba:145:100:185:17]:853 in the override file.\nIf you are using the packages from home:CZ-NIC:knot-resolver-latest you need to enable the service using\nsystemctl enable \u0026ndash;now kresd@1.service\nSee man kresd.systemd for more info.\nDepending on how your certificate is issued you may to add the intermediate certificate to your certificate file for clients to be able to validate. For example, if you use Let\u0026rsquo;s encrypt to create your certificate you will need to add the intermediate certificate (found in the /etc/letsencrypt/certs/000``\u0026lt;N\u0026gt;_chain.pem file) to the cert file.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/running_as_a_service_on_nix/",
	"title": "Running as a service on *nix",
	"tags": [],
	"description": "",
	"content": " systemd upstart rc systemd There is basic support for using stubby with systemd. See the systemd directory. Also see the discussion on this issue.\nupstart We have a contributed upstart script here.\nrc There is an issue open requesting an rc.d script.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/configuring_stubby/",
	"title": "Configuring Stubby",
	"tags": [],
	"description": "",
	"content": " Create Custom Configuration File DNSSEC Storage of Zero-config Trust anchor Opportunistic DoT to your local resolver Runtime logging It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses.\nNote also that this file only enables a small subset of the available servers by default. Users can choose to use additional servers by uncommenting the relevant sections in the file. See DNS Privacy Test Servers for details of the available servers.\nAs announced over the last 6 months, the dnsovertls*.sinodun.com nameservers were decommissioned on 9th Septemter 2022. See this announcement.\nCreate Custom Configuration File Alternatively the configuration file location can be specified on the command line using the -C flag. Changes to the configuration file require a restart of Stubby.\nFrom release 0.1.3 of stubby (using the 1.2 release of getdns) the configuration file format is a YAML like format, which contains detailed comments of the options. See here for an example or keep reading for a short description. To be backwards compatible a file using the YAML format must have a .yml or .yaml extension. The previously used JSON like format used internally in getdns is still supported but only when the configuration file is specified via the command line using the -C flag. This format is the same as the output returned by stubby -i. For example, this output can be used as a configuration file directly, but a less verbose form is also accepted.\nEssentially the options available are the same as the options that can be set on a getdns context. Doxygen documentation for the context options is available here. A detailed description of the context settings is in the API A detailed description of all the extensions than can also be used is also in the API. To aid with creating a custom configuration file, an example is given below. The config file below will configure Stubby in the following ways:\nresolution_type: Work in stub mode only (not recursive mode) - required for Stubby operation. dns_transport_list: Use TLS only as a transport (no fallback to UDP or TCP). tls_authentication: Use Strict Privacy i.e. require a TLS connection and authentication of the upstream If Opportunistic mode is desired, remove the tls_authentication: GETDNS_AUTHENTICATION_REQUIRED field and add additional transports to the dns_transport_list (e.g. UDP, TCP) . In Opportunistic mode authentication of the nameserver is not required and fallback to clear text transports is permitted if they are in the dns_transport_list. tls_query_padding_blocksize: Use the EDNS0 padding option to pad DNS queries to hide their size edns_client_subnet_private: Use EDNS0 Client Subnet privacy so the client subnet is not sent to authoritative servers listen_address: have the Stubbby daemon listen on IPv4 and IPv6 on port 53 on the loopback address idle_timeout: Use an EDNS0 Keepalive idle timeout of 10s unless overridden by the server. This keeps idle TLS connections open to avoid the overhead of opening a new connection for every query. round_robin_upstreams: Round robin queries across all the configured upstream servers. Without this option Stubby will use each upstream server sequentially until it becomes unavailable and then move on to use the next. upstream_recursive_servers: Use the NLnet labs test DNS Privacy Server for outgoing queries. In Strict Privacy mode, at least one of the following is required for each nameserver: tls_auth_name: This is the authentication domain name that will be verified against the presented certificate. tls_pubkey_pinset: The sha256 SPKI pinset for the server. This is also verified against the presented certificate. resolution_type: GETDNS_RESOLUTION_STUB dns_transport_list: - GETDNS_TRANSPORT_TLS tls_authentication: GETDNS_AUTHENTICATION_REQUIRED tls_query_padding_blocksize: 256 edns_client_subnet_private : 1 idle_timeout: 10000 listen_addresses: - 127.0.0.1 - 0::1 round_robin_upstreams: 1 upstream_recursive_servers: - address_data: 185.49.141.38 tls_auth_name: \u0026#34;getdnsapi.net\u0026#34; tls_pubkey_pinset: digest: \u0026#34;sha256\u0026#34; value: foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q= Additional privacy servers can be specified by adding more entries to the upstream_recursive_servers list above (note a separate entry must be made for the IPv4 and IPv6 addresses of a given server. More DNS Privacy test servers are listed here.\nA custom port can be specified by adding the tls_port: attribute to the upstream_recursive_server in the config file.\nA custom listen address port can be configured by using the \u0026lt;IP_address\u0026gt;@\u0026lt;port\u0026gt; syntax\nDNSSEC To enable DNSSEC validation when using Stubby add the following option to the configuration file\ndnssec_return_status: GETDNS_EXTENSION_TRUE A trust anchor is also required for DNSSEC validation. getdns version 1.2 and later include support for automatic trust anchor management - which will automatically fetch a trust anchor if none is present on the system. See \u0026lsquo;Zero configuration DNSSEC\u0026rsquo; (and below) for the specific details of key management for DNSSEC for this case. If using a version of getdns earlier than 1.2 then a trust anchor must be manually installed and managed on the system. We recommend using unbound-anchor.\nStorage of Zero-config Trust anchor When the system-level user does have a home directory, stubby will store the for Zero configuration DNSSEC dynamically acquired root trust anchor in a subdirectory called \u0026ldquo;.getdns\u0026rdquo; of that home directory (or in \u0026ldquo;%AppData%\\getdns\u0026rdquo; on Windows). If the system-level user does not have a home directory or the home directory is not writeable or readable, stubby will fallback to the current working directory.\nThis can be overruled by supplying a \u0026ldquo;appdata_dir\u0026rdquo; in the stubby.yml configuration file. When a \u0026ldquo;appdata_dir\u0026rdquo; was specified, that directory will be used for storing data related to Zero configuration DNSSEC immediately, without the other paths being tried. It is recommended for systemd setups using the provided systemd.service file(s) to have a \u0026ldquo;appdata_dir\u0026rdquo; directive set to \u0026ldquo;/var/cache/stubby\u0026rdquo; in the stubby.yml configuration file.\nNote that using DNSSEC can add a small performance overhead because it increases the number of queries required to resolve a DNS request.\nOpportunistic DoT to your local resolver Some users may want to have a configuration for Stubby that will always use the resolver from the system configuration (most likely but not always on the local network), but with encryption used where possible. This is an Opportunistic mode which does not authenticate the DoT server. To configure Stubby in this mode:\nSet the transport list and authentication parameter in the configuration to:\ndns_transport_list: - GETDNS_TRANSPORT_TLS - GETDNS_TRANSPORT_UDP - GETDNS_TRANSPORT_TCP tls_authentication: GETDNS_AUTHENTICATION_NONE Remove (or comment out) all the upstream_resolvers. This will cause Stubby to fallback to using the system resolvers only.\nNote: a future version of Stubby will most likely support a mixed mode of system resolvers and configured resolvers. Runtime logging In the 0.1.2 release of stubby there is runtime logging, which can be turned on by using the \u0026lsquo;-l\u0026rsquo; flag.\nIn the 0.1.3 release the logging level is be controlled by specifying a logging level via the \u0026lsquo;-v\u0026rsquo; flag. See stubby help (\u0026lsquo;stubby -h\u0026rsquo;) for more details. "
},
{
	"uri": "http://dnsprivacy.org/test_servers/monitoring/",
	"title": "dnsprivacy Monitoring",
	"tags": [],
	"description": "",
	"content": "The URL for the DNS Privacy monitoring has changed - please update your bookmarks!\nVisit the DNS Privacy Monitoring site\n"
},
{
	"uri": "http://dnsprivacy.org/test_servers/live_traffic_levels/",
	"title": "Live Traffic Levels",
	"tags": [],
	"description": "",
	"content": "This service is temporarily offline\n"
},
{
	"uri": "http://dnsprivacy.org/the_solutions/",
	"title": "The Solutions",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Solutions IETF Standards Track protocol options DNS-over-TLS (DoT) DNS-over-HTTP (DoH) DNS-over-QUIC (DoQ) XFR-over-TLS (XoT) Non Standards Track protocol options DNS-over-DTLS DNSCrypt DNSCurve DNS-over-HTTPS The Discovery Problem Stub to recursive discovery The Recursive to Authoritative Problem Unilateral Probing DELEG This page is mainly focussed on following the development and deployment of DNS-over-TLS (DoT) and DNS-over-HTTPS (DoH) as the leading solutions for DNS Privacy because they are the only protocols currently standardized by the IETF.\nSome history and background on other alternatives are outlined below and we intend to follow other solutions as they evolve.\nSee our Implementation Status page to see the current status of each solution.\nIETF Standards Track protocol options DNS-over-TLS (DoT) RFC7858 specified DNS-over-TLS as a Standards Track protocol in May 2016 with a port assignment of 853 from IANA. There is active work in this area.\nThere are now multiple implementations (including Stubby a local DNS Privacy stub resolver) and a number of experimental and public servers deployed. DNS-over-HTTP (DoH) RFC8484 specifies DNS-over-HTTPS as a Standards Track protocol on October 2018. There are several implementations (including Firefox) and deployments. Note that with DoH it is possible to intermingle DNS and HTTP traffic on the same port 443 connection and make blocking of encrypted DNS harder. It should be noted that this RFC addresses almost purely protocol issues, there is no dynamic discovery mechanism for DoH specified yet so it cannot be done opportunistically (it must be configured).\nDNS-over-QUIC (DoQ) A draft was submitted in April 2017 to the IETF QUIC Working group on DNS-over-QUIC.\nQUIC is a particularly good fit for encrypted DNS and this specification defines it as a \u0026lsquo;genearl-purpose\u0026rsquo; transport, in other words it explicitly includes using DoQ for recursive to authoritative queries.\nXFR-over-TLS (XoT) RFC9103 specifies how to encrypt zone transfers to prevent zone content collection via passive monitoring. The above DoQ RFC also specifies that DoQ can be used for zone transfer encryption.\nNon Standards Track protocol options DNS-over-DTLS RFC8094 specified DNS-over-DTLS as an Experimental Standard in Feb 2017. To our knowledge that are no implementations of DNS-over-DTLS planned or in progress.\nOne issue with DNS-over-DTLS is that it must still truncate DNS responses if the response size it too large (just as UDP does) and so it cannot be a standalone solution for privacy without a fallback mechanism (such as DNS-over-TLS) also being available.\nDNSCrypt DNSCrypt is a method of authenticating communications between a DNS client and a DNS resolver that has been around since 2011. It prevents DNS spoofing. It uses cryptographic signatures to verify that responses originate from the chosen DNS resolver and haven\u0026rsquo;t been tampered with (the messages are still sent over UDP). As a side effect it provides increased privacy because the DNS message content is encrypted. It is an open specification but it has not been standardized by the IETF. There are multiple implementations and a set of DNSCrypt servers available. OpenDNS offers DNSCrypt Also check out an in depth comparison from Tenta.\nDNSCurve DNSCurve was developed in 2010 with encrypting the resolver to authoritative communications in mind. It was not standardized by the IETF.\nDNS-over-HTTPS Google offers a proprietary DNS-over-HTTPS service using a JSON format for DNS queries.\nThe Discovery Problem Historically, only an IP address was required to discover a DNS resolver for queries to be sent over clear text. Encrypted protocols require the client has more information so it can trust the server. This problem space is very different between stub and recursive resolver.\nStub to recursive discovery Early solutions require hard-coding information of trusted servers in different ways e.g. Firefox\u0026rsquo;s TRR list or Stubby\u0026rsquo;s config file More recently the ADD working group is currently working on a range of proposals around this issue. The Recursive to Authoritative Problem After much discussion in DPRIVE, the attempts to provide an authenticated mechanism for encryption of transport between recursives and authoritatives was but on hold. There are fundamental technical issues blocking this path related to limitations of the parent-child relationship as currently defined in DNS zone data, and also significant deployment hurdles to modification in this specifications.\nUnilateral Probing As an interim solution the concept of \u0026lsquo;Unilateral Probing\u0026rsquo; has been introduced in draft https://datatracker.ietf.org/doc/draft-ietf-dprive-unilateral-probing/ and as of Jan 2023 various experimental implementations are in progress.\nDELEG Currently the DELEG working group is looking at developing mechanisms to allow authoritives to securely publish credentials that recursive resolvers can use to validate encrypted connections to them.\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2021_ndss_dns_privacy_workshop/workshop_notes/breakout_room_3/",
	"title": "Zoom Breakout Room 3: Novel Work, ADoT and Future Research",
	"tags": [],
	"description": "",
	"content": "Zoom Breakout Room 3: Novel Work, ADoT and Future Research Benno\u0026rsquo;s summary\nLiang\u0026rsquo;s talk - IP address encryption as a complement to DOH or DOT, no change to DNS, no changes on endpoints. Can we get privacy benefit from this\nScott\u0026rsquo;s talk and DKG\u0026rsquo;s talk - there\u0026rsquo;s information leaked above recursive, but Scott asks if it\u0026rsquo;s operationally feasible for the auth operator to do encryption, whereas DKG takes the view that it needs to be\nOpen discussion -\u0026gt;\nDKG asks Scott about the TLS vulnerabilities:\nare they vulnerabilities to the operation or to the cryptographic promise of TLS? Characterize the attack service better for authoritative servers considering deployment\nScott says - we didn\u0026rsquo;t dig deep into this. Different vulns have different risks. This is a place where studies are important.\nBenno - Scott, you did an analysis and a handful of others did - is there an overview of the operational impacts studies? Who should be doing this? Where should this information be shared?\nScott - has some things happening along those lines - we do protocol design in the IETF, but not how it really works. IF we make a mistake in ops for COM, NET, A and J roots, that\u0026rsquo;s very bad. Scott will be talking about this during upcoming DNSSEC Workshop at ICANN. These aren\u0026rsquo;t going to be resolved in the IETF, needs to be where the operators are.\nAllison - there are many types of SLD. My org is talking with our vendors - we have different tradeoffs than a TLD or an infrastructure SLD\nScott - characterized the enterprise domains as smaller or lower risk\nDKG points out that you could safely try at root and TLDs too by having some instances\nJim Reid - don\u0026rsquo;t forget that if enterprise domains are broken, there are also some dire consequences. A lot of ISPs or others will think it\u0026rsquo;s too hard and it will result in more aggregation and consolidation - toss it to Google or another third party\nWes Hardaker - didn\u0026rsquo;t write down this question\u0026hellip;\nPaul Hoffman - just to be clear, from my comments in the main session, I\u0026rsquo;m very hesitant for us to say that \u0026ldquo;in order to get to this place, these people must do something\u0026rdquo; - we should not link privacy decisions to someone doing enough of what\u0026rsquo;s needed. Just don\u0026rsquo;t assume that the resolver operators will do the right thing. Even qname minimization is still dicey and experimental. If we want more privacy, offering many, letting people try it, find out how it works by measuring it. Don\u0026rsquo;t discourage anyone to try what works for their need. We know there are TLDs that care a great deal to be very privacy preserving. He notes that the increase in TCP is a big thing. At root and typical auths, the use of TCP is about 5% and it will go to 50% or higher.\nFrom the Zoom chat:\ndkg to Everyone (3:48 PM)\nfail-open protocol defaults are terrible long-term. but we currently have a open-all-the-time default for recursive-to-authoritative\nPaul Syverson to Everyone (3:48 PM)\nand/or downgrading attacks.\nJim Reid to Everyone (3:49 PM)\n@paul where are the trade-offs documented so informed decisions can be made? if there’s no guidance…\nJim Reid - not compel, but give people good guidance. Where is that to happen?\nPaul Hoffman - we tried to do this in DPRIVE, and it became unreadable to the operators. Ask Benno to comment: for a lot of operators, the best source of information is their vendors.\nBenno - Thank you, Paul\nWes Hardaker - follow-on topic - splitting out secure vs. insecure protocols - we should figure out which operators pehaps split TCP vs UDP. We (ISI) have created some infrastructure with NSF funding, reach out to Wes for help setting up experiments\nBenno - wrapping up, any other last topics\nDKG - I wanted to call out the concerns that Paul Syverson raised about fail-open. We are pretty good now at moving form always-open to fail-open to something that can be locked down. STS is the example. Learn the resource management parts with the opportunistic experiments.\nBenno - three things to wrap up\nneed operational guidance for TLD, root, SLDs need for experimentation, not trivial, take up Wes on his group\u0026rsquo;s infrastructure as one part of this - generic, will support DOH, DOT, TLS, traffic patterns to go to lock-down-able Notes on the three breakouts (when we are back in the plenary)\nMeasurement - Sandra - discussed protocol designs and end-user education as a continuation of the earlier discussion\nCivil Society and Usability - Gurshabad - discussed balkanization - can we make this cost? Also discussed user education, there a priority is not to overload the user with info and making them not fear they will break their Internet\nNovel Work and ADot - continued from session. He shared the three points above.\n"
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/2017_ndss_dns_privacy_workshop/",
	"title": "2017 NDSS DNS Privacy Workshop",
	"tags": [],
	"description": "",
	"content": "Programme The official programme and remote participation details can be found on the conference website:\nhttps://www.ndss-symposium.org/ndss2017/dns-privacy-workshop-2017-programme/\nAgenda All times are PST.\nSession (Time) Speaker Paper 1: Privacy Protocols\n(9:00-10:15)\nLaura M. Roberts Invited Talk: How DNS Works in Tor \u0026amp; Its Anonymity Implications (slides) (paper) Christian Huitema DNS Privacy through Mixnets and Micropayment (slides) Christian Grothoff Towards Secure Name Resolution on the Internet (slides) (paper) 2: The Leaky DNS Boat\n(10:45-12:30)\nWes Hardaker Changing DNS Usage Profiles for Increased Privacy Protection (slides) (paper) Amir Herzberg DNS-DNS: DNS-based De-NAT Scheme (slides) (paper) Sharon Goldberg Invited Talk: Can NSEC5 be practical for DNSSEC deployments? (slides) (paper) Eran Messeri Invited Talk: Privacy analysis of the DNS-based protocol for obtaining inclusion proof (slides) 3: Encryption to the Rescue?\n(13:15-15:15)\nPanel Discussion The Tension between DNS Privacy and DNS Service Management_Heidemann The Tension between DNS Privacy and DNS Service Management_Kaeo Lanlan Pan EIL: Dealing with the Privacy Problem of ECS (slides) (paper) Sara Dickinson The Usability Challenge for DNS and End Users (slides) Daniel Kahn Gillmor Invited Talk: An Empirical Comparison of DNS Padding Schemes (slides) Christian Huitema DNS Service Discovery Privacy (slides) Willem Toorop Trustworthy DNS Privacy Services (slides) 4: Going Forward: Engineering and Future Directions\n(15:45-17:30)\nPanel Discussion DNS-over-TLS Service Provision Challenges (slides) Breakout Session Working groups creating content for the workshop report including conclusions, recognised challenges and research agenda recommendations. "
},
{
	"uri": "http://dnsprivacy.org/project_notes/try_dns-over-tls/",
	"title": "Try DNS-Over-TLS",
	"tags": [],
	"description": "",
	"content": "If you want to try out DNS-over-TLS then instructions are listed below.\nAlternatively\nUse Stubby as your local DNS-over-TLS resolver watch a short video demonstrating TCP connection re-use, pipelining, TCP Fast Open and DNS-over-TLS: DNS-over-TLS demo video Try DNS-over TLS Grab a DNS-over-TLS client tool: Grab the latest version of getdns or Grab the patch to ldns-1.6.17 https://portal.sinodun.com/stash/projects/TDNS/repos/dns-over-tls_patches/browse/ldns-1.6.17_dns-over-tls.patch Query a public NSD server patched to support DNS-over-TLS: Verisign Labs are kindly hosting a zone on a server running NSD patched to support DNS-over-TLS for testing purposes.\nThe zone is named starttls.verisignlabs.com and it has A, AAAA, and TXT records for names from \u0026lsquo;A\u0026rsquo; to \u0026lsquo;Z\u0026rsquo;. The IP address of the server is currently 173.255.254.151 - it might change so check for yourself. To query with getdns, run \u0026lsquo;make getdns_query\u0026rsquo; to generate the getdns_query wrapper script in the test directory then getdns_query @\u0026lt;serverIP\u0026gt; -s -a -A -l L (Pipelined TLS queries) getdns_query @\u0026lt;serverIP\u0026gt; -s -a -A -l LT (Pipelined TLS queries with fallback to TCP) getdns_query @\u0026lt;serverIP\u0026gt;~\u0026lt;hostname\u0026gt; -s -a -A -l L -m (Pipelined TLS queries in strict mode using server hostname for authentication) To query this with drill use: (the IP address is used here simply to stop the server name resolution falling back to TCP because your local resolver doesn\u0026rsquo;t support DNS-over-TLS).\ndrill -t @173.255.254.151 b.starttls.verisignlabs.com (to see TCP query)\ndrill -C @173.255.254.151 b.starttls.verisignlabs.com (to see DNS-over-TLS query)\ndrill -C -D @173.255.254.151 b.starttls.verisignlabs.com (to do a DNSSEC lookup using DNS-over-TLS)\nDecode in Wireshark If you want to decode the DNS packets in Wireshark (use 1.12.1 or later)\ndownload the server key file: nsd.key\nconfigure the key in wireshark in Edit-\u0026gt;Preferences\nopen the protocol list in the right hand menu and select SSL from the list Click on the RSA keys list \u0026lsquo;Edit\u0026rsquo; box and then click on \u0026lsquo;New\u0026rsquo; in the dialog that appears Enter \u0026lsquo;173.255.254.151\u0026rsquo; for the IP addresss, \u0026lsquo;53\u0026rsquo; for the port and \u0026lsquo;http\u0026rsquo; or \u0026lsquo;spdy\u0026rsquo; for the protocal (DNS is not yet available here). Use the Key File selector to choose the nds.key file you downloaded Save this by hitting OK, OK and Apply. Back in the main window use the Analyze-\u0026gt;Decode as\u0026hellip; option to choose to decode as SSL Click on one of the packets labelled \u0026lsquo;Application data\u0026rsquo; and you should see an additional tab appear in the Packet bytes view window of wireshark labelled \u0026ldquo;Decrypted SSL data\u0026rdquo;. The starttls.verisign.com zone is signed The verisignlab.com server also supports TCP Fast open, as do both drill and digit. Attachments: [nsd.key](attachments/1278024/1278034.key) (application/octet-stream) "
},
{
	"uri": "http://dnsprivacy.org/performance_measurements/review_of_dns_and_http_pm_tools/",
	"title": "Review of DNS and HTTP PM Tools",
	"tags": [],
	"description": "",
	"content": " Survey of existing DNS tools Investigation of HTTP benchmarking tools Survey Work on Tsung Survey of existing DNS tools Tool UDP TCP TLS Pipelining Uses query file Replay pcaps Comments dnsperf from DNS-OARC Y N N N Y N https://github.com/DNS-OARC/dnsperf resperf from DNS-OARC Y N N N Y N For testing resolvers\nhttps://github.com/DNS-OARC/dnsperf\ndnsperf-tcp Y Y N Y Y N https://github.com/Sinodun/dnsperf-tcp dnsperf-tls Y Y Y Y Y N https://github.com/Sinodun/dnsperf-tcp/tree/feature/tls_openssl. A re-factor was required to accomodate TLS usage within the threading model used here and we believe this introduces a performance overhead at very low queries per connection (below 500). This is being investigated. Flamethrower Y Y Y Y Y N https://github.com/DNS-OARC/flamethrower tcpscaler Y Y Y Y Y N https://github.com/jonglezb/tcpscaler\nperftcpdns N Y N N Y - in hex format N A performance testing tool for DNS over TCP, available in the contrib directory of all recent versions of BIND9 queryperf++ Y Y N N Opensource framework for testing DNS servers that uses both UDP and TCP: https://github.com/jinmei/queryperfpp Drool Y Y N ? Y Y drool can replay DNS traffic from packet capture (PCAP) files https://github.com/DNS-OARC/drool dns-benchmarking/ Y N N N Y ? https://gitlab.labs.nic.cz/knot/dns-benchmarking/tree/master ISC Performance lab Y N N N Y ? https://github.com/isc-projects/perflab Investigation of HTTP benchmarking tools Survey We\u0026rsquo;ve also looked a some tools to see if we can reuse anything from the HTTP measurement world to help with benchmarking of Dot or DoH.\nAs a minimum requirement a tool must be capable of making test appear to come from at least 1000 individual clients (aka virtual users or VU in web server performance speak) but this would still require some orchestration to reach (ideally) ~30,000 VU per test VM to minimise the total number of test VM needed.\nTsung Pro: Generated traffic with 7500 VU on my Mac pretty much out of the box. According to tsung status, anyway. Reviews say it can generate 20-30k VU per machine. Written in Erlang. Has existing plugins for non-HTTP traffic, e.g. LDAP, MySQL server, and support for UDP and TCP/TLS. Can do basic scripting of client behaviour in XML config. Appears possible to script desired behaviour. Con: Mailing list is quiet (few messages every other month) and not much commit activity on GitHub. No DNS plugin, and would need to write one. In Erlang. Conclusion: worth further investigation, see below k6 Pro: New. Shiny. Popular on GitHub. Client scripts written in JavaScript, so can produce desired behaviour. Written in Go, so good DNS lib available. Can export results to InfluxDB ready for graphing by Grafana. Con: No non-HTTP modules as yet. Does not necessarily seem to scale to large number of VU. I tried running a simple 10s test on jim-dev-linux. Test startup took 2s on 10 VU, 9s on 100 VU, 41s on 500 VU, 63s on 750 VU and 26m9s on 1000 VU. The latter was because it went well into swap on a 4Gb RAM VM. Conclusion: Prohibitive startup times with 1000 VU Others surveyed but not tested: Locust Pro: Python. Client is also Python, so can produce desired behaviour. Good at distributed clients. Scales to a lot of clients. Con: In Python, so not fast. Max query rates 1/25 competitors on same hardware. Relies on client scaling for volume. Aimed at those willing to spin up a lot of AWS instances. JMeter Pro: DNS howto: https://jmeter-plugins.org/wiki/dns_test_using_jmeter/ Widely used. Con: Reports says maxes out at 1000 VU per machine. Needs 1 Java thread per VU. Work on Tsung After further work on Tsung we concluded that peak traffic generation for single client instance of 30k clients was limited to 100kqps, as discussed below. This would mean many client VM\u0026rsquo;s would be needed to achieve moderate DNS traffic levels. We suspect the fundamental reason behind this is twofold:\nEach session is scripted, so you can mimic real traffic. But that scripting is at some level interpreted. HTTP testing happens at a lower order of magnitude of connections and traffic than DNS. Hitting a website with 10,000 HTTP GETs down the same connection just doesn\u0026rsquo;t really happen. We did do some development work on it to add DNS as a proof of concept, the result can be found in the dns-client branch in this GitHub repo. It proved reasonably easy to get a DNS plugin doing synchronous queries working over UDP, TCP and TCP/TLS. Even taking successive lookups from a queries file as used by dnsperf. Our specific observations are:\nDynamic variable substitution on each query slows down activity significantly, and according to this PR currently can be a serious bottleneck for horizontal scaling. We found that yes, you can create a lot of concurrent sessions (i.e. Virtual Users). However, the total throughput of queries that you can generate falls off markedly; a single session generating 7,000,000 UDP packets that it sends and doesn\u0026rsquo;t check for answers can send 100k packets/sec, but increasing the number of sessions doesn\u0026rsquo;t increase the overall output. Instead you rapidly find total output halving if you add several more sessions, and moving to a lot of sessions reduces total output to more like 7k. No matter what we changed, we\u0026rsquo;ve been unable to get total output much above 100kqps. Adding support for pipelining queries (having multiple queries in flight from a single session, necessary to mimic client behaviour) is not straightforward. The concept just doesn\u0026rsquo;t exist in Tsung at present; it\u0026rsquo;s basically synchronous only. So, the problem is that we\u0026rsquo;re unable to use Tsung to generate baseline performance numbers to compare with existing numbers. While it might (after some work) be useful for real-life type scenarios, there are concerns about how well it will scale horizontally (though that may well be the dynamic variable issue above). The original author does designed for many parallel runs of complex sessions - so, probably good for real life tests, but a problem if you\u0026rsquo;re trying to establish a baseline of maximum queries a server can handle.\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_dnsdist/",
	"title": "Using dnsdist",
	"tags": [],
	"description": "",
	"content": "Below is a simple configuration for setting up dnsdist as a server offering both DoT and DoH\naddACL(\u0026#39;0.0.0.0/0\u0026#39;) addACL(\u0026#39;::/0\u0026#39;) addLocal(\u0026#39;0.0.0.0:53\u0026#39;,{doTCP=true, reusePort=true, tcpFastOpenSize=X}) -- for dns over port 53 ipv4 , set X(int) for tcp fast open queue size addLocal(\u0026#39;[::]:53\u0026#39;, {doTCP=true, reusePort=true, tcpFastOpenSize=X}) -- for dns over port 53 ipv6 , set X(int) for tcp fast open queue size addTLSLocal(\u0026#34;0.0.0.0\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;,{ doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoT ipv4 , by default listens on port 853. Set X(int) for tcp fast open queue size. addTLSLocal(\u0026#34;[::]\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;,{ doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoT ipv6 , by default listens on port 853. Set X(int) for tcp fast open queue size. addDOHLocal(\u0026#34;[::]:443\u0026#34;, \u0026#34;/Path/fullchain.pem\u0026#34;, \u0026#34;/Path/privkey.pem\u0026#34;, \u0026#34;/dns-query\u0026#34;, { doTCP=true, reusePort=true, tcpFastOpenSize=X }) -- path for certs and listen address for DoH. Set X(int) for tcp fast open queue size. addAction(MaxQPSIPRule(X), DropAction()) -- set X(int) number of queries to be allowed per second from a IP addAction(AndRule({QTypeRule(dnsdist.ANY), TCPRule(false)}), DropAction()) -- drop ANY queries sent over udp , not useful for DoT and DoH only servers. pc = newPacketCache(X, 86400, 600) -- set X number of entries to be in dnsdist cache by default , memory will be preallocated based on the X number getPool(\u0026#34;\u0026#34;):setCache(pc) -- deafult cache setServerPolicy(leastOutstanding) -- server policy to choose the downstream servers for recursion newServer({address=\u0026#34;127.0.0.1:1111\u0026#34;, name=\u0026#34;resolver1\u0026#34;}) -- downstream servers for recursion newServer({address=\u0026#34;127.0.0.1:2222\u0026#34;, name=\u0026#34;resolver2\u0026#34;}) -- downstream servers for recursion setMaxUDPOutstanding(65535) setMaxTCPClientThreads(X) -- set X(int) to handle number of maximum tcp clients setMaxTCPConnectionDuration(X) -- set X(int) for tcp connection duaration from a connected client. X is number of seconds. setMaxTCPConnectionsPerClient(X) -- set X(int) for number of tcp connections from a single client. Useful for rate limiting the concurrent connections. setMaxTCPQueriesPerConnection(X) -- set X(int) , similiar to addAction(MaxQPSIPRule(X), DropAction()) "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/macos_homebrew/",
	"title": "MacOS Homebrew",
	"tags": [],
	"description": "",
	"content": " Installation Running Stubby on the command line Logging from the stubby service Test Stubby Running Stubby as a service Modify your upstream resolvers Configuring stubby The Homebrew formula currently installs the 0.4.0 version of stubby, based on libgetdns 1.6.1\nSee this issue for details of problems with homebrew on BigSur: https://github.com/getdnsapi/stubby/issues/272#issuecomment-738622312\nInstallation 1. Install Homebrew if you don\u0026rsquo;t aleady have it:\n/usr/bin/ruby -e \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026#34; 2. Install stubby\nbrew install stubby Running Stubby on the command line sudo /usr/local/opt/bin/stubby -C /usr/local/etc/stubby/stubby.yml -l The -l flag enables logging Logging from the stubby service The logging is currently crude and simply writes to a file. (We are working on making this better!) To see the logs\nsudo tail -f /usr/local/var/log/stubby/stubby.log Test Stubby A quick test can be done by using dig (or your favourite DNS tool) on the loopback address\n\u0026gt; dig @127.0.0.1 www.example.com Running Stubby as a service Running stubby like this will mean it runs continually in the background\nsudo brew services start stubby Modify your upstream resolvers Once this change is made your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\nFor Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening.\nTo switch to use Stubby for DNS resolution run:\nsudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh To switch back to your default DNS config (no privacy) use:\nsudo /usr/local/opt/stubby/sbin/stubby-setdns-macos.sh -r Configuring stubby It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. The file is installed in:\n/usr/local/etc/stubby/stubby.yml More information on how to customise the configuration can be found here.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/stubby_manager_gui/",
	"title": "Stubby Manager GUI",
	"tags": [],
	"description": "",
	"content": " Latest release is 0.4.0-a2 (11-Dec 2020) Background Status Installation Overview Welcome page On/Off button Network Profiles Untrusted Trusted Hostile Networks Utilities Logs Code Bug reports and feature requests Future features Latest release is 0.4.0-a2 (11-Dec 2020) Background The Stubby Manager project is designed to provide a Graphical User Interface to manage Stubby aimed at both non-technical and advanced users. It will initially be supported on Windows only, macOS support will be added later. dnsprivacy.org is grateful to the Comcast Innovation Fund for supporting this project.\nStatus The code is still in development, an alpha release is available for early testing. Feedback is welcomed but note that the alpha release is not quite feature complete. Outstanding work items for the beta release include:\nDetection and use of network resolvers so the Trusted profile can use them Add, Filter and IPv6 options on the server table Adding a \u0026lsquo;None\u0026rsquo; option to the Network drop down Various usability improvements including improved alerting, icons and tooltips. Installation The Windows Installer can be obtained from this page Latest windows installers After installing and running we recommend making the Stubby Manager Icon permanently visible in the system tray (select the Start menu and type \u0026lsquo;select which icons appear on the taskbar\u0026rsquo;).\nYou may also want to manually configure the Stubby Manager application to start at login/wake - this can be done\nManually by creating a desktop short cut for the Stubby Manager application and then copy/pasting it into the %appdata%\\Microsoft\\Windows\\Start Menu\\Programs\\Start-up directory Installing a scheduled task based on the C:\\Program Files\\Stubby\\StubbyManager.xml file. Overview Welcome page The \u0026lsquo;Info\u0026rsquo; Tab provides background information and more details on DNS, DNS encryption and getdns/stubby. These details can be hidden to provide a cleaner interface.\nOn/Off button For users who are happy to simply use the defaults provided (including the Stubby maintained resolvers) then simply hit the big button to turn Stubby on! Stubby will then automatically start again if the machine is rebooted. The display shows which networks and which network profiles are in use (see below)\nNetwork Profiles Three profiles are provided for flexible configuration for users who want to customise their setup. Each contains options to set the following:\nEncrypt DNS - Use only TLS as a transport (otherwise UDP, TCP and TLS are all available) Always Authenticate - Only connect to servers that have authentication information and where the TLS handshake can verify that information. Validate data - enable stub mode DNSSEC validation Round Robin - open connections to all the selected servers and send queries in turn to each. Default is to use the selected servers in order unless they become unavailable. Untrusted This is the default profile provided on install, it encrypted DNS using DNS-over-TLS (DoT) to the Stubby recursive resolvers. It is suitable for use in most networks where DoT is not blocked - note however that the resolvers are based in Europe so users outside Europe may want to choose alternative resolvers for better latency.\nTrusted The trusted profile currently uses the Quad9 resolvers BUT in the beta release will use the network provided resolvers for resolution, attempting to use DoT opportunistically. In effect this means that connections will be encrypted if the network resolver supports DoT, but not (at this point in time) authenticated. If the network resolver does not support DoT, clear text (UDP/TCP on port 53) will be used. Hostile This is appropriate for use in networks with stricter security policies or that attempt to engage in active surveillance of users e.g. by blocking DoT or well known DoH resolvers. In the beta release it will use DoT to the Quad9 resolvers, in a future release it will support fallback to DoH to the Quad9 resolvers. Note that it may be better to use a full VPN on such networks.\nNetworks Users can configure a default profile to be used automatically when joining new networks and also specific profiles to use on specific networks on this tab. Utilities This tab provides more detailed logging and control for troubleshooting or advanced users. Logs The beta release supports displaying the logs from the stubby deamon in this tab, a future release will allow inspection of DNS queries. (Since stubby runs as a daemon, advanced users can use tcpdump or wireshark to inspect their DNS queries listening on local host port 53).\nCode The code is available on github: https://github.com/Sinodun/Stubby_Manager\nBug reports and feature requests Please file issues at: https://github.com/Sinodun/Stubby_Manager/issues\nFuture features Future release will include a probe mode that can be run to determine the connectivity and latency of available resolvers and also some of their basic (measurable) properties such as DNSSEC support. A custom profile and expert mode will also be available to further customise the Stubby configuration.\n"
},
{
	"uri": "http://dnsprivacy.org/current_work/",
	"title": "Current Work",
	"tags": [],
	"description": "",
	"content": " This page describes at a high level the progress in various areas of DNS Privacy work (most recent activity at the top).\nQ3 2025 DPRIVE working group closed as the goals of the charter have been achieved Announcement of IETF side meeting on ADoT/ADoQ deployment initiative Q2 2025 \u0026ldquo;I-D:Extensible Delegation for DNS\u0026rdquo; is adopted by DELEG Let\u0026rsquo;s Encrypt announced short-lived IP based certificates Launch of Public Beta of the DNS4EU Service Q1 2025 RFC 9704 \u0026ldquo;Establishing Local DNS Authority in Validated Split-Horizon Environments\u0026rdquo; published by ADD US Executive Order on Cybersecurity The White House has issued an executive order covering a wide range of cybersecurity-related topics. Encrypted DNS is referenced: contracts will be required to specify that any product that acts as a DNS resolver (client or server) for the Federal Government will be required to support encrypted DNS. In addition, agencies are required to enable encrypted DNS protocols wherever their existing clients and servers support those protocols. Italy demands Google poison DNS under strict Piracy Shield law Q4 2024 Further announcements on Microsofts Zero Trust offering NLnetLabs merge support for downstream DNS-over-QUIC into Unbound! Russia’s internet watchdog blocks thousands of websites that use Cloudflare\u0026rsquo;s privacy service Q3 2024 Cloudflare moves forward with limited ECH deployment again Malaysian Government backtracks after backlash to its policy of DNS re-direction of Open resolver traffic to government resolvers: Fahmi defends order for DNS redirection for business, govts, enterprises by Sept 30 Malaysia Reverses Decision on Controversial DNS Redirection Policy DNS4ALL: SIDN Labs\u0026rsquo; experimental public DNS resolver French Court Orders Google, Cloudflare, Cisco to Poison DNS in Anti-Piracy Crackdown OpenDNS reaction is to block all DNS requests from France following a blocking decision Your phone’s secret network activity: 10 times worse than DNS logs reveal Q2 2024 CISA Reveals Guidance For Implementation of Encrypted DNS Protocols The US Cybersecurity and Infrastructure Security Agency (CISA) has issued new guidance on the implementation of encrypted DNS support for federal civilian agencies. The CISA press release is accessible here. Firefox for Enterprise 119: Release notes Support for Encrypted Client Hello is included in the latest update to the Firefox browser. IETF DELEG Working Group created Usenix papaer: \u0026ldquo;User Awareness and Behaviors Concerning Encrypted DNS Settings in Web Browsers\u0026rdquo; Microsoft announced \u0026ldquo;Zero Trust DNS Private Preview\u0026rdquo; And follow up Deployment considerations Quad9 Announces Advisory Council to Consider Human Rights Impacts Feb 2024 DELEG Mailing list created RFC 9539 - Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS is published Jan 2024 Internet Draft - Extensible Delegation for DNS (DELEG) published which could pave the way for authenticated recursive to auth encryption Release 1.9.0 of dnsdist supports DNS-over-QUIC for incoming queries Dec 2023 Quad9 wins appeal in Sony case DNS over HTTPS is now available in Amazon Route 53 Resolver Nov 2023 IETF ADD WG publishes 3 new RFC\u0026rsquo;s: RFC 9461: Service Binding Mapping for DNS Servers RFC 9462: Discovery of Designated Resolvers RFC 9463: DHCP and Router Advertisement Options for the Discovery of Network-designated Resolvers (DNR) Mullvad\u0026rsquo;s public encrypted DNS Servers run in RAM now Oct 2023 IETF DPRIVE WG: Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS approved for publication Discovery of Network-designated Resolvers (DNR) support for Windows Insiders Cloudflare announces initial ECH support Encrypted Client Hello support in browsers: Chrome-1, Chrome-2 Firefox Sept 2023 Knot Authoritative 3.3.0 includes DNS-over-QUIC and XFR-over-QUIC OARC 41: Implementing EDNS Client Subnet in a privacy preserving way by Andrey Meshkov of AdGuard Encrypted DNS in the Network of Deutsche Telekom: Status and Outlook Aug 2023 Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS starts IESG last call Google Chrome updates Google Chrome Canary gets experimental Encrypted Client Hello (ECH) support Google Chrome 115: DNS over HTTPS auto upgrades for a subset of users as part of a test July 2023 IETF 117 PEARG: Talk on the Open letter expressing concerns over French plans to require DNS blocking in Browsers and Recursive resolovers Open Letter MAPRG: User Awareness and Behaviors Concerning Encrypted DNS Settings in Web Browsers New ID: Reflections on Ten Years Past The Snowden Revelations AdGuard v4.5 for iOS: system-wide tracking protection June 2023 Unilateral Probing draft in the IETF DPRIVE WG likely moving forward as Experimental Map of encrypted DNS use based on data from Cloudflare’s recursive resolver service. New windows packages for Stubby May 2023 Updates to the DoH settings and options in Firefox 114 Overview from ISOC on Encrypted DNS Ongoing debate about the status of the Unilateral Probing draft in the IETF DPRIVE WG April 2023 DNSdist is now CPE ready with DoT and DoH support! AdGuard has experimental support for ECH Italian court rules against Cloudflare in another DNS-blocking injunction fight Blog post on QNAME minimisation adoption and Interesting stats from NLnet Labs showing the increase in use of QNAME minimisation March 2023 IETF 116 Work at the Hackathon to implement Unilateral probing including starting work on Unbound Also announcement that the DNS-over-QUIC implementation in Unbound is ready for review Quad9 vows to continue the fight after German court ruling in Sony case February 2023 ADD WG at IETF Adopts DNS Resolver Information draft Will re-run WGLC on Establishing Local DNS Authority in Validated Split-Horizon Environments after major re-design New European DNS service from the founders of NextDNS: dns0.eu Work continues on implementing DNS-over-QUIC in NLnet Labs Unbound resolver January 2023 RIPE have created a DNS Resolver BCP Task Force Updates to our Implementation Status page on \u0026lsquo;Unilateral Probing\u0026rsquo; developments. December 2022 From IGR 2022 Presentation by Mallory Knodel on \u0026lsquo;The tensions created by the transition to private DNS for public interest advocates Opinion piece by Geoff Huston on current state of DNS Press release about the DNS4EU resolver infrastructure November 2022 IETF 115 DPRIVE still working on unilateral probing, with encouraging talk of implementations in PowerDNS and possibly Google in future 3 ADD RFCs publication still held up by dependency issue IAB Open meeting featured latest measurements by OONI of Encrypted DNS blocking in IRAN October 2022 Presentations from RIPE 85 DNS Privacy with Speed? Evaluating DNS over QUIC and its Impact on Web Performance Measuring Encrypted-DNS Censorship Using OONI Probes September 2022 CISA announces a protective DNS service for US Federal Agencies APNIC blog on take up of encrypted DNS As previously announced the dnsovertls*.sinodun.com nameservers (included in the default Stubby nameservers) were decommissioned on 9th Sept 2022. See this announcement. August 2022 Windows 11 Test Release will have DNS-over-TLS support Measuring Encrypted-DNS Censorship Using OONI Probe The U.K.’s NCSC Recommends Protective DNS for Government and Industry July 2022 IETF 114 DRPIVE: Recursive to Authoritative probing draft is still moving forward ADD: 3 drafts now past IESG LC: DDR, DNR and SVCB for DNS OARC 38 AdGuard experience running a DNS-over-QUIC resolver DoQ on authoritative: perspective, initial implementation, performance, DoS resilience TLS at a Root Experiment PowerDNS Recursor 4.7.0 has experimental probing for Authoritative DoT support June 2022 Apple Developer conference news on DDR and DNSSEC support for apps. Windows 11 version 22H2 will including DDR support Article from AdGuard on their DNS-over-QUIC service which is now compliant with the DoQ standard. A DNS tutorial including a section on DNS Privacy May 2022 DNS-over-QUIC becomes RFC 9250 Implementation work starts on DoQ Knot authoritative Unbound EDDI Panel on \u0026lsquo;Shared learnings from the deployment and scaling of encrypted DNS resolvers\u0026rsquo; US Courts require ISPs to block certain websites April 2022 Support for DoH appears in Android 13 Multiple drafts pass WGLC in the IETF ADD WG: Discovery of Designated Resolvers DHCP and Router Advertisement Options for the Discovery of Network-designated Resolvers (DNR) Service Binding Mapping for DNS Servers March 2022 DNS-over-QUIC Internet Draft passes IEGS last call IETF 113 Hackathon: Work on Encrypted Dynamic updates (using TLS and QUIC) DRPIVE: Recursive to Authoritative probing draft is moving forward ADD: 3 drafts now in WGLC: DDR, DNR and SVCB for DNS Quad9 iOS/MacOS encrypted DNS provisioning profiles now available Cisco Umbrella supports DoT and DoH February 2022 First measurements of DNS over QUIC in the wild Presentation at EDDI on DNS-over-QUIC status: Video Slides APNIC Blog: Measuring DNS-over-HTTPS performance around the world Even the White House wants encrypted DNS January 2022 BIND 9.18 released with DoT, DoH and XoT! Apple publish white paper on iCould Private Relay as it gets scrutiny from Governments and Enterprises Android 13 has native DoH support December 2021 DNS-over-QUIC Internet Draft passes Working Group last call Is the FBI purchasing DNS logs? Is the DNS Open? APNIC blog post by Geoff Huston Latest on the EU\u0026rsquo;s plans regarding their DNS4EU project November 2021 NIS 2 (and the other EU regulation updates you need to know) Interesting report by Citizen Lab on DNS censorship measurements Microsoft announce \u0026lsquo;Making DoH Discoverable: Introducing DDR\u0026rsquo; in Windows 11 IETF 112 ADD WG Minutes - many drafts discussed DPRIVE WG Minutes - continued discussion of paths forward for recursive to authoritative opportunistic and authenticated encryption October 2021 Who emailed who? Institutional privacy risks in the DNS Mosyle Encrypted DNS Filtering \u0026amp; Security Solution automates web filtering for Apple devices An update from Alex Muffet on this DNS-over-Tor experiments NSD 4.3.8 includes mutual authentication for XoT DNS-over-QUIC specification goes to Working Group Last call in the IETF DPRIVE WG September 2021 DoH on Android coming in 13 (Tirumasu) APNIC blog on encrypted DNS deployment More on Quad9\u0026rsquo;s battle against Sony\u0026rsquo;s Court ruling And Adguards support for them August 2021 RFC 9310: Zone transfer over TLS (XoT) is published RFC 9102: TLS DNSSEC Chain Extension finally published in the Independent Submission stream after hitting the buffers in the TLS WG https://sdns2021.dnscrypt.info conference held online July 2021 IETF 111 Discussions ADD WG Agenda DPRIVE Session 1: DoQ and Unauthenticated encryption to Authoritatives DPRIVE Session 2: More discussion on how to signal Encryption at Authoritatives ANRW talks on DNS Privacy: Distributing Queries and Institutional Privacy Great summary of the responses to Mozilla\u0026rsquo;s TRR consultation by Andrew Campling Firefox announces roll out of DoH by default (using CIRA) for Canadian users Apple iCould Private Relay will encrypt DNS and web traffic June 2021 Quad9 will appeal the injunction obtained by Sony seeking to block DNS resolution of certain domains. Windows 11 will include DoH support Mozilla\u0026rsquo;s TRR Public Consultation results Geoff Huston\u0026rsquo;s take on resolver centrality from IDS2021 May 2021 QUIC protocol specification is published: RFC9000 Increasing adoption of the European Resolver Policy: press release OARC 35 included talks on Oblivious DNS, XFRW-over-TLS and \u0026lsquo;DNS over HTTPS over CGN or public NAT64\u0026rsquo; April 2021 European Resolver Policy published RIPE DNS WG talk on this topic Updates on DoH Support in Chrome on Linux APNIC article on the interaction of web hosting co-location and DNS Privacy March 2021 Microsoft Edge fixes performance issue with DoH NSA prodding tips on selecting a protected DNS service IETF 110 activity: Opportunistic ADoT and SVCB signalling discussed in DPRIVE XFR-over-TLS draft passes Working Group Last Call February 2021 NDSS 2021 DNS Privacy workshop BIND9 add support for DoH and XoT (XFR-over-TLS) in development release 9.17.10! Quad9 public domain name service moves to Switzerland for maximum internet privacy protection And becomes the first large scale recursive operator to publishing an RPS: a privacy policy based on RFC8932 (BCP232): Recommendations for DNS Privacy Service Operators: quad9.net/privacy/policy/ CENTR hold a webinar on deploying DoH January 2021 EU NISA Directive may require anyone running a \u0026lsquo;DNS privacy service\u0026rsquo; to register - even if running your own resolver! NSA report on use of encrypted DNS - warns against use of third-party DoH resolvers and recommends blocking known DoT/DoH endpoints in many scenarios Microsoft confirm Windows 10 21H1 will include DoH Mozilla comment period for TRR Consultation extended to 20th Jan December 2020 Adguard launch the first DNS-over-QUIC resolver service Cloudflare launch a Oblivious DoH service November 2020 BIND release initial implementation of DoT in 9.17.7 NDSS DNS Privacy Workshop Call for Papers Encrypted DNS configuration profiles for Apple devices. Mozilla start a Comment period on their use of DoH and TRRs Work on detecting encrypted DNS blocking by OONI and CIS India New version of draft on requirements for recursive to authoritative DNS encryption in IETF DPRIVE WG October 2020 BCP232 is published: RFC8932 Recommendations for DNS Privacy Service Operators Plans for Chrome to prototype ECK (Encrypted Client Hello) OARC33 Presentation on upcoming Stubby GUI Talk on DNS Shotgun performance measurement tool with interesting results on the overhead of DNS encryption September 2020 Official Apple documentation for the encrypted DNS APIs: dnssettings, nsednssettingsmanager and privacycontexts Law proposed to block DoT, DoH, ECH and TLS 1.3 by Russia Review of NextDNS service Cloudflare launches beta Warp 1.1.1.1 clients for Windows and macOS desktop Android add DoH to Chrome August 2020 ADD WG starts initial work on requirements for discovery mechanisms draft-pauly-add-requirements DPRIVE WG sees support for working on opportunistic encryption for recursive to authoritative Microsoft addDoH settings to Windows 10 review build and Adds DoH to Edge July 2020 IETF 108: ADD WG decides to back to analysing the requirements after reviewing the current proposals DPRIVE WG: Zone transfers over TLS discussed Windows 10 Insider Preview Build 20185 includes DoH configuration options for recognised resolvers ZDNet article: Iranian hacker group becomes first known APT to weaponize DNS-over-HTTPS (DoH) IETF BCP Recommendations for DNS Privacy Service Operators is approved for publication June 2020 Comcast become the first ISP to join Mozilla\u0026rsquo;s Firefox TRR program OONI publish a study showing 57% of well known DoT endpoints are blocking in Iran Apple announce DoT and DoH support and an API for apps to configure their own encrypted resolver Searching in the address bar can leak DNS queries on the local network in Chrome and Firefox May 2020 Chrome 83 ships with DoH auto-upgrade option (and manual configuration options) Microsoft announced DoH client available for Windows Insiders New drafts submitted to the IETF ADD WG on discovery EDDI has produced a Interim DoH Discovery Proposal for Browser and OS vendors US govt agencies to disable DoH until their own federal DoT/DoH service is available ISC publish a design document for their upcoming support of DoT and DoH April 2020 DNS-over-QUIC draft adopted by DPRIVE WG at IETF CIRA (the .ca registry) announce Canadian Sheild a free DoT\u0026amp;DoH service hosted in Canada Latest from Chrome on their DoH release plans Cloudflare now offer \u0026ldquo;Cloudflare 1.1.1.1 for families\u0026rdquo; with filtering options The Register article on the Cloudflare 1.1.1.1 audit results March 2020 ADD holds it first Working Group meeting (virtually) at IETF 107 ICANN public Version 2 of their Local and Internet Policy Implications of Encrypted DNS Chrome release freeze will delay rollout of DoH February 2020 Firefox moves to DoH by Default for all US users. ADD (Adaptive DNS Discovery) Working Group at IETF has charter approved and will meet at IETF 107 in Vancouver Presentations at OARC 32: DNS Encryption: Operational Experience and Insight A DoT naming, publication, and discovery scheme Status of DoH/TRR in Firefox January 2020 Early observations from the BT and DT DoH trials - https://www.youtube.com/watch?v=GhyO9K_w1jU\u0026amp;feature=youtu.be Interesting APNIC Blog article on What is the DNS anyway? ACLU piece on the DoH Privacy Battle Details of Google Chrome\u0026rsquo;s \u0026lsquo;same-provider-upgrade\u0026rsquo; plans EFF\u0026rsquo;s take on Encrypting DNS: Year in Review 2019 December 2019: Ongoing RIPE Atlas measurements of the use-dns-application.net deployment (the \u0026lsquo;canary\u0026rsquo; domain for DoH). Latest plots are here: DEC 2019 status BT announce trials of DoT/DoH Good update on the latest DoH status for major browsers Official NGINX guide to how to set up DoT and DoH November 2019: Microsoft announce plans to implement DoH in Windows\u0026hellip;. at some point: Windows will improve user privacy with DNS over HTTPS Paul Vixie\u0026rsquo;s talk on DoH at NANOG77: DNS WARS: Episode IV A New Bypass Letter to US Congress regarding Chromes DoH plans Chromes response that it does not plan to default to Google Public DNS EFF and partners write in support of DoH Mozilla ask congress to investigate ISPs use of consumer data Latest version of DNS Privacy Requirements for Exchanges between Recursive Resolvers and Authoritative Servers from the IETF DPRIVE WG Latest proposals on \u0026lsquo;Adaptive DNS\u0026rsquo; from DPRIVE WG October 2019 Comcast begin a phase one of a DoH public beta: https://doh.xfinity.com/dns-query and a DoT public beta: dot.xfinity.com ICANN OCTO document including evaluation of encrypted DNS: Local and Internet Policy Implications of Encrypted DNS Mozilla release FAQ on DoH: DNS over HTTPS FAQs. DNSCrypt implements a scheme similar in concept to Oblivious DNS ANONYMIZED DNSCRYPT Nice article on DNS Security: Threat Modeling DNSSEC, DoT, and DoH from netmeister.org Netherlands National Cyber Security Centre publishes a factsheet on DNS monitoring Factsheet DNS monitoring will get-harder Opera announces experimental support fro DoH on an opt-in basis. September 2019 Another blog from Bert Hubert: Centralised DoH is bad for privacy in 2019 and beyond IMC Paper: An Empirical Study of the Cost of DNS-over-HTTPs And today the Encrypted DNS Deployment Initiative launches: \u0026quot; a collaborative effort to ensure the smooth global adoption and reliable operation of DNS encryption technology. \u0026quot; Chrome announces experiment to upgrade to DoH with existing DNS provider OpenBSD has disabled DoH in their Firefox packages Firefox announce rollout of DoH by default in the USA during September\u0026hellip;. and it will use Cloudflare And a non-standard method to disable it\u0026hellip;.. And details of how to do this in BIND And\u0026hellip;. some reaction about the Firefox DoH announcement\u0026hellip; CircleID - http://www.circleid.com/posts/20190906_dns_over_https_the_privacy_and_security_concerns/ ISP Review - https://www.ispreview.co.uk/index.php/2019/09/headache-for-uk-isps-as-firefox-adopt-dns-over-https-by-default.html Think Broadband - https://www.thinkbroadband.com/news/8525-doh-on-its-way-to-firefox-for-usa-users-first ZDNet - https://www.zdnet.com/article/mozilla-to-gradually-enable-dns-over-https-for-firefox-us-users-later-this-month/ Computer Business Review - https://www.cbronline.com/news/firefox-dns-over-https Engadget - https://www.engadget.com/2019/09/07/firefox-dns-over-https-by-default/ Forbes - https://www.forbes.com/sites/zakdoffman/2019/09/08/firefox-announces-major-new-encryption-default-to-protect-millions-of-users/#2ee8308518c0 MenaFN - https://menafn.com/1098979803/India-Soon-Firefox-will-encrypt-domain-name-requests-by-default August 2019 Great study on fingerprinting websites based on Encrypted DNS Queries encrypted-dns-privacy-a-traffic-analysis-perspective BIND announce future support for DoT in their annual report ISC annual report Various of opinion pieces on DoH/DoT InfoBlox Blog \u0026lsquo;DoT DoH and the DNS Last Mile Security Problem\u0026rsquo; Nice article from Stacie Hoffman on \u0026lsquo;Recalibrating the doh debate\u0026rsquo; UK Internet Watch Foundation writes to the UK secretary of State about DoH. Experimental support for DoH in Knot Resolver July 2019 IETF DPRIVE WG: New/updated drafts of using TLS for Zone transfers: DNS Zone Transfer over TLS and DNS Zone Transfer using DNS Stateful Operations ANRW Paper: Analyzing the Costs (and Benefits) of DNS, DoT, and DoH for the Modern Web Hackathon @ Africa Internet Summit 2019 results include measurement of DoH traffic Africa Hackathon results Enterprises openly discussing blocking DoH endpoints, and publishing lists of IPs Big twitter debates over the pros and cons of DoH to Cloudflare including Declaration of the \u0026lsquo;Streisand effect\u0026rsquo; happening Allegations of the first malware using DoH UK ISPA announces finalists for 2019 Internet Villains, including Mozilla its for \u0026lsquo;DoH by default\u0026rsquo; plans, then backs down but with detailed explanation because Mozilla finally make a clear statement about their Firefox DoH plans in the UK: \u0026lsquo;We have no current plans to enable DoH by default in the UK\u0026rsquo;, but they don\u0026rsquo;t rule out other European countries. June 2019 IETF ADD BoF: Plans announced to hold a BoF at IETF 105 in Montreal for \u0026lsquo;Applications doing DNS\u0026rsquo; IETF DNSOP WG: Latest version of a mechanism to discover recursive resolver information including DoT/DoH: DNS Resolver Information Self-publication Google officially launches its Public DoH service A flurry of opinion papers, meetings and media discussion about DoH/DoT ICANN 65 (Policy Forum): Policy Aspects of DNS over HTTPS (DoH), DNS over TLS (DoT) and Related Issues Eurodig 2019: \u0026lsquo;DNS over HTTPS – What is it, and why should you care?\u0026rsquo; The Open Rights Group Report CENTR position paper on DoH NSD 4.2 supports DoT - first open source authoritative server to do this! May 2019 Interesting analysis of the current DoT/DoH software picture: https://doh.defaultroutes.de/implementations.html UK House of Lords Agenda for 14th May includes a Question on DoH. This follows much media coverage in the UK e.g. The Times article \u0026ldquo;Warning over Google Chrome browser’s new threat to children\u0026rdquo; Daily Mail \u0026ldquo;Google\u0026rsquo;s plans for new encrypted Chrome web browser could make it harder for UK government to stop computer users watching porn online\u0026rdquo; \u0026ldquo;Crisis talks are being held on May 8 by the National Cyber Security Centre (NCSC), part of GCHQ, to discuss the risks the new encrypted browser will present, \u0026quot; PC Pro article on DoH Much discussion of DoH at 2019 the ICANN DNS Symposium (including a panel in the afternoon session) Good talk on the DoH Dilema by Vittorio Bertola ISP centric view of DoH by Andy Fidler of British Telecom And the view of Paul Vixie on Benefits and Hazards of Non- Local DNS Resolution Panel on DoH (1hr 50 mins into this recording) Interesting\u0026hellip;. https://www.nextdns.io: “The next-generation DNS”, a hosted, private DNS resolver with DoT and DoH support and blocklists. Quad9 have launched their own mobile app \u0026ldquo;Quad9 Connect\u0026rdquo; for Android Along with a statement they will never host web content on the same IP as a DoH endpoint. The ISP Internet Initiative Japan (IIJ) launches a Beta trail of DoT and DoH (article is in Japanese) April 2019 Mozilla statement on their DoH TRR policy requirements. Knot resolver adds experimental DoH in 4.0.0! Latest results from Mozilla on their Firefox DoH testing March 2019 So much discussion of DoT/DoH at IETF 104: The DoH WG is still discussing the ins and outs of a proposed discovery mechanism: https://datatracker.ietf.org/doc/draft-ietf-doh-resolver-associated-doh/ Statement from Mozilla on future deployment plans: https://mailarchive.ietf.org/arch/msg/doh/po6GCAJ52BAKuyL-dZiU91v6hLw Also a statement from Google Chrome on their DoH plans: https://mailarchive.ietf.org/arch/msg/dnsop/GE8v2Yz6zsl28clDvlshGh3rYlc Side meeting on \u0026lsquo;DoH/DoT deployment models and centralisation of DNS services\u0026rsquo; produced much discussion if no conclusions or concrete actions\u0026hellip;. DPRIVE WG discussed the Future requirements, The DNS Privacy Operator BCP, DNS Privacy Application policy, Authentication of Authoritative servers and Bootstrapping mechanisms! The Stubby chocolatey package is now accepted and has the name stubby (thanks to the chocolatey folks - the previous stubby package was renamed!). A trio of drafts discussing DoH deployment issues causing much discussion on the IETF DOH/DPRIVE/DNSOP mailing lists: https://datatracker.ietf.org/doc/draft-livingood-doh-implementation-risks-issues/ https://datatracker.ietf.org/doc/draft-reid-doh-operator/ https://datatracker.ietf.org/doc/draft-bertola-bcp-doh-clients/ Nice intro to DNS Privacy from ISOC Work has started on a chocolatey package for Stubby: https://chocolatey.org/packages/stubby-dns/0.2.5.0 It is submitted and waiting for moderation (the name \u0026lsquo;stubby\u0026rsquo; was already taken!) New Windows Installer for Stubby available (v0.2.5 stubby/v1.5.1 getdns/V1.1.1b OpenSSL). There have been changes to versioning and file installation. Please see the release notes at Windows Installer for Stubby. February 2019 Write up by Bert Hubert giving a good overview of the FOSDEM DNS privacy panel discussions New Windows Installer for Stubby available (v0.2.5 stubby/v1.5.1 getdns/V1.1.1a OpenSSL) Lots of action at FOSDEM surrounding DoH: DNS Privacy Panel with Bert Hubert, Daniel Stenberg and Stéphane Bortzmeyer The DoH Dilemma by Vittorio Bertola DNS over HTTPS - the good, the bad and the ugly by Daniel Stenberg January 2019 Cloudflare and Facebook announce a pilot of ADoT (Authoritativd DNS-over-TLS): DNS over TLS: Encrypting DNS end-to-end More details on support for Stubby in Asuswrt-Merlin Adguard servers added to the DNS Privacy Public Resolvers page. Google launch a DoT service! Credentials are added to Stubby in the 0.2.5 release. Some nice articles by Fernando Gont of ISOC on DoH support in Firefox and Issues with DoT in systemd Unbound version 1.8.3 now supports EDNS(0) Keepalive and TCP connection management Nov 2018 A write up of our most recent Benchmarking work is now available: Follow-up Performance Measurements (Q4 2108) Interesting APNIC blog on \u0026lsquo;Opinion: consolidation, centralization, and the Internet architecture\u0026rsquo; by Jari Arkko Privacy advocate Senator Wyden urges DHS to adopt encrypted DNS Interesting work on DoH monitoring by the HPRC group at the IETF 103 Hackathon October 2018 DoH becomes a RFC: RFC8484 - \u0026lsquo;DNS Queries over HTTPS (DoH)\u0026rsquo; White paper at PETS on traffic analysis of DoH traffic: \u0026lsquo;DNS Privacy not so private: the traffic analysis perspective\u0026rsquo; Recent talks on DoT/DoH: OARC 29: Where will encrypted DNS transports push DNS operators?- Slides, Video OARC 29: Operational experience for DNS over HTTPS (DoH) and DNS over TLS (DoT)- Slides, Video RIPE 77: It\u0026rsquo;s DNS Jim, But Not as We Know It - Slides, Video RIPE 77 DNS WG: DNS Privacy measurements (Benchmarking DoT) - Slides, Video RIPE 77 BCOP TF: Implications of DNS over anything but UDP - Slides, Video Thanks to Jonathan Underwood for all his work on Stubby in OpenWRT!\nChrome is working on exposing DoH via a user configuration option with a drop down list and user defined option.\nQuad9 announce support for DoH!\nMore dual DoT \u0026amp; DoH servers thanks to DNS Warden!\nSept 2018 Video of a UKNOF presentation on considerations for operators of encrypted DNS. More testing of Firefox+Cloudflare in Firefox Beta, but also no clear statement on future plans. Adding CleanBrowsing and Tenta servers to the Test Servers page. New draft proposing a way to (insecurely) discover a DoH server on your local network. Great blog by Bert Hubert of PowerDNS on using third party DNS providers. Aug 2018 Firefox announces the results of its DoH experiment but still no work on the future default config options. Thanks to john9527 for stubby support in his Asuswrt-Merlin LTS fork. And Firefox nightly now has a UI for configuration of the DoH server The awesome folks at PowerDNS have an experimental DoH service and are working to add DoH to dnsdist - details in this mail post. Android Pie 9 includes Opportunistic DNS-over-TLS - woot! I-D draft-dickinson-dprive-bcp-op has been adopted by the DPRIVE WG Many thanks to BlahDNS for setting up a DNS-over-TLS service. Servers in both Germany and Japan! Jul 2018 Lots of interesting discussion at IETF 102 on DRIU (DNS Resolver Identification and Use) and \u0026lsquo;Resolverless DNS\u0026rsquo; Centr interview \u0026ldquo;The DNS community brought DNS over HTTPS on itself\u0026rdquo; Great work at the IETF 102 Hackathon on Oblivious DNS, DoT for recursive to authoritative and DoH! Talk from the ICANN DNS Symposium on \u0026lsquo;Where\u0026rsquo;s my DNS?\u0026rsquo; (video)- questions about current and future DNS resolution on end user devices including the current status of DoH. Many thanks to Fondation RESTENA (the NREN for Luxembourg and the registry for the .lu ccTLD) for setting up a DNS-over-TLS privacy server! Jun 2018 Great news - the latest systemd-resolvd release now supports DNS-over-TLS! Interesting work by the folks at Bromite (a privacy focused fork of Chromium that runs on Android). They just enabled the Chromium DoH implementation by exposing configure options (via chrome://flags). See this user guide. Oh, and they do a neat fingerprint detection page to see what your browser sends about you in HTTP headers! Awesome tutorial by linuxbabe.com about using Stubby on Ubuntu Desktop! The DoH draft is in WGLC and is getting significant discussion! The amazing folks at dnsdist are working on implementing DoH and finding important issues with the draft Mozilla have been blogging about their plans for using DoH Here\u0026rsquo;s the details of how it works and how to configure it Heres a blog in their general strategy May 2018 DPRIVE WG at IETF just re-chartered to cover adding confidentiality to recursive to authoritative exchanges. Interesting presentations from the DNS WG @ RIPE 76 Measurements on DNS Privacy (DNS-over-TCP and TLS benchmarking) High Performance DNS-over-TCP A Survey on DNS Privacy Deploying DNS-over-TLS at RIPE BCOP WG - DNS Privacy PCP Dude, where\u0026rsquo;s my DNS? (subtitle \u0026lsquo;DNS-over-HTTPS is coming!\u0026rsquo;) The Stubby Windows installer and macOS GUI App are both updated to use the getdns 1.4.2rc1 and stubby 0.2.3rc1 releases. Unbound 1.7.1 now supports authentication of DNS-over-TLS using PKIX certificates! April 2018 Thanks to Matthew Vance for a docker image combining Stubby and Unbound. Android announcement about the DNS-over-TLS support in Android P Developer preview. We are excited about the new proposal for for Oblivious DNS to hide queries from resolver operators Cloudflare now running an open recursive resolver with DNS-over-TLS and DNS-over-HTTPS! Details on the Test Servers page. The latest release of dnsdist includes support for DNS-over-TLS - thanks PowerDNS folks! RFC8310 is now published: Usage Profiles for DNS over TLS and DNS over DTLS Write up of the IETF101 Hackathon work on DoH. March 2018 First version of Recommendations for DNS Privacy Operators is now published as a IETF draft for review. Videos from the DNS Privacy Workshop 2018 are now available on You Tube on the DNS Privacy Project Channel ISC announce the next version of BIND 9 will include QNAME minimisation Also, 3 of the dnsovertls(N).sinodun.com servers are running BIND 9.12 and are now padding responses! February 2018 Live traffic for a subset of Test servers now available Interactive map of the DNS Privacy test server locations now available Another new test server using Knot resolver - thanks the folks at dns.neutopia.org Nice talks at FOSDEM yesterday from Stephane Bortzmeyer on DNS Privacy and Willem Toorop on Stub resolvers The getdns and stubby packages are now available in LEDE OpenWRT! Latest release of Knot Resolver does TLS forwarding upstream! January 2018 We are now using a new and improved getdns based monitoring plugin for our Test Server Monitoring dashboard which can test more server capabilities! Two more Test servers now listen on port 443: dnsovertls.sinodun.com and dnsovertls1.sinodun.com Thanks to the Knot Resolver folks for quick fixes to some issues with DNS-over-TLS support - the latest release (1.5.1) seems much more stable! We note that dnscrypt.org is now re-directed to this site due to changes in the DNSCrypt project status We also have additional documentation on automating certificate renewal December 2017 Check out the interesting privacy work and products coming out of the Tenta project - in particular their Tenta browser, open source DNS resolver and comparison of DNS-over-TLS vs DNSCrypt! 2 new test servers: dnsovertls3.sinodun.comwhich supports TLS 1.3 and TLS 1.2 (thanks again to Surfnet for hosting)! Version 1.3.0 of getdns (to be release Dec 21st) will support TLS 1.3 when linked against OpenSSL 1.1.1, so build stubby against that to that if you want to test out TLS 1.3! dns.bitgeek.in based in India - many thanks Sairam Kunala! Windows Installer is updated to use the getdns 1.2.1rc-1 and Stubby 0.2.0 releases! We now have an alpha release of a prototype StubbyManager GUI for macOS. This is a work in progress! Quad9 is now added to the Test servers pages November 2017 Excellent blog post by Stephane Bortzmeyer about the new Quad9 service. (Note that Quad9 have not themselves announced official DNS-over-TLS support) Also a blog post from Alex Band on configuring Stubby with Quad9. Work at the IETF Hackathon on DANE verification of DNS-over-TLS servers. Congrats to the DNS team who won overall best contribution! Check out a new docker image providing Stubby using Quad9 October 2017 We have three new test servers added during October - thanks to Lars de Bruin and Gerold Krötlinger! The first release of a Windows installer for the Stubby CLI tool is announced. Please test! (A GUI is on the way\u0026hellip;..) The DNS Privacy Workshop will again be co-located with NDSS in San Diego - February 2018. We have a new DNS Privacy server in South America - Thank you NIC Chile! We talked at OARC 27 about DNS Privacy clients. You tube video available. September 2017 Jan Zorz has written an excellent article about his experience trying to set up DNS Privacy. We got lots of useful feedback from him and are working on the issues he found! Thanks Jan. August 2017 We are very pleased to announce that the OTF is now generously funding work by dnsprivacy.net! We are pleased to announce that there is now an official Homebrew formula for Stubby! Stubby now has its own source code repository. July 2017 The IETF EDU Privacy Tutorial is happening again at IETF 99! Slides are here: DNS Privacy Tutorial. We have a new DNS Privacy server in Asia!! See Experimental DNS-over-TLS Servers We are talking on 6th July about getdns, Stubby and DNS Privacy at AFNIC JCSA! Here is our presentation from RMLL! June 2017 NEW! We now have live monitoring of the Experimental DNS Privacy servers A short video on our work at the IETF Hackathons is now available! We have several new Experimental DNS-over-TLS servers now The DNS Privacy Tutorial is going to be given again at IETF 99 in Prague May 2017 Here\u0026rsquo;s a presentation on DNS-over-QUIC from OARC (slides, video - got to 8:04 hrs in) Here\u0026rsquo;s our presentations on dnsprivacy.net at OARC (slides, video - go to 6:45 hrs in) and RIPE (slides, video) The dnsprivacy.org website content has now been migrated to its own server after being hosted on portal.sinodun.com. April 2017 New Internet Draft on DNS in dedicated QUIC Connections and lots of interesting drafts around DNS over HTTP getting discussion Latest 1.1.0 release of getdns includes Stubby! The DNS Privacy team is highlighted in the IETF Hackathon Videos We\u0026rsquo;ll be talking at both the RMLL conference (5th July) and at JCSA in Paris (6th July) about DNS Privacy We are proud to add Salesforce as supporters of the DNS Privacy project! March 2017 Great work at the IETF 98 Hackathon on DNS Privacy. In particular see Stephane Borztmeyer\u0026rsquo;s blog on his DNS-over-TLS monitoring plug-in. Proceedings from the NDSS DNS Privacy workshop are available here. Thanks to Matthew Ford from ISOC for a great write up of the workshop. We\u0026rsquo;ll be talking at OARC about dnsprivacy.net February 2017 We are very pleased to announce a new donation from NLnet Foundation to support work on Stubby. Thank you for your generous support!! Preliminary agenda published for NDSS DNS Privacy Workshop (26th Feb, San Diego) DNS Privacy will be a topic at the IETF 98 Hackathon - please come along! January 2017 Planning under way for the NDSS DNS Privacy workshop on 26th February in San Diego https://datatracker.ietf.org/doc/draft-ietf-dprive-dtls-and-tls-profiles/ has cleared WGLC 1.0.0 release of getdns (which supports DNS-over-TLS) Knot resolver 1.2.0 released with improved DNS-over-TLS support Warren Kumari has provided a Docker container for easy deployment of a DNS-over-TLS server! December 2016 Improved usability for Stubby planned for the 1.1.0-alpha3 release The content of this site is now available via the dnsprivacy.org site. CoreDNS now offers DNS-over-HTTPS (as well as DNS-over-TLS). Also see dingo if interested in DNS-over-HTTPS clients. November 2016 IETF 97 EDU team held a DNS Privacy Tutorial, which got coverage in both Heise and two articles in The Register: The_Register_22Nov, The_Register_6Dec More work at the Hackathon on Knot Resolver DNS Privacy implementation, TCP support in BIND and Stubby. A further DNS Privacy test server made available thanks to dkg. DPRIVE working group discussed a possible re-charter to focus work on the Resolver to Authoritative problem. DNS-over- HTTP(S) BOF held October 2016 2 more test DNS Privacy resolvers made available (Thanks to Surfnet for resources!) getdns version 1.1.02-alpha released with a prototype implementation of Stubby - a DNS Privacy stub resolver https://datatracker.ietf.org/doc/draft-ietf-dprive-dtls-and-tls-profiles/ moved into Working Group Last Call https://datatracker.ietf.org/doc/draft-mayrhofer-dprive-padding-profile/ was published to propose specific policies for padding DNS packets https://datatracker.ietf.org/doc/draft-ietf-dnssd-privacy/ adopted by the DNS-SD working group September 2016 https://datatracker.ietf.org/doc/draft-ietf-dprive-dnsodtls/ passed WGLC with status \u0026lsquo;Experimental\u0026rsquo; and was submitted to IESG for review August 2016 WGLC starts for https://datatracker.ietf.org/doc/draft-ietf-dprive-dnsodtls/ July 2016 https://datatracker.ietf.org/doc/draft-bortzmeyer-dprive-step-2/ was published as a first step in describing the Resolver to Authoritative problem June 2016 OARC made a test DNS Privacy server available - many thanks! May 2016 Presentation in the RIPE DNS working group on experimental deployments of DNS Privacy servers. RFC7858 Published: Specification for DNS over Transport Layer Security (TLS) April 2016 Work at the IETF Hackathon in Buenos Aires to start implementing TLS in Knot resolver March 2016 getdns 1.0.0b1 release! RFC7816 Published: DNS Query Name Minimisation to Improve Privacy February 2016 EDNS0 Keepalive draft approved for publication as RFC7828 January 2016 5966bis draft approved for publication as RFC7766 Authentication and (D)TLS Profile for DNS-over-TLS and DNS-over-DTLS draft adopted by DPRIVE Testing of FreeBSD implementation of TCP Fast Open. Reported bug in linux client implementation of TFO (now fixed) and made feature request to OpenSSL to support client side TFO. Started work on Unbound patch to support TFO on Linux, FreeBSD and OS X. December 2015 Produced first version of Authentication and (D)TLS Profile for DNS-over-TLS and DNS-over-DTLS draft for submission to DPRIVE working group Client side EDNS0 keepalive option implemented in getdns SPKI pinset TLS authentication available in getdns November 2105 Attended IETF 94. Participated in Hackathon including getdns implementation of EDNS0 Padding option Last call review of DNS-over-TLS Agreed to start work on combined draft for (D)TLS Authentication mechanisms October 2015 Attended OARC Fall Workshop. Presentationed onUsing TLS for DNS privacy in practice. Attended ICANN in Dublin, presented on DNSSEC for Legacy applications including discussing DNS privacy features of getdns. August 2015 Addition of TLS authentication using hostname to getdns July 2015 IETF 93 Work on getnds TLS authentication during Hackathon Working group presentations on 59966-bis draft and https://tools.ietf.org/html/draft-ietf-dnsop-edns-tcp-keepalive-02 0.3 release of getdns including New transport list options allowing user to flexibly specify an ordered list of accepted transport options from TLS, STARTTLS, TCP, UDP Ability to configure idle timeout associated with TCP connections May 2015 0.2 release of getdns including STARTTLS April 2015 Release of version 0.1.8 of getdns including TLS and TLS with fallback to TCP March 2015 Work started in getdns to implement dns-over-tls - Demo given at IETF92 in Dallas of proof-of-concept code. Publication of updated set of patches in the dns-over-tls repository Publication of https://tools.ietf.org/html/draft-ietf-dnsop-5966bis-01 January 2015 Changed to using DNS-over-TLS instead of T-DNS Extend LDNS and NSD patches to include options to use the TO bit (for experimental inter-op testing) Publish LDNS code into repository for review getdns work put on hold, instead start work on Unbound server patch November 2014 Presenting at IETF 91 Started work on T-DNS in getdns October 2014 Implementation of TCP Fast open support (linux only) in getdn for stub mode in 0.1.5 release. Testing of 0.1.5 getdns codebase which implements TCP pipelining. POC implementation of TCP Fast Open in ldns, Unbound and NSD. Patch released to implement STARTTLS in NSD. Released patch to ldns for connection re-use. September 2014 Continued helping to implement switch to ldns for stub mode in getdns. Basic support for synchronous API implemented and per query namespaces also supported. (Note DNSSEC stub validation is still done by unbound at this point\u0026hellip;.) Creating patch for ldns/drill to support connection reuse for TCP. Using this from synchronous stub mode in getdns to demonstrate connection re-use. Work on TCP related drafts August 2014 Working on getnds Added a new test to verify which transport queries are actually sent over Helping to implement the switch to ldns for stub mode Working on support for pipelining of TCP queries July 2014 Attended IETF 90 in Toronto and gave a demo of sending queries from drill to Unbound using T-DNS Started looking at pipelining multiple queries from drill to Unbound Extending test framework to test multiple scenarios for drill \u0026lt;-\u0026gt; Unbound Finished patch to drill to add extra options: -l will send a single query over TLS -L will send a single query over TLS after negotiating an upgrade using a STARTTLS/CH/TXT query Finished patch to Unbound to support \u0026lsquo;upgrade_tls\u0026rsquo; configure option. This enables unbound to receive a a STARTTLS/CH/TXT query, send a STARTTLS/CH/TXT response when configured properly, upgrade to SSL and then receive a query over SSL. June 2014 Started work on Unbound \u0026lt;-\u0026gt; NSD hop Completing implementation in Unbound to get drill \u0026lt;-\u0026gt; Unbound hop working Implemented a patch to drill to support T-DNS for a single DNS query Discussions on the class to be used for the dummy query. The resolver -\u0026gt; authoritative hop might be better implemented with a IN class query. Start work on Unbound - understand current SSL-upstream implementation From Willem: LDNS does not have support for asynchronous operation so in the short term it will probably be used in getdns just in synchronous mode so that the implementation of TDNS can continue. Further work on test framework May 2014 Current getdns stub implementation cannot support sending of CH class queries as it uses libunbound which denies the query and never sends it onwards. Discussed in getnds meeting 19th May that further implementation of T-DNS in getdns will have to wait until libunbound is replaced with ldns for the stub mode. Current understanding is that Willem is going to tackle this in the next few weeks. Identified need to support CH class in getdns for dummy STARTTLS query. Start on implementation of this. This implementation highlighted the need for getdns to gracefully handle refused queries that have no associated data. Created test harness to create a dummy STARTTLS query Agreed that initial implementations will use the dummy CH class query (not the TO bit) Forked getdns. Familiarisation with getdns code base - get it to install and run! Kick off meetings with T-DNS and getdns teams Creation of project issue tracker and wiki site Reading of relevant drafts and documentation - capture any early technical questions "
},
{
	"uri": "http://dnsprivacy.org/project_notes/dns_privacy_services/",
	"title": "DNS Privacy Services",
	"tags": [],
	"description": "",
	"content": "A number of organisations have expressed interest in running experimental public DNS Privacy servers. At the moment this page just attempts to capture the different features/characteristics that a DNS Privacy server can offer in more detail that the overview here: DNS Privacy Implementation Status\nThe intension in future is to document what each service actually offers as it goes live, to allow users to make informed choices about which service they might utilise.\nFeature/Characteristic Relevant RFCs/I-Ds Notes DNS-over-TLS on port 853 (IPv4) RFC7858 DNS-over-TLS on port 853 (IPv6) RFC7858 Compliance with BCP195 RRC7525 In particular, MUST implement TLS 1.2, SHOULD NOT negotiate TLS 1.1\nUse recommended Cipher Suites:\nTLS_DHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_DHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS authentication via SPKI public keys provided securely via an out-of-band mechanism RFC7858,\ndraft-ietf-dprive-dtls-and-tls-profiles Required for Strict Privacy using SPKI pinsets Verifiable certificate/certificate chain RFC7858,\ndraft-ietf-dprive-dtls-and-tls-profiles Required for Strict Privacy using CA Certs Concurrent processing of TCP/TLS queries RFC7766 Improves performance by eliminating head of line blocking at the query level EDNS0 Keepalive RFC7828 Recommended for TLS connection management EDNS0 Client subnet privacy option RFC7871 Allows end users to specify their client subnet should not be sent to an authoritative server in the ENDS0 Client Subnet option EDNS0 padding RFC7830 Obfuscates message size, reduces effectiveness of traffic analysis. TCP Fast Open RFC7413 Data can be sent in the TCP SYN. For TLS the Client Hello can therefore be sent in the SYN reducing latency. QNAME minimisation to Auth Servers RFC7816 Reduce data sent to Authoritative servers, improves end user privacy De-identification of data Data retention policy (if no de-identification) "
},
{
	"uri": "http://dnsprivacy.org/performance_measurements/proposal_for_new_performance_tool/",
	"title": "Proposal for New Performance Tool",
	"tags": [],
	"description": "",
	"content": "Tool requirements High level Support multiple protocols by design including session based protocols. (Initial wish list is UDP, TCP, TLS, HTTPS and QUIC)\nSupport emulating ~30,000 clients on a single server/VM\nSupport configuration to describe client populations e.g.\n10% of clients send at maximum rate the connection can sustain 50% send at X qps and use 2s idle timeout 40% send at Y qps use 10s idle timeout Read query names from a file or autogenerate them based on a simple algorithm\nDetailed statistics on throughput, latency and handshake overhead.\nRobust recovery from TCP/TLS connection failures or packet loss. More detailed General configuration will included (with sensible defaults were applicable) server address server port local address to send from local port to send from Query file OR query name generation algorithm Timeout for query completion Num of time to run through query file OR duration of test run Maximum outstanding queries Limit queries per second sent Num of clients to emulate Socket send/receive buffer size Use EDNS(0)? Set the DO bit? TSIG key to use Transport selection TCP/TLS configuration (for each client population) Override on queries per second sent, query timeout, max outstanding queries, buffer size. Number of queries sent per connection OR connection duration Client \u0026lsquo;idle\u0026rsquo; timeout - how long the client leaves the connection open before re-cycling Delay between subsequent connections EDNS(0) padding TLS configuration (for each client population) TLS version/cipher suites Handshake attributes (TFO, Session resumption, etc.) "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/using_a_tls_proxy/",
	"title": "Using a TLS proxy",
	"tags": [],
	"description": "",
	"content": "How to use a TLS proxy with a DNS nameserver It is of course possible to configure a TLS proxy in front of a DNS nameserver to provide DNS-over-TLS. Example configurations for nginx and haproxy are given here.\nA more comprehensive setup guide using Docker has been provided by Warren Kumari: dprive-nginx-bind (Thanks Warren!)\nLimitations One of the limitations of using a proxy is that without additional work this will normally mean that the client address is not visible to the nameserver, which can cause issues with NAT64, RRL, RPZ etc. There are ways round this using address re-write rules but we don\u0026rsquo;t detail that here. In future a solution like https://datatracker.ietf.org/doc/draft-bellis-dnsop-xpf/ might become standard. Nameserver config To use the following with BIND to offer a TLS service, configure BIND based on the following named.conf snippet\nThis assumes BIND 9.12 which supports response padding (comment that line out if you are using an earlier version) The rncd and logging config is used to capture traffic volume stats - statistics can be dumped periodically with the \u0026lsquo;rndc stats\u0026rsquo; command options { directory \u0026#34;/home/sinodun\u0026#34;; listen-on port 9999 { 127.0.0.1; }; allow-query { 127.0.0.1; }; tcp-clients 4000; statistics-file \u0026#34;/tmp/bind-stats\u0026#34;; dnssec-enable yes; dnssec-validation auto; response-padding { any; } block-size 468; }; Use with the following in named.conf, adjusting the allow list as needed:\nkey \u0026#34;rndc-key\u0026#34; { algorithm hmac-md5; secret \u0026#34;BIGSECRET\u0026#34;; }; controls { inet 127.0.0.1 port 9953 allow { 127.0.0.1; } keys { \u0026#34;rndc-key\u0026#34;; }; }; logging { category default { null; }; category unmatched { null; }; }; nginx.conf user www-data; worker_processes auto; pid /run/nginx.pid; events { worker_connections 1024; # multi_accept on; } stream { upstream dns_tcp_servers { server 127.0.0.1:9999; } server { listen 853 ssl; proxy_pass dns_tcp_servers; ssl_certificate /etc/nginx/lego/certificates/\u0026lt;cert\u0026gt;.crt; ssl_certificate_key /etc/nginx/lego/certificates/\u0026lt;cert\u0026gt;.key; ssl_protocols TLSv1.2; ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384; ssl_session_tickets on; ssl_session_timeout 4h; ssl_handshake_timeout 30s; } } haproxy.cfg global log /dev/log local0 chroot /var/lib/haproxy user haproxy group haproxy maxconn 1024 pidfile /var/run/haproxy.pid nbproc \u0026lt;processes\u0026gt; tune.ssl.default-dh-param 2048 ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384 ssl-default-bind-options force-tlsv12 # Default SSL material locations ca-base /etc/ssl/certs crt-base /etc/ssl/private defaults balance roundrobin timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout check 10s listen dns bind 145.100.185.15:853 ssl crt /etc/haproxy/lego/certificates/\u0026lt;cert\u0026gt;.pem mode tcp server server1 127.0.0.1:9999 For all but lightly loaded systems, you will need to tune the number of processes or threads available to HAProxy. Unlike the nginx configuration above, which specifies an automatic configuration of the number of worker processes, HAProxy needs to have these quantities set by hand. The simplest way is to set configuration item nbproc to an appropriate number; we suggest the number of threads or processes used by the nameserver. For more advanced tuning options, including setting CPU affinity, see the HAProxy documentation or this blog post.\nIf you use HAProxy and have generated your certificates from Let\u0026rsquo;s Encrypt then you need to combine the certificate chain and key into one file using a command similar to:\ncat /etc/letsencrypt/certs/000\u0026lt;N\u0026gt;_chain.pem /etc/letsencrypt/keys/\u0026lt;my_key\u0026gt;.key \u0026gt; /etc/letsencrypt/certs/\u0026lt;cert\u0026gt;.pem "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/stubby_gui_for_macos/",
	"title": "Stubby GUI for macOS",
	"tags": [],
	"description": "",
	"content": "** THIS PROJECT IS NO LONGER MAINTAINED. WORK ON A NEWER STUBBY MANAGER GUI IS IN PROGRESS, SEE Stubby Manager GUI ** An installer package for an alpha release of the StubbyManager GUI App is now available:\nThis is the 0.2.6 of the prototype Stubby GUI. It is still very much a work in progress and has only very basic functionality! It is being released at this stage to gain feedback and review from users. We welcome early testing of this application.\nStubbyManager.pkg\nSHA256 Checksum: 0b9de130ac55e02928a21f334ac5c481b092e6535445a402caa7bb165b0b3dba\nThis will overwrite any existing installation so if you have customised your Stubby configuration (either using the \u0026lsquo;Advanced\u0026rsquo; button or by directly editing the stubby.yml file then make a backup before installing!\nThis version is built with getdns version: 1.5.2 openssl version: 1.1.1b stubby version: 0.2.6 It has only been tested on Sierra and High Sierra.\nUsing the GUI When the App is first opened for the very first time, Stubby is not running at this point. It is helpful at this point to monitor the logs while first setting Stubby up - click the View the log\u0026hellip; button.\nYou will be asked at various times to authorise Stubby with your password - this is needed periodically when changing the setup and configuration.\nStarting the Stubby service Use the buttons in the top section of the dialog to:\nStart the Stubby service. At this point the service is running but the system is not sending queries to Stubby. Test the service. This performs a single query to the Stubby service to make sure it is working. If this works then move on to the next step Using Stubby for DNS queries Check the box that says *Use Stubby DNS and then click Apply. *From this point the system will be using Stubby for all DNS queries, you should start seeing connections opening and closing in the log window as Stubby uses the default servers. With the default configuration (Strict mode) you will see the Stubby Icon in the menu bar change from greyed out to active when you make this change. It therefore indicates that all DNS queries are encrypted. If the configuration is changed to Opportunistic (see below) the icon remains greyed out since some or all queries could be sent in clear text. This will be improved in the next release to better indicate Strict vs Opportunistic mode. Currently the icon is only visible when the App is running (again, to be fixed). Note that Stubby continues to run whilst the App is closed.\nStopping Stubby Stop stop using Stubby, simply click on the Stop button at the top of the dialog. This stops the stubby service and returns the DNS settings to their defaults.\nYou can also restart the service using the Restart button if the logs indicate there is some sort of problem.\nEditing the configuration Users may want to modify the settings by changing the servers or switching to Opportunistic mode (Strict is the default). To do this click the Advanced\u0026hellip; button. This is currently just a text editor view of the stubby.yml configuration file (this will evolve to be more user friendly in future!). A syntax check is performed on the file before it is saved, a more detailed report of syntax problems is also planned.\nFor details on the contents of the file see this page Configuring Stubby.\nAfter updating the configuration the changes must be applied by clicking the Apply button!\nRevert to default If you run into problems changing the configuration (for example the window reports the configuration is not valid), Stubby can be reverted to use the default configuration by:\nclicking the Revert to default button clicking Apply Known Issues Stubby sometimes gives false alerts that there is a problem with the service when laptops wake from sleep.\nOccasionally Stubby gets confused and cannot start or stop the service. A workaround for this is to close StubbyManger and then run the following from a terminal\nsudo launchctl unload /Library/LaunchDaemons/org.getdns.stubby.plist and relaunch StubbyManager app. (You may have to wait 10 minutes until the existing authorization token has expired).\nA standard macOS certificate store is provided in the App directory, so any certificates added locally will not be available to Stubby.\nCode StubbyManager is written in Qt. If you are interested in contributing the code is available here: https://github.com/Sinodun/stubby_manager_gui\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Installation Guides Linux From Source Running as a service on *nix MacOS Homebrew Stubby GUI for macOS Windows installer for Stubby "
},
{
	"uri": "http://dnsprivacy.org/ietf_dns_privacy_tutorial/",
	"title": "IETF DNS Privacy Tutorial",
	"tags": [],
	"description": "",
	"content": "IETF 99 Slides for the EDU DNS Privacy Tutorial, Sunday 16th June 2017:\nIETF_99_EDU_DNS_Privacy.pdf\nYou tube video: DNS Privacy Tutorial IETF 99\nIETF 97 The EDU Team recently held a DNS Privacy Tutorial at IETF 97 in Seoul, South Korea. Links to the slides and a video are below:\nSlides: Internet Privacy - Presented by Daniel Kahn Gillmor\nDNS Privacy - Presented by Sara Dickinson\nYouTube Video: DNS Privacy Tutorial IETF 97\n"
},
{
	"uri": "http://dnsprivacy.org/project_notes/googles_public_dns-over-https/",
	"title": "Google&#39;s Public DNS-Over-HTTPS",
	"tags": [],
	"description": "",
	"content": "On April 1st 2016 Google announced a Public DNS-over-HTTPS service:\nhttps://developers.google.com/speed/public-dns/docs/dns-over-https#introduction\nThe API is only a beta and whilst not based on a standard, any public server that offers encrypted DNS to users is a good thing. But note that there is an active I-D in the general area of DNS-over-HTTP:\nhttps://datatracker.ietf.org/doc/draft-song-dns-wireformat-http/\nOur understanding is that this service was made available as a convenient web interface to test DNS queries, and potentially for use in some lightweight applications. It was simply intended to be a complimentary offering to the work of the DPRIVE working group with regard to DNS Privacy. We took a look at it at the recent IETF Hackathon and starting coding a prototype implementation in getdns just for fun. Here are some things we note:\nThe query API is quite limited: No Msg ID and only one EDNS0 option supported (ECS). For example, the EDNS chain query draft is now approved and future support for this would be nice. For DNSSEC the only option is to trust Google to do the validation, this API does not support validating stubs obtaining DNSSEC records.\nAlso interesting to note that when DNSSEC validation fails, the error comment includes a link to the DNSviz tool to try to figure out the failure!\nThey don\u0026rsquo;t use the 8.8.8.8 IP address directly for the queries, instead they use dns.google.com which resolved to 216.58.208.142 and 2a00:1450:4009:803::200e from the Buenos Aires Hackathon. It is likely this is served by the Google web service cloud which ultimately uses 8.8.8.8 as a back end for the resolution.\nWhen a query is made via the web interface provided at https://dns.google.com it seems that QUIC over IPv6 is always used\nWe also notice that the server will answer do DNS-over-HTTP on port 80. "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/lets_encrypt_certificate_renewal/",
	"title": "Let&#39;s Encrypt Certificate renewal",
	"tags": [],
	"description": "",
	"content": "This page contains some details on how to renew certificates with Let\u0026rsquo;s Encryptusing the same key, which is very helpful in supporting authentication via a SPKI pinset.\nGenerating a Key and Manual Renewal Automated renewal Generating a SPKI for your certificate Many of the current experimental servers are using Let\u0026rsquo;s Encrypt certificates. Using cerbot makes creating an managing certificates easy.\nAs of recently cerbot no longer checks if the certificate is about to expire, but simple gets a new one. Beware when testing since with Let\u0026rsquo;s Encrypt there is a limit of 5 certificates per day\u0026hellip;.\nGenerating a Key and Manual Renewal This assumes that you will use certbot in conjunction with Let\u0026rsquo;s Encrypt and you have an existing key \u0026lt;my_key_file\u0026gt; that was use to sign the previous certificate (or you are generating your first certificate).\nCreate your new CSR from your existing private key using \u0026lsquo;openssl req\u0026rsquo;\nopenssl req -key \u0026lt;my_key_file\u0026gt; -new -out \u0026lt;my_csr_file\u0026gt; Use the certbot interface to renew the cert using the same key, for example using web authenticaiton certbot certonly -d \u0026lt;my_authentication_name\u0026gt; --csr \u0026lt;my_csr_file\u0026gt; --webroot -w /home/website/public or using dns challenge\ncertbot certonly -d \u0026lt;my_authentication_name\u0026gt; --csr \u0026lt;my_csr_file\u0026gt; --preferred-challenges dns --manual For the dns challenge mode, step 2 outputs a TXT file that must be added to the corresponding zone \u0026lt;my_authentication_name\u0026gt; before the certificate can be issued and instructs something like:\nPlease deploy a DNS TXT record under the name _acme-challenge.\u0026lt;my_authentication_domain_name\u0026gt; with the following value: \u0026lt;TXT value\u0026gt; Once this is deployed, Press ENTER to continue Manually add the TXT record and wait until it has propagated e.g. use dig to 8.8.8.8 to obtain the new TXT record. hit ENTER, which should result in a new certificate being issued. Restart the nameserver or proxy to have it use the new certification.\nAutomated renewal There are a number of ways to do this but one common one is to use https://dehydrated.de/ It is nice for automating the renewal workflow, particularly if you want to use the DNS challenge method, rather than web access. We have two examples of this method:\nMethod 1 - based on the workflow at Sinodun and using Knot resolver to sign the DNS zone used for the dns-01 challenge. Method 2 - based on the workflow at NLnet Labs using OpenDNSSEC to sign the DNS zone used for the dns-01 challenge. Generating a SPKI for your certificate Once you have the certificate configured on your server you can generate the SPKI pin if you want to publish this (so clients can configure this for authenticating your server).\nGnuTLS: gnutls-cli --print-cert -p 853 \u0026lt;IP_address\u0026gt; The pin for each certificate is displayed at the end of the output line beginning \u0026rsquo; Certificate[0] info:' OpenSSL: echo | openssl s_client -connect \u0026#39;[2001:67c:27e4::35]:853\u0026#39; 2\u0026gt;/dev/null \\ | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | \\ openssl dgst -sha256 -binary | openssl enc -base64 Or use this handy website https://report-uri.io/home/pubkey_hash "
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/installation/windows_installer_for_stubby/",
	"title": "Windows installer for Stubby",
	"tags": [],
	"description": "",
	"content": " Overview Installation Latest stable msi and zip installers: Latest development msi and zip installers: Release notes Version 0.4.4-rc1 Version 0.4.0-a2 Version 0.4.0-a1 Version 0.3.0 Version 0.2.6 Version 0.2.5 Installer contents Configuration Run Stubby Test Stubby Modify your upstream resolvers Modify your upstream resolvers (Windows 7) Install Stubby as Windows service Create a Scheduled Task Known Issues Manual update of system revolvers on Windows Opportunistic mode Overview Stubby can be installed\neither via the install/zip packages available on this page or by using chocolatey: https://chocolatey.org/packages/stubby/ The 0.4.x releases of the windows installers include both the command line tool described below and also an experimental release of a Graphical Interface to manage Stubby.\nStubby has been tested on Windows 10 and should work on Windows 8. There is limited support for Windows 7 - see below. User testing reports, bug reports and patches/pull requests are all welcomed via the Stubby github issue tracker!\nInstallation The installer currently overwrites all existing files so if you have made changes to the stubby.yml then you should create a backup of this file before upgrading!\nLatest stable msi and zip installers: Latest stable installer is version 0.3.0.6 built from:\ngetdns version: 1.6.0 openssl version: 1.0.2s stubby version: 0.3.0 Description File SHA256 Checksum 64bit Windows Installer stubby-0.3.0.6-x64.msi\nabc0c103d56d620ef942b48d7c3c2713638587a397baecb003644c82816a0249 32bit Windows Installer stubby-0.3.0.6-x86.msi a1afae37090c622304d4ea8ad593f277fed50b5bd2281032b4bb9522c1097e2e Zip file with 64bit install stubby-0.3.0.6-x64.zip\n9e6b1480bc9690d8280a921499273d85c59bc7097ff7203efc2a7ba7351df2f7 Zip file with 32bit install stubby-0.3.0.6-x86.zip\ndb742031551af20d611b011dea7827a6611281d28e8b3dcada7a8cc92fa4a0bb Latest chocolatey package is available here: https://chocolatey.org/packages/stubby/0.3.0.6\nLatest development msi and zip installers: Latest development installer is version 0.4.4-rc1 built from:\ngetdns version: 1.7.4-rc1 openssl version: 1.1.1g stubby version: 0.4.4-rc1 Description File SHA256 Checksum 64bit Windows Installer stubby-0.4.4.5-x64.msi\n1af9efc289df598930253d9cb325fb72b6630531396dcb1b45f64826ea659851\n32bit Windows Installer stubby-0.4.4.5-x86.msi\n58eab8f11ff79eb1479754abd363716f84fcb919927b7ac452634a4fcd902e10\nZip file with 64bit install stubby-0.4.4.5-x64.zip\nb7c582ef49b2dac75bc1a4e17e0b985d59b186da49cf56282922bd41a48a899b\nZip file with 32bit install stubby-0.4.4.5-x86.zip\na6f575f89fab6f213bb6fa639465ef6575f302e5c621b9c48be66f627e9c17d0\nRelease notes Version 0.4.4-rc1 This update is built on top of the latest getdns/stubby releases (1.7.3 and 0.4.3) with patches to fix issues with the Windows build. As such it is label as an rc1 release for the 0.4.4 release. Note that since the 0.3.0 version, the Sinodun dnsovertls servers have been decommissioned and removed from the default config file. Users who preserve their config over upgrade should manually remove those servers from the config. Version 0.4.0-a2 Significant updates to the Stubby Manager GUI - see here for details. Version 0.4.0-a1 The msi and zip files now includes an alpha release of Stubby Manager GUI see this page for details. This installs alongside the existing install and should not interfere with existing installs. (Chocolatey package does not contain this yet.) The alpha is not feature complete and should be used with care, see Stubby Manager GUI. Stubby can now be installed as a Windows service, see this README.md for details. Version 0.3.0 Update to use Stubby 0.3.0. This release is built with the Visual Studio toolchain. Previous releases were built with MinGW. Version 0.2.6 Update to use Stubby 0.2.6 Version 0.2.5 Previous versions of the installer were numbered 0.0.1 to 0.0.7. From this release onward we are adopting a new policy. Installer releases will have a 4 component version a.b.c.d. a.b.c gives the Stubby version. d indicates the installer package revision, starting at 0 for the first packaging of a given Stubby version.\nThe 0.2.5.0 release now provides a 32bit install as well as a 64bit install.\nOn a 64bit Windows installation, a 32bit install will place files in C:\\Program Files (x86)\\Stubby. All other installs place files in C:\\Program Files\\Stubby. This release corrects the default configuration file location to C:\\Program Files\\Stubby\\stubby.yml. This path no longer needs to be specified on the command line.\nstubby.bat has been updated to look for the configuration file in the same directory as the Stubby executable.\nInstaller contents These contain the following files by the installer.\nThe 0.3.0.6 release and later provides a 32bit install as well as a 64bit install. On a 64bit Windows installation, a 32bit install will place files in C:\\Program Files (x86)\\Stubby. All other installs place files in C:\\Program Files\\Stubby.\nREADME.txt - containing these instructions stubby.exe - binary stubby.yml - configuration file getdns_query.exe - tool for testing stubby getdns_server_mon.exe - tool for probing servers Powershell scripts for modifying system resolvers: stubby_setdns_windows.ps1 stubby_resetdns_windows.ps1 Windows 7 versions of Powershell scripts (see below) stubby_setdns_windows7.ps1 stubby_resetdns_windows7.ps1 Scripts to enable Stubby to be configured as a Scheduled Task stubby.xml stubby.bat Additional files required for the Stubby Manager GUI Configuration It is recommended to use the default configuration file provided which will use \u0026lsquo;Strict\u0026rsquo; privacy mode and spread the DNS queries among several of the current DNS Privacy test servers. Note that this file contains both IPv4 and IPv6 addresses. It installed in \u0026ldquo;C:\\Program Files\\Stubby\\stubby.yml\u0026rdquo;\nMore information on how to customise the configuration can be found here.\nRun Stubby Simply invoke Stubby on the command line from a command prompt window (To get a command prompt go to the Windows search box and type \u0026lsquo;cmd\u0026rsquo; and then choose the \u0026lsquo;Command prompt\u0026rsquo; option)\n\u0026#34;C:\\Program Files\\Stubby\\stubby.exe\u0026#34; -l The -l flag enables full logging. Alternatively a specific logging level can be controlled by using the -v flag (run \u0026rsquo;\u0026quot;C:\\Program Files\\Stubby\\stubby.exe\u0026quot; - h\u0026rsquo; for details of available levels).\nWe are working on support for running Stubby as a service on Windows 10. Instructions for setting up a Scheduled task are below.\nTest Stubby A quick test can be done by opening a separate Command prompt window and using getdns_query (or your favourite DNS tool) on the loopback address:\n\u0026#34;C:\\Program Files\\Stubby\\getdns_query\u0026#34; -s @127.0.0.1 www.example.com You should see a status of GETDNS_RESPSTATUS_GOOD and and rcode of GETDNS_RCODE_NOERROR in the getdns_query output. You should also see a connection being made in the stubby logs.\nModify your upstream resolvers Once this change is made all your DNS queries will be re-directed to Stubby and sent over TLS! (You may need to restart some applications to have them pick up the network settings).\nFor Stubby to re-send outgoing DNS queries over TLS the recursive resolvers configured on your machine must be changed to send all the local queries to the loopback interface on which Stubby is listening.\nIn most cases your system will use the \u0026lsquo;default\u0026rsquo; DNS servers that are provided by whatever network you are on at the time. Using the two Powershell comands will be all you need to switch back and forth from Stubby to the default DNS settings for the network you are on. (The scripts don\u0026rsquo;t store any DNS config information because it can change dynamically). If you want to double check what servers you are using right now you can use then follow the instructions below to inspect your system settings. If you have reason to think your system uses specific servers on all networks it might be useful to note your existing default nameservers before making this change so you can use the same instructions to reset them!\nTo set your nameservers to use Stubby\nFrom Windows search box type \u0026lsquo;cmd\u0026rsquo; and on the \u0026lsquo;Command prompt\u0026rsquo; option that appears right click and select \u0026lsquo;run as Administrator\u0026rsquo;\nIn the command prompt window that appears type the following to switch the system DNS resolvers to use Stubby.\nPowerShell -ExecutionPolicy bypass -file \u0026#34;C:\\Program Files\\Stubby\\stubby_setdns_windows.ps1\u0026#34; You can monitor the DNS traffic using Wireshark watching on port 853.\nIf you encounter problems or want to turn Stubby off for any reason then reverse this change to restore the default network settings (no DNS Privacy) by running\nPowerShell -ExecutionPolicy bypass -file \u0026#34;C:\\Program Files\\Stubby\\stubby_resetdns_windows.ps1 Modify your upstream resolvers (Windows 7) Follow the procedure above, but use the scripts:\nC:\\Program Files\\Stubby\\stubby_setdns_windows7.ps1 and C:\\Program Files\\Stubby\\stubby_resetdns_windows7.ps1 WARNING: These scripts can only update DNS servers on the IPv4 service. IPv6 will still use the default DNS servers, sending queries in clear text so one option is to disable IPv6, the other is to manually update the IPv6 addessses (see below).\nInstall Stubby as Windows service See this README.md for details.\nCreate a Scheduled Task If you want Stubby to always start when you boot your system, you can create a Scheduled task for this. A template for the task is provided.\nTo create the task just run\nschtasks /create /tn Stubby /XML \u0026#34;C:\\Program Files\\Stubby\\stubby.xml\u0026#34; /RU \u0026lt;you_user_name\u0026gt; Known Issues We are aware of occasional issues when Windows sleeps and resumes when stubby must be restarted to work correctly. If you get an error when trying to run Stubby that includes the words \u0026ldquo;Could not bind on given address\u0026rdquo; then retry the command from an \u0026lsquo;Administrator\u0026rsquo; Command prompt window The \u0026lsquo;-h\u0026rsquo; output of stubby.exe shows the wrong path for the installed configuration file. An issue has been opened for this. The installer currently overwrites the stubby.yml file so if changes have been made a backup should be created before upgrading Manual update of system revolvers on Windows If you need to manually inspect or change your system revolvers on Windows through the GUI then do the following:\nOpen the Control Panel Choose \u0026lsquo;Network and Internet\u0026rsquo; Choose \u0026lsquo;View network status and tasks\u0026rsquo; under \u0026lsquo;Network and Sharing Center\u0026rsquo; Choose \u0026lsquo;Change adapter settings\u0026rsquo; from the left hand menu Then choose your interface - most likely either \u0026lsquo;Wi-fi\u0026rsquo; or \u0026lsquo;Ethernet\u0026rsquo; In the dialog that appears, click on the \u0026lsquo;Properties\u0026rsquo; button at the bottom In the list that appears double click on \u0026lsquo;Internet Protocol Version 4 (TCP/IPv4)\u0026rsquo; You can toggle your DNS between using the default DNS servers provided by the network you are on and setting specific servers using the botton radio buttons on this page Be sure to press OK and then Close to apply the settings. Repeat step 7 for \u0026lsquo;Internet Protocol Version 6 (TCP/IPv6)\u0026rsquo; if you have IPv6 enabled Opportunistic mode If you have changed the default config in the stubby.yml file and are running in Opportunistic mode then you may want to add an alternative DNS server in here for robustness. However DNS queries sent to this server will be sent clear text over UDP/TCP, so this is NOT recommended for Strict mode unless required for bootstrapping (e.g. in a corporate network).\n"
},
{
	"uri": "http://dnsprivacy.org/public_resolvers/",
	"title": "Public Resolvers",
	"tags": [],
	"description": "",
	"content": "Public Resolvers The following are services that have been announced by large organisations - they support DNS Privacy on anycast networks. DNS-over-TLS (DoT) DNS-over-HTTPS (DoH) DNS-over-QUIC (DoQ) A comparison of the privacy polices of some resolvers is provided here.\nA list of experimental DoT test servers (including those run by the Stubby developers) is available on the Test Servers page.\nDNS-over-TLS (DoT) Details are provided in the Stubby config file for users who want to enable them.\nHosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) Notes Quad9 'secure' 9.9.9.9\n2620:fe::fe\n853 dns.quad9.net Quad9 do NOT publish or recommend use of SPKI pins with their servers. See https://quad9.net and their FAQ for details of privacy, logging and filtering policies on the main and alternative addresses(1).\nUDP and TCP service are also available on these addresses.\nQuad9 'insecure' 9.9.9.10\n2620:fe::10\n853 dns.quad9.net Cloudflare 1.1.1.1 or 1.0.0.1\n2606:4700:4700::1111 or 2606:4700:4700::1001\n853 cloudflare-dns.com Cloudflare do NOT publish or recommend use of SPKI pins with their servers. https://blog.cloudflare.com/announcing-1111/\nhttps://blog.cloudflare.com/dns-resolver-1-1-1-1/\nPRIVACY POLICY: https://www.cloudflare.com/privacypolicy/ (section of interest Public DNS Resolver Users)\nAnd also see https://labs.apnic.net/?p=1127 for details of the APNIC/Cloudflare agreement as mentioned on the Register.\nUDP and TCP service are also available on these addresses. DNS-over-HTTPS is also available!\nNOTE: To use this service by name only (i.e resolve the IP from the name) use 1dot1dot1dot1.cloudflare-dns.com.\nGoogle 8.8.8.8 or 8.8.4.4 2001:4860:4860::8888 or 2001:4860:4860::8844\n853 dns.google Not published Google DoT service\nGoogle Privacy policy\nDNS4EU Various see the DSN4EU website\n853 Various see the DSN4EU website Not published Privacy policy\nDNS4EU Public Service is dedicated to the citizens of the European Union. This service provides different end points with different filters (Protective, Child protective, Ad blocking) so visit the website to select the end point with the filter you prefer. NOTE: it also does DoH.\nCleanBrowsing Various, see the CleanBrowsing website 853 Various, see the CleanBrowsing website Not published https://cleanbrowsing.org/privacy\nThis service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer. NOTE: also does DoH.\nAdguard Various, see the AdGuard website 853 Various, see the AdGuard website Not published https://adguard.com/en/adguard-dns/setup.html#instruction\nhttps://adguard.com/en/privacy.html\nThis service provides different end points with different filters (default, family) so visit the website to select the end point with the filter you prefer.\nControl D Various, see Control D website 853 Various, see Control D website Not published Control D website\nThis service provides different end points with different filters (default, family) so visit the website to select the end point with the filter you prefer.\nWikimedia See Wikimedia DNS website 853 See Wikimedia DNS website Not published See Wikimedia DNS website\nWikimedia DNS (formerly called Wikidough), is a caching, recursive, public DNS-over-HTTPS (DoH) and DNS-over-TLS (DoT) resolver service that is run and managed by the Site Reliability Engineering (Traffic) team at the Foundation.\nDNS-over-HTTPS (DoH) For a more up to date list of available of DoH severs you may want to look at https://github.com/curl/curl/wiki/DNS-over-HTTPS#publicly-available-servers\nDetails of a few any cast service and privacy policies:\nHosted by URL Notes Cloudflare https://cloudflare-dns.com/dns-query\nhttps://developers.cloudflare.com/1.1.1.1/dns-over-https/\nPRIVACY POLICY: PRIVACY POLICY: https://www.cloudflare.com/privacypolicy/ (section of interest Public DNS Resolver Users)And also see https://labs.apnic.net/?p=1127 for details of the APNIC/Cloudflare agreement as mentioned on the Register.\nCloudflare https://mozilla.cloudflare-dns.com/dns-query This server is announced as part of the Firefox Nightly shield study.\nIt has a different (stronger) privacy policy than the general Cloudflare DoH server above:\nhttps://developers.cloudflare.com/1.1.1.1/commitment-to-privacy/privacy-policy/firefox/\nGoogle https://dns.google/dns-query RFC8484 (GET and POST)\nhttps://developers.google.com/speed/public-dns/docs/doh/\nQuad9 Various Please see https://www.quad9.net/doh-quad9-dns-servers/ for details DNS4EU Various see the web site DNS4EU Public Service is dedicated to the citizens of the European Union. This service provides different end points with different filters (Protective, Child protective, Ad blocking) so visit the website to select the end point with the filter you prefer. NOTE: it also does DoH. CleanBrowsing Various, see the CleanBrowsing website This service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer. Adguard Various, see this Adguard announcment This service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer. Control D Various, see Control D website This service provides different end points with different filters (security, family, adult) so visit the website to select the end point with the filter you prefer. Wikimedia See Wikimedia DNS website See Wikimedia DNS website\nWikimedia DNS (formerly called Wikidough), is a caching, recursive, public DNS-over-HTTPS (DoH) and DNS-over-TLS (DoT) resolver service that is run and managed by the Site Reliability Engineering (Traffic) team at the Foundation.\nGoogle also run a DoH endpoint at https://dns.google/resolve? using a proprietary JSON API.\nDNS-over-QUIC (DoQ) AdGuard launched the first DoQ public resolver in 2020: https://adguard.com/en/blog/dns-over-quic.html\n"
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/monitoring_privacy_servers/",
	"title": "Monitoring Privacy servers",
	"tags": [],
	"description": "",
	"content": "DNS-over-TLS If you want to monitor the TLS specific or DNS Privacy specific features of a recursive server then there are a couple of options:\nA new tool getdns_server_mon is being developed which will provide output in both human readable and Nagios API compatible form. This tool was included in the 1.4.0 release of getdns. This tool is used on the dnsprivacy.org test server monitoring page. Stephane Bortzmeyer developed a standalone plugin based on getdns which inspired the above tool. His plugin is available here. "
},
{
	"uri": "http://dnsprivacy.org/test_servers/",
	"title": "Test Servers",
	"tags": [],
	"description": "",
	"content": "Test servers Public resolvers Experimental DNS Privacy Recursive Servers DoH servers DoT servers Stubby configuration Servers run by the Stubby developers Other servers Other servers Public resolvers Public Resolvers: Several large organizations operate DNS Privacy Servers - see DNS Privacy Public Resolvers\nDOH servers are also currently listed on that page\nExperimental DNS Privacy Recursive Servers See our Live Monitoring Dashboard for real time service status.\nDoH servers These are currently listed on the DNS Privacy Public Resolvers page and also the list maintained on the curl wiki. For any servers below with the note \u0026lsquo;also does DoH\u0026rsquo; check these pages or the website of the service for the DoH endpoint.\nDoT servers The following servers are experimental DNS-over-TLS servers.\nNote that they are experimental offerings (mainly by individuals/small organisations) with no guarantees on the lifetime of the service, service level provided. The level of logging may also vary (see the individual websites where available) - the information here about logging has not been verified. Also note that the single SPKI pins published here for many of these servers are subject to change (e.g on Certificate renewal) and should be used with care!!\nStubby configuration A YAML configuration file for Stubby containing the main public DNS privacy resolvers and also details of a subset of these test servers is provided with Stubby and can be found here. This file enables only the server operated by the stubby/getdns developers by default, users SHOULD actively choose additional or alternate servers for robustness. Enable any of the other servers by uncommenting the relevant section in the config file.\nServers run by the Stubby developers The dnsovertls*.sinodun.com servers are no longer present in the Stubby config file as of release 0.4.1 and were decommissioned on 9th Sept 2022.\nHosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) TLSA record published Logging Software Notes getdnsapi.net 185.49.141.38\n2a04:b900:0:100::37 853 getdnsapi.net foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q=\nY Traffic volume only Unbound NOTE: This service listens on port 853 and the authentication name `getdnsapi.net` resolves to these addresses getdnsapi.net 185.49.141.37\n2a04:b900:0:100::38 443 getdnsapi.net foxZRnIh9gZpWnl+zEiKa0EJ2rdCGroMWm02gaxSc9Q=\nY Traffic volume only Unbound NOTE: This service listens on port 443 and uses DIFFERENT IP addresses to the service listening on port 443 Other servers Hosted by IP addresses TLS Ports Hostname for TLS\nauthentication Base 64 encoded form of SPKI pin(s) for TLS\nauthentication (RFC7858) TLSA record published Logging Software Notes UncensoredDNS 89.233.43.71 2a01:3a0:53:53::0 853 unicast.censurfridns.dk wikE3jYAA6jQmXYTr/rbHeEPmC78dQwZbQp6WdrseEs=(also see this file for a full set of pins) Y Traffic volume only See https://blog.uncensoreddns.org/ Fondation RESTENA\n(NREN for Luxemburg)\n158.64.1.29\n2001:a18:1::29\n853 dnspub.restena.lu aC/vKm0neSr3uDucVsYO62RPZ4ETWjoI0Gw8uWjGdLg= Traffic volume only dnsdist/Unbound DETAILS UPDATED March 2024. Configured with qname-minimisation, use-caps-for-id, aggressive-nsec, prefetch, harden-below-nxdomain and the newest auth-zone for local root\nzone caching. - Foundation for Applied Privacy 146.255.56.98\n2a01:4f8:c0c:83ed::1 853\n443\ndot1.applied-privacy.net Y Only aggregated logging, no PII unbound DETAILS UPDATED 14th Sep 2020 https://appliedprivacy.net/services/dns/ NOTE: Also does DoH and has an .onion endpoint French Data Network 80.67.169.12 and 80.67.169.40\n2001:910:800::12 and 2001:910:800::40 853\u003c\ndot1.ns0.fdn.fr and ns1.fdn.fr French ISP - https://www.fdn.fr/actions/dns/ keweonDNS 84.16.252.137 or 84.16.252.147\n2a00:c98:4002:1:8::5 or 2a00:c98:4002:2:c::80\n853 dns.keweon.center No logging Aviontex website See keweonDNS - info, facts and what is keweon actually for details of privacy, logging and filtering policies. NOTE: Also does DoH.\nibksturm.synology.me 213.196.191.96 853 ibksturm.synology.me No logging nginx + Knot Resolver https://ibksturm.synology.me NOTE: Also does DoH, DoQ and dnscrypt no filters, opennic root copy dismail.de 159.69.114.157\n2a01:4f8:c17:739a::2 853 fdns2.dismail.de yJYDim2Wb6tbxUB3yA5ElU/FsRZZhyMXye8sXhKEd1w= No logging https://dismail.de/info.html#dns dismail.de 80.241.218.68\n2a02:c205:3001:4558::1 853 fdns1.dismail.de MMi3E2HZr5A5GL+badqe3tzEPCB00+OmApZqJakbqUU= No logging https://dismail.de/info.html#dns NIC Chile\n200.1.123.46\n2001:1398:1:0:200:1:123:46 853 dnsotls.lab.nic.cl pUd9cZpbm9H8ws0tB55m9BXW4TrD4GZfBAB0ppCziBg= Y Yes, for research purposes Unbound Other servers This is a list of other servers we have been made aware that users may want to investigate.\ndns.digitale-gesellschaft.ch dns.switch.ch dot.ffmuc.net https://dns.sb/dot/ https://dns.cmrg.net OpenNIC DNS non-profit and volunteer network, with additionally alternative no-ICANN domains. At the moment the network is made up of just over twenty independent servers, three of which provide DoT. https://servers.opennicproject.org/ ns29.de.dns.opennic.glue ns4.fi.dns.opennic.glue ns4.ru.dns.opennic.glue Tenta. A service of the antivirus company Avast. It supports ICANN and also OpenNIC. https://tenta.com/dns-setup-guides https://mullvad.net/en/help/dns-over-https-and-dns-over-tls "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/best_current_practices/",
	"title": "Best Current Practices",
	"tags": [],
	"description": "",
	"content": "BCP 232 A Best Current Practices document for operators of DNS privacy services had been developed in the IETF. (Thanks to the Open Technology Fund for supporting the work on this by dnspivacy.org)\nThe document is available here: BCP232\nIt includes sections on:\nRecommendations for threat mitigations One the wire (i.e. stub to resolver) Data at rest (e.g. logs of traffic) Data sent upstream (queries and data shared with third parties) Content for a DNS Privacy Policy and Practice Statement A review of existing pseudonymization and anonymization techniques for IP adresses A comparison of the policies and practice of Google PublicDNS, Cloudflare, Quad9 and OpenDNS Some of the research that was done as background for this draft is also published here:\nData minimisation of network traffic Comparison of several policy and practice statements European Resolver Policy Also see the work done by the EDDI in developing the European Resolver Policy which is heavily based on BCP 232.\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_clients/",
	"title": "DNS Privacy Clients",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Clients DOT Operating systems Local forwarders Stubby Unbound Unbound/Stubby combination Knot resolver Bind Mobile Routers Browsers Command line clients getdns LDNS (drill) 1.6.17 kdig DoH Desktop Mobile Browser DoQ Desktop/mobile DOT Operating systems As of release 239 systemd-resolved now supports opportunistic DNS-over-TLS - see the resolved.conf man page. The release notes say:\nsystemd-resolved now supports DNS-over-TLS. It\u0026rsquo;s still turned off by default, use DNSOverTLS=opportunistic to turn it on in resolved.conf. We intend to make this the default as soon as couple of additional techniques for optimizing the initial latency caused by establishing a TLS/TCP connection are implemented.\nHowever see this ISOC article on some issues with this implementation.\nLocal forwarders Stubby Recommended: See the DNS Privacy Daemon - Stubby web page for how to use Stubby as a local DNS Privacy stub resolver on your desktop or laptop!\nUnbound Unbound can be run as a local caching forwarder, configured to use SSL upstream, however it cannot yet send several of the privacy related options (padding, ECS privacy) etc. The 1.7.1 release of Unbound supports authentication of upstream recursive resolvers using an authentication domain name (i.e. PKIX authentication) if a certificate bundle is configured. The 1.13.1 release can re-use upstream connections. An example minimal config is given below.\nNOTE:\nThis uses Cloudflare for simplicity and testing purposes, modify this to the resolver of your choice from e.g. the stubby config file! Update the path to the cert bundle to a locally installed cert.pem file so that connections can be authenticated. The path will depend on your OS and installation. server: directory: \u0026#34;/etc/unbound\u0026#34; username: unbound chroot: \u0026#34;/etc/unbound\u0026#34; # logfile: \u0026#34;/etc/unbound/unbound.log\u0026#34; #uncomment to use logfile. pidfile: \u0026#34;/etc/unbound/unbound.pid\u0026#34; # verbosity: 1 ## uncomment and increase to get more logging. # listen on local host, port 53 interface: 127.0.0.1@53 interface: 0::1@53 prefetch: yes hide-identity: yes hide-version: yes do-not-query-localhost: no # specifiy a path to a local certificate bundle to authenticate connections tls-cert-bundle: \u0026#34;/etc/ssl/cert.pem\u0026#34; forward-zone: name: \u0026#34;.\u0026#34; forward-addr: 1.1.1.1@853#cloudflare-dns.com forward-tls-upstream: yes Unbound/Stubby combination Some user combine Unbound (as a caching proxy with other features such as DNS Blacklisting) and Stubby (as fully featured TLS forwarder).\nMatthew Vance has developed a docker solution that sets this configuration up.\nOr, if you want to set this up yourself, an example config for this is:\nUnbound config\nserver: use-syslog: yes username: \u0026#34;unbound\u0026#34; directory: \u0026#34;/etc/unbound\u0026#34; trust-anchor-file: trusted-key.key root-hints: \u0026#34;/etc/unbound/root.hints\u0026#34; do-not-query-localhost: no forward-zone: name: \u0026#34;.\u0026#34; forward-addr: 127.0.0.1@8053 forward-addr: ::1@8053 Stubby config\nresolution_type: GETDNS_RESOLUTION_STUB dns_transport_list: - GETDNS_TRANSPORT_TLS tls_authentication: GETDNS_AUTHENTICATION_REQUIRED tls_query_padding_blocksize: 256 edns_client_subnet_private : 1 idle_timeout: 10000 listen_addresses: - 127.0.0.1@8053 - 0::1@8053 round_robin_upstreams: 1 upstream_recursive_servers: ... Knot resolver As of the 2.0.0 release knot resolver can also forward queries over TLS!\nBind Bind does not support TLS natively but can be configured to run behind a local TLS proxy such as stunnel.\nLars de Bruin has kindly created a docker image which uses BIND as a caching local resolver with Stubby as a TLS forwarder.\nMobile Platform Status Android Android supports DNS-over-TLS in the Android P Developer Preview. Also see this talkgiven by the Android developers at NDSS DNS Privacy workshop 2018: Video, Slides Quad 9 has an App: Quad9 Connect iOS Work in underway on a Stubby iOS app, however it is currently blocked by an implementation restriction. Cloudflare has an app call 1.1.1.1 - it does DoH by default but will also do DoT but only uses 1.1.1.1 Routers DNSdist is now CPE ready with DoT and DoH support! Set up DNS-over-TLS forwarding on a Turris router OpenWRT (LEDE) Asuswrt-Merlin GitHub Repo: https://github.com/Xentrk/Stubby-Installer-Asuswrt-Merlin Support Forum: https://www.snbforums.com/threads/stubby-installer-asuswrt-merlin.49469/ For information on how the settings were derived at, see the blog post at: https://x3mtek.com/dns-over-tls-with-dnsmasq-and-stubby-on-asuswrt-merlin/ Browsers Tenta is a browser for Android that encrypts DNS queries using DNS-over-TLS\nCommand line clients If you want a DNS Privacy enabled command line tool or a library then choose from one of the following:\ngetdns Website getdns supports multiple features related to DNS privacy including persistent connections, strict and opportunistic privacy profiles and TLS authentication by hostname of SPKI pinset API spec: https://getdnsapi.net/spec.html Source: https://github.com/getdnsapi/getdns See the first few sections on the DNS Privacy Daemon - Stubby page for instructions on how to install and build getdns as a local stub resolver with TLS support from source. API: Use the api directly via C or any of the available language bindings (Python, Java, nodejs, PHP) getdns_query: Use API directly, or use with the wrapper script getdns_query (run \u0026lsquo;make getdns_query\u0026rsquo; then getdns_query is found in the test directory): - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l T (Pipelined TCP queries) - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l L (Pipelined TLS queries) - getdns_query @\\\u0026lt;serverIP\u0026gt; -s -a -A -l LT (Pipelined TLS queries with fallback to TCP) - getdns_query @\\~ -s -a -A -l L -m (Pipelined TLS queries in strict mode using server hostname for authentication) Daemon mode: see the DNS Privacy Daemon - Stubby page LDNS (drill) 1.6.17 Source: ldns 1.6.17 source code available from this link to NLNet Labs: ldns-1.6.7\nPatch: Grab and apply the patch to ldns-1.6.17 from out git repository. Also see the notes here.\nQuery: To query this with drill use: (the IP address is used here simply to stop the server name resolution falling back to TCP because your local resolver doesn\u0026rsquo;t support DNS-over-TLS).\n* drill -t @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see TCP query) * drill -l -p1021 @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see TLS query) * drill -C @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to see STARTTLS query) * drill -C -D @\u0026lt;serverIP\u0026gt; \u0026lt;query name\u0026gt; (to do a DNSSEC lookup using STARTTLS) kdig See https://knot.readthedocs.io/en/stable/man_kdig.html\nDoH Desktop Cloudflare have release two tools to provide DOH clients, see https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/ Frank Denis has a dnscrypt-proxy (client proxy) that supports DoH, and there is a Windows client GUI called Simple DNSCrypt curl also supports DoH https://github.com/curl/doh kdig also supports DoH since version 3.0 Mobile There is an Android App called \u0026lsquo;Intra\u0026rsquo; which can be used to send all queries from the device over DOH to either Cloudflare or Google or a user configured resolver Cloudflare has an app call 1.1.1.1 - it does DoH by default but will also do DoT but only uses 1.1.1.1 Browser Firefox Firefox 64.0 includes a configuration option where the URL of a DOH server can be specified and then all queries sent by Firefox will go to that server over DOH. It can be turned on in \u0026lsquo;Opportunistic mode\u0026rsquo; via the Firefox-\u0026gt;Preferences→Network Settings→Settings dialog (scroll to bottom to find the \u0026lsquo;Enable DNS-over-HTTP\u0026rsquo; check box and URL). Here are more details of how it works and how to do more complex configuration e.g. strict mode If you want to see the queries on the wire that Firefox is sending you need to export the master key secrets and then import them into wireshark. Documentation on the key format is here: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/Key_Log_Format See this Sharkfest presentation for more details (note Wireshark 3.0 supports DoH) Bromite (https://www.bromite.org/) What is Bromite? It is a fork of Chromium (https://www.chromium.org/): \u0026ldquo;Bromite is Chromium plus ad blocking and privacy enhancements; take back your browser! Bromite aims at providing a no-clutter browsing experience without privacy-invasive features and with the addition of a fast ad-blocking engine.\u0026rdquo; Note that at the moment Bromite is only for Android, it currently does not provide builds for desktop. In release 67.0.3396.88 Bromite has enabled the underlying DoH implementation in Chromium by exposing configuration options (via chrome://flags). Today the choice is either Google or Cloudflare DoH servers but it is up to the user to choose: https://github.com/bromite/bromite/wiki/Enabling-DNS-over-HTTPS Chrome Chrome has a full DoH implementation but the configuration for it is not exposed. However if you want to try it out use something like the following example for macOS:\n/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --enable-features=\u0026#34;dns-over-https\u0026lt;DoHTrial\u0026#34; --force-fieldtrials=\u0026#34;DoHTrial/Group1\u0026#34; --force-fieldtrial-params=\u0026#34;DoHTrial.Group1:server/https%3A%2F%2Fcloudflare-dns%2Ecom%2Fdns-query/method/POST\u0026#34; DoQ Desktop/mobile AdGuard\u0026rsquo;s dnsproxy supports DoQ, also see AdGuardHome\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_daemon_-_stubby/",
	"title": "DNS Privacy Daemon - Stubby",
	"tags": [],
	"description": "",
	"content": "DNS Privacy Daemon - Stubby Key Features Source Code Lastest release Installation Packages Installation Guides Docker Images Mobile Configuration Support How can I contribute to the getdns/Stubby projects? Other options \u0026lsquo;Stubby\u0026rsquo; is an application that acts as a local DNS Privacy stub resolver (using DNS-over-TLS). Stubby encrypts DNS queries sent from a client machine (desktop or laptop) to a DNS Privacy resolver increasing end user privacy.\nStubby is developed under the getdns project, has it\u0026rsquo;s own github repo and issue tracker but dnsprivacy.org currently hosts the online documentation for Stubby. For more background and FAQ see our About Stubby page.\nAs announced over the last 6 months, the dnsovertls*.sinodun.com nameservers were decommissioned on 9th Septemter 2022. See this announcement.\nThe command line version of Stubby is suitable for technical/advanced users. Work on more a user friendly GUI called Stubby Manager is underway - see below! Why Use Stubby?\nRead about the problem with DNS Privacy and how Stubby helps\nKey Features Runs as a daemon listening on the loopback addresses (127.0.0.1, ::0) Sends all outgoing DNS queries received on those addresses out over TLS Uses a default configuration which provides Strict Privacy and uses a subset of the available DNS Privacy servers Has additional servers available for activation in the configuration file (e.g. Cloudflare, Quad9) Stubby uses getdns, it is recommended to use at least the 1.6 release of getdns, and preferably the latest getdns stable release.\nA future release of Stubby is expected to support the following:\nDNS-over-HTTPS (DOH) Configuration of servers using authentication name only Source Code As of August 2017 Stubby has moved to its own repository and getdns is a library dependancy!\nSource code is available on github: https://github.com/getdnsapi/stubby\nLastest release See the Stubby github repo for the latest release tarball or the getdns releases page.\nInstallation Packages Various packages are available, see repology for Stubby. Note1: A debian package is also available but doesn\u0026rsquo;t show up in the above because the version number is currently incorrect (it picks up the getdns version, not the stubby version). Working to fix this!\nNote2: The chocolatey package called \u0026lsquo;stubby\u0026rsquo; as of March 2019 is for Stubby - the name was previously used for a package named stubby4net but that has now been renamed to stubby4net.\nInstallation Guides Linux Build from source Running a service Great tutorial on using stubby on Ubuntu desktop - thanks linuxbabe.com! macOS Homebrew Stubby Manager GUI (prototype) for macOS (note, this project is no longer maintained. Support for macOS in the new Stubby Manager GUI is a work in progress). Windows Windows installer for command line Stubby (MSI, zip file and Chocolatey package available) Windows installer for Stubby Manager GUI (development release) Docker Images See this tweet for an example of using Stubby + Quad9 See this link for an example of using BIND as a local caching forwarder and stubby for upstream TLS Mobile We hope to have support on mobile platforms in the future:\nWIP on an iPhone App Note that Android has announced that it will support a native implementation of DNS-over-TLS in an upcoming official release (it is already available in developer releases). This does not share any code with Stubby but we applaud Android for this development!\nConfiguration See our Stubby configuration guide.\nNote that some users use Stubby in combination wtih Unbound - Unbound provides a local cache and Stubby manages the upstream TLS connections (since Unbound cannot yet re-use TCP/TLS connections). And example configuration is available on this page.\nSupport Bugs or feature requests can be directed to either\nMAILING LIST: the getdns users mailing list BUG TRACKER: the Stubby github issue tracker How can I contribute to the getdns/Stubby projects? Run and test stubby. Give feedback and report bugs! Contribute code to or https://github.com/getdnsapi/stubby or https://github.com/getdnsapi/getdns Running a DNS privacy resolver Other options See DNS Privacy Clients.\n"
},
{
	"uri": "http://dnsprivacy.org/implementation_status/",
	"title": "Implementation Status",
	"tags": [],
	"description": "",
	"content": "Implemenation status DoT Implementation Status Clients/Forwarders Servers Other implementation work DoH Implementation status DoQ Implementation status Stub Resolvers (downstream clients) Libraries/tools Recursive to Authoritative - ADoT/ADoQ RFC 9539 - Unilateral Probing Open source implementation overview Operator announcements XFR/XoT Implementation status Other implementation work DoT Implementation Status This table lists the best understanding of the current status of DNS-over-TLS related features in the latest stable releases of a selection of standalone open source DNS software. Also see DNS Privacy Clients for a full list of OS, mobile apps, routers and browsers that support DoT.\nIf there are errors or glaring omission please email sara@sinodun.com Also see guides on how to use NGINX and other proxies to provide DNS-over-TLS, also see here. This works with a couple of provisos:\n(1) Be aware that a client will think it is talking to a DNS-over-TLS server and so may keep connections open when idle even when not using EDNS0 Keepalive (as allowed by RFC7858 ). The nameserver will see only TCP connections which were historically used just for one-shot TCP and may not be robust to many long-lived connections.\n(2) Therefore this will work much better if the nameserver has robust TCP capabilities (as described in Sections 6.2.2 and 10 of RFC7766), and would be required for production level service. Any server that fully implements EDNS0 Keepalive (RFC7828) should meet this criteria.\nSee the DNS Privacy Reference Material page for more details on the individual features. Clients/Forwarders Mode Stub Caching forwarder/proxy Software ldns (drill) digit getdns (Stubby) BIND (dig) Knot (kdig) Go DNS Unbound BIND Knot Res dndist Send ECS with SOURCE PREFIX-LENGTH value of 0 Y Y Y TCP fast open (a) P Y Y Y Y Y Y Y Connection reuse (Q/R, Q/R, Q/R) P Y Y Y Y Y Y Y Y Pipelining of queries(Q,Q,Q,R,R,R) n/a Y Y Y n/a Y Y Y Y Y Process OOOR (Q1,Q2,R2,R1) n/a Y Y Y n/a W Y Y Y EDNS0 Keepalive (b) Y Y (c) TLS encryption (Port 853) P Y Y Y Y Y Y Y Y TLS authentication Y Y Y Y Y EDNS0 Padding Y Y Y Y Y Y TLS DNSSEC Chain Extension (e) Servers Mode Load Balancer Recursive Auth Software dnsdist Unbound BIND Knot Res PowerDNS Recursive CoreDNS(e) Tenta(e) NSD BIND Knot Auth PowerDNS Auth QNAME minimisation n/a Y Y Y Y Y TCP fast open(a) Y Y Y Y Y Y Y Y Process Pipelined queries Y Y Y Y Y Y Y Y Provide OOOR (d) Y Y Y Y n/a n/a n/a EDNS0 Keepalive(b) Y Y Y Y TLS encryption (Port 853) Y Y Y Y Y Y Y Provide TLS auth credentials Y Y Y Y Y Y EDNS0 Padding (basic) Y Y Y (f) Y TLS DNSSEC Chain Extension(e) KEY:\nY - indicates latest release already supports this functionality P - indicates that a patch is available in our git repo. See here for details: DNS-over-TLS patches W - indicates work in progress, or availabe in next release (a) not yet available on Windows (b) Implies robust TCP connection management (see RFC7828 and RFC7766)\n(c) Can be added to queries but the response is currently ignored.\n(d) Supports OOOR but could be limited by the nameserver or configuration used for recursion.\n(e) RFC9102 Note this draft was published via the Independent Stream.\n(f) This option adds padding to clear text queries to support running behind a DoT/DoH proxy such as dnsdist\nNote pipelining/OOOP are not applicable (n/a) for some synchronous applications. Other implementation work TrustDNS is a RUST implementation of a DNS client/server that supports DNS-over-TLS. Technitium DNS Server is an open source project which supports DoT, DoH and now DoQ. It also has support for both XFR-over-TLS and XFR-over-QUIC. There is also DNSSEC signing and validation support for all encrypted DNS protocols. Source code is on Github). DoH Implementation status See the list of implementations maintained on the curl github site: (1) Browsers and Clients.\n(2) Tools including various proxies (client and server) e.g dnscrypt-proxy, Facebooks experimental DoH proxy\nWe also maintain a list of some DoH clients (includes web browsers) And below is the state of DoH implementation is well know open-source DNS recursive resolvers/load-balancers Mode Load Balancer Recursive Software dnsdist Unbound BIND Knot Res DoH support Y Y Y Y DoQ Implementation status DoQ implementations are still in the early stages, the list below is an overview of the current status.\nStub AdGuard clients support DoQ Resolvers (downstream clients) dnsdist supports DNS-over-QUIC for incoming queries since 1.9.0. Unbound supports DoQ from v1.22.0 AdGuard resolvers support DoQ Libraries/tools A matrix of the interoperability of various QUIC libraries is available here: https://interop.seemann.io\ndnsdist supports DNS-over-QUIC for incoming queries since 1.9.0. AdGuard launched a DoQ recursive resolver service in December 2020. They have released a suite of open source tools that support DoQ: AdGuard C++ DNS libraries A DNS proxy library that supports all existing DNS protocols including DNS-over-TLS, DNS-over-HTTPS, DNSCrypt and DNS-over-QUIC (experimental). DNS Proxy A simple DNS proxy server that supports all existing DNS protocols including DNS-over-TLS, DNS-over-HTTPS, DNSCrypt, and DNS-over-QUIC. Moreover, it can work as a DNS-over-HTTPS, DNS-over-TLS or DNS-over-QUIC server. CoreDNS fork for AdGuard DNS Includes DNS-over-QUIC server-side support. dnslookup Simple command line utility to make DNS lookups. Supports all known DNS protocols: plain DNS, DoH, DoT, DoQ, DNSCrypt. Quicdoq Quicdoq is a simple open source implementation of DoQ. It is written in C, based on Picoquic. Flamethrower is an open source DNS performance and functional testing utility written in C++ that has an experimental implementation of DoQ. aioquic is an implementation of QUIC in Python. It includes example client and server for DoQ. doq-proxy is a lightweight Go implementaion of a simple client and server side proxy. Technitium DNS Server is an open source project which supports DoT, DoH and now DoQ. It also has support for both XFR-over-TLS and XFR-over-QUIC. Note that as of March 2022 there is early, experimental support for QUIC as a base transport protocol (i.e. without HTTP/3) in both nginx and HAProxy but that during work at the IETF 113 Hackathon neither could be configured to be useable for DoQ.\nRecursive to Authoritative - ADoT/ADoQ RFC 9539 - Unilateral Probing RFC 9539 - Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS is now published\nOpen source implementation overview Feature Recursives Load Balancer/proxy Auths Software Unbound BIND Knot Resolver PowerDNS Recursive dnsdist NSD BIND Knot Auth PowerDNS Auth Unilateral probing Prototyping at IETF Hackathon Experimental implementation Other discovery Experimental auto discovery DoT Y Y Y Y DoQ Y Y PowerDNS 4.7.0 supports an experimental version of this \u0026ldquo;The implementation does not follow the existing draft to the letter, but was strongly inspired by it.\u0026rdquo; More here. Knot resolver implements a custom auto-discovery feature based on an nameserver name format PowerDNS Auth does not implement any encrypted transports natively, but the same organisation develops dnsdist for use as load balancer/proxy to terminate encrypted connections Operator announcements Google Public DNS have said they have implemented RFC9539 and \u0026ldquo;And ADoT is in use for around 6% of egress traffic.\u0026rdquo; deSEC announced on the DPRIVE mailing list that they have support for DoT and DoQ on our authoritative anycast deployments. XFR/XoT Implementation status This table is a work in progress - please notify us it updates/corrections are needed\nThis table reflects some of the current behaviour on implementations and also some features proposed in RFC9103. It is noted that some name servers will behave differently when starting up and first loading zones to steady state behaviour. Feature BIND NSD Knot Auth PowerDNS Features applicable to Secondary Sec Pri Sec Pri Sec Pri Sec Pri TCP: Typically performs AXFRs for different\nzones in parallel to the same primary using\nseparate connections (in steady state)\nY\nY\nY\nY\nTCP: Typically performs IXFRs in parallel to AXFRs\nto the same primary using\nseparate connections (in steady state) Y\nY\nY\nY\nTCP: Connection re-use for XFRs\nto same primary is possible (a) TCP: When re-using connections, will pipeline\nall XFR requests Y\nHandle empty AXFR responses NT\nNT\nNT\nNT\nNT\nNT\nNT\nNT\nSupports XoT 9.18 9.18 v4.3.7 Feature applicable to Primary Handle pipelined XFR requests on one\nconnection for different zones\nY\nY(b) Y\nY\nAlways sends AXFR responses for different zones serially\non the same connection (not intermingled) Y\nY\nY\nY\nSends all AXFR/IXFR responses serially\non the same connection\n(d) (b) Handle sequential XFR requests on one\nconnection for the same zone Y\n(c) Y\nY\nDefault size of XFR response ~20kB 16kB 16kB 4-8kB Explicit configuration limit on num of concurrent XFRs Y\n(e) (e) (e) Supports XoT 9.18 9.18 KEY:\nY - indicates latest release supports this functionality NT - not tested yet, or cannot be tested. (a) Current release will re-use connections if the max outgoing TPC connections is hit. This PR provides a configuration option to make that behaviour the default.\n(b) NSD does not support IXFR as a primary\n(c) Because NSD requires a reload to update a zone, an old version of the zone will currently be sent on a TCP connection opened before the reload. A fix/workaournd is proposed.\n(d) e.g. If BIND receives an IXFR request whilst sending a large AXFR response, it will send the IXFR response immediately intermingled with the AXFR response.\n(e) Whilst there is no limit explicitly for XFRs, the primary has a configuration option to limit the total number of incoming TCP connections\n(defaults for relevant limits are: BIND - 25, NSD - 100, Knot - one half of the file descriptor limit for the server process, - PowerDNS 20\n(g) See this issue for progress. Support was added in development release 9.17.10\nOther implementation work Technitium DNS Server is an open source project which supports DoT, DoH and now DoQ. It also has support for both XFR-over-TLS and XFR-over-QUIC. "
},
{
	"uri": "http://dnsprivacy.org/running_a_dns_privacy_server/",
	"title": "Running a DNS Privacy server",
	"tags": [],
	"description": "",
	"content": "Running a DNS Privacy Server If you are interested in running your own DoT or DoH server this page provides some ideas. If you have specific questions feel free to email sara@sinodun.com\nContributing to the project Pick your software DoT Nameserver Configuration DoH Nameserver Configuration Read up on Best Current practices Does my DoT server need a X.509 certificate? Test your DoT server Monitor your DoT server Benchmarking of DoT Contributing to the project We welcome and are keen to support anyone who would like to run an open DNS Privacy Server and make the server details available to the DNS Privacy project. For an overview of why DNS Privacy is important, please see DNS Privacy - The Problem. The current list of servers is available here DNS Privacy Test Servers and DNS Public Resolvers.\nWhile there are now several large organisations offering DNS Privacy services we encourage operators to run their on DNS Privacy servers to provide user choice. We recommend reading the Internet Draft on Best Current Practices for DNS Privacy Operators in order to try to provide a good, secure and private service for users. The document is a work in progress - feedback and comments welcome!\nWe are also very keen to increase the number and geographical distribution of the available servers to better serve the global population of users for whom DNS Privacy is important. Most of the servers are currently based in Europe (a few in North America, a few elsewhere) which means users in other parts of the world may be blocked from accessing them but are also likely to experience poor performance (high latency) for DNS queries. We see a particular need for DNS Privacy servers in areas such as the Middle East, Africa and Asia to enable activists and journalist local access to DNS Privacy services.\nPick your software See the Implementations page to see what features are currently supported in the various open source nameserver implementations.\nDon\u0026rsquo;t forget that you can also run a TLS-proxy in front of any nameserver to offer DoT (and there is a Docker image for doing this with BIND). We\u0026rsquo;ve also added a description of how to build HAProxy with TLS 1.3 support. Also see the video and slides of the great talk given by Colin Petrie at RIPE76 of his analysis of current software and experience of setting up DNS-over-TLS.\nDoT Nameserver Configuration Example configurations can be found on this site for DNS-over-TLS\nRunning a TLS Proxy Unbound Knot resolver How to setup dnsdist for DoT DoH Nameserver Configuration One good reference for available DoH implementations is https://github.com/curl/curl/wiki/DNS-over-HTTPS\nHow to setup dnsdist for DoH How to set up a DNSCrypt server Read up on Best Current practices A best current practice document for DNS privacy operators is under development, see BCP for DNS privacy operators for more details.\nDoes my DoT server need a X.509 certificate? In order to allow users to authenticate the server (for \u0026lsquo;Strict\u0026rsquo; mode) the server needs to be configured with a X.509 certificate. This is optional but recommended.\nMany of the existing servers use the great service at Let\u0026rsquo;s Encrypt to obtain certificates. See our how-to guide on using Let\u0026rsquo;s Encrypt. If you do this then it is helpful to also provide the pinset for the certificate (the SHA-256 fingerprint of the public key) as an alternative validation mechanism. See how to generate an SPKI pinset from a certificate. If you do this then it is also recommended to Use the same key(s) when renewing the certificate to avoid having to manage key rollovers see: Short guide on Let\u0026rsquo;s Encrypt Key renewal. This includes guides to automating renewal. Provide 2 keys to enable key roll should you need to roll your keys Note that If you run a server which offers more than one certificate (e.g. via a proxy which uses SNI to route traffic) be aware that SPKI only authentication of the upstream can be limited. Because no SNI is provided when the client is performing SPKI only authentication it is limited to working (by many TLS library client implementations) for only the first certificate returned.\nTest your DoT server If you want to test connectivity to your nameserver from an external source you can use the getdns query webpage:\nEnter a domain name to query for in the top box Check the \u0026lsquo;return_call_reporting\u0026rsquo; in the Extensions box Select \u0026lsquo;TLS\u0026rsquo; as the transport in the Transport box and enter the IP address and optionally the Authentication domain name for your server Hit Query The output will contain a section at the top called \u0026lsquo;call_reporting\u0026rsquo; which include the following fields \u0026ldquo;transport\u0026rdquo;: GETDNS_TRANSPORT_TLS to confirm the query worked over TLS\ntls_auth_status\u0026quot;: \u0026lt;bindata of \u0026ldquo;Success\u0026rdquo;\u0026gt; if the certificate was successfully authenticated\n\u0026ldquo;run_time/ms\u0026rdquo;: 215 response time from the query server which is based in the Netherlands\nYou can also use various command line tools:\nthe getdns_query command line tool available as part of getdns or stubby kdig tool available with Knot resolver Monitor your DoT server Stephane Bortzmeyer has written a basic Nagios plugin to monitor DNS-over-TLS servers using getdns which is available in github. We use it to provide a dashboard of the available Privacy servers. Benchmarking of DoT A fork of dnsperf now exists that supports TCP and TLS .\n"
},
{
	"uri": "http://dnsprivacy.org/encrypted-zone-transfer/",
	"title": "Encrypted Zone Transfer",
	"tags": [],
	"description": "",
	"content": "Encrypted Zone Transfers Encrypted Zone Transfers Why Encrypt Zone Transfer? Specifications Implementations Configuration BIND NSD Why Encrypt Zone Transfer? The contents of the zone could include information such as names of persons used in names of hosts. Best practice is not to use personal information for domain names, but many such domain names exist. The contents of the zone could also include references to locations that allow inference about location information of the individuals associated with the zone\u0026rsquo;s organization. It could also include references to other organizations. Examples of this could be:\nPerson-laptop.example.org MX-for-Location.example.org Service-tenant-from-another-org.example.org Additionally, the full zone contents expose all the IP addresses of endpoints held in the DNS records, which can make reconnaissance and attack targeting easier, particularly for IPv6 addresses or private networks. There may also be regulatory, policy, or other reasons why the zone contents in full must be treated as private.\nSpecifications RFC 9103 - Zone Transfer over TLS (XoT) was standardized by the IETF in 2021. I describes how to use DNS over TLS to secure zone transfers in combination with TSIG, ACLs and certificate authentication of the server.\nRFC 9250 - DNS over Dedicated QUIC connections (DoQ) additionally defines how to use DoQ for encrypted zone transfer in an entirely analogous way to using DNS over TLS.\nImplementations Both BIND (from 9.18) and NSD (from 4.3.7) support zone transfer of TLS (XoT). See this table for more details.\nConfiguration BIND To configure a BIND primary for XoT (secured by client ACL and TSIG key) use something like the following:\noptions { ... listen-on port 8853 tls \u0026#34;xot\u0026#34; {any;}; ... } tls \u0026#34;xot\u0026#34; { cert-file \u0026#34;\u0026lt;cert-file-path\u0026gt;\u0026#34;; key-file \u0026#34;\u0026lt;key-file-path\u0026gt;\u0026#34;; protocols { TLSv1.3; }; session-tickets yes; }; acl xot-secondaries {b.b.b.b;}; key \u0026#34;xot-key\u0026#34; { algorithm hmac-sha256; secret \u0026#34;\u0026#34;; }; acl xot-acl { !{ !xot-secondaries; any; }; key xot-key ;}; zone { type primary; ... allow-transfer transport tls { xot-acl; }; ... } (The double negation in the acl clause is to restrict access to servers that are both secondaries AND have the correct key. Otherwise the first match behaviour of BIND will match any secondary and not go on to check the second clause, see the last few paragraphs of section 6.1 here: Access Control Lists\nTo configure a BIND seconday for XoT (secured by authenticating the server certificate and TSIG key) use something like the following:\ntls \u0026#34;xot\u0026#34; { remote-hostname \u0026#34;my-xot-primary.org\u0026#34;; protocols { TLSv1.3; }; session-tickets yes; }; key \u0026#34;xot-key\u0026#34; { algorithm hmac-sha256; secret \u0026#34;\u0026#34;; }; zone { type secondary; ... primaries { a.a.a.a port 853 key xot-key tls \u0026#34;xot\u0026#34; ;}; ... } To help with testing there is the option to use a transient per named process key/cert on the BIND primary. For this option, use listen-on port 8853 tls ephemeral {any;}; in the primary config and remove the remote-hostname from the secondary config. While this is convenient for testing is is NOT secure enough to use in a production environment!\nNSD To configure an NSD primary for XoT (secured by client ACL and TSIG key) use something like the following:\nzone: ... tls-service-key: \u0026#34;\u0026lt;path_to_private_key\u0026gt;\u0026#34; tls-service-pem: \u0026#34;\u0026lt;path_to_certifcate_file\u0026gt;\u0026#34; tls-port: 853 provide-xfr: b.b.b.b@853 \u0026#34;xot-key\u0026#34; key: name: \u0026#34;xot-key\u0026#34; algorithm: hmac-sha256 secret: \u0026#34;\u0026#34; }; To configure an NSD secondary for XoT (secured by authenticating the server certificate and TSIG key) use something like the following:\nzone: ... request-xfr: a.a.a.a \u0026#34;xot-key\u0026#34; \u0026#34;xot\u0026#34; tls-auth: name: \u0026#34;xot\u0026#34; auth-domain-name: \u0026#34;my-xot-primary.org\u0026#34; key: name: \u0026#34;xot-key\u0026#34; algorithm: hmac-sha256 secret: \u0026#34;\u0026#34; }; NSD also supports mutual TLS authentication, see TLS Auth Declarations\n"
},
{
	"uri": "http://dnsprivacy.org/dns_privacy_reference_material/",
	"title": "DNS Privacy Reference Material",
	"tags": [],
	"description": "",
	"content": " Relevant Internet Drafts and RFCs DPRIVE ADD DOH DNSOP Other Selection of Presentations Technical reports Relevant Internet Drafts and RFCs DPRIVE The DNS PRIVate Exchange (DPRIVE) Working Group develops mechanisms to provide confidentiality to DNS transactions in order to address concerns surrounding pervasive monitoring (RFC 7258).\nAlso see the DPRIVE document website\nRFC9539 Unilateral Opportunistic Deployment of Encrypted Recursive-to-Authoritative DNS This document sets out steps that DNS servers (recursive resolvers and authoritative servers) can take unilaterally (without any coordination with other peers) to defend DNS query privacy against a passive network monitor. RFC9250 DNS over Dedicated QUIC connections This document describes the use of QUIC to provide transport privacy for DNS (DoQ). RFC9103 DNS Zone Transfer over TLS This document specifies the use of TLS, rather than cleartext, to prevent zone content collection via passive monitoring of zone transfers: XFR over TLS (XoT). RFC9076 DNS Privacy Considerations This document describes the privacy issues associated with the use of the DNS by Internet users. It is intended to be an analysis of the present situation and does not prescribe solutions. RFC8932 Recommendations for DNS Privacy Service Operators Describes Best Current Practices for operators of DoT and DoH servers in terms of protocol, service and privacy policy considerations. RFC8310 Usage Profiles for DNS over TLS and DNS over DTLS This document describes how a DNS client can use a domain name to authenticate a DNS server that uses Transport Layer Security (TLS) and Datagram TLS (DTLS). Additionally, it defines (D)TLS profiles for DNS clients and servers implementing DNS-over-TLS and DNS-over- DTLS RFC7858 Specification for DNS over TLS This document describes the use of TLS to provide privacy for DNS. RFC8467 Padding Policy for EDNS(0) Specifies the preferred algorithm for padding with the option defined in RFC7830 RFC7830 The EDNS(0) Padding Option This document specifies the EDNS(0) 'Padding' option, which allows DNS clients and servers to pad request and response messages by a variable number of octets. ADD The Adaptive DNS Discovery focusses on discovery and selection of DNS resolvers by DNS clients in a variety of networking environments, including public networks, private networks, and VPNs, supporting both encrypted and unencrypted resolvers.\nADD has published various RFC\u0026rsquo;s including\nRFC9462 Discovery of Designated Resolvers This document defines Discovery of Designated Resolvers (DDR), a mechanism for DNS clients to use DNS records to discover a resolver\u0026rsquo;s encrypted DNS configuration. RFC9463 DHCP and Router Advertisement Options for the Discovery of Network-designated Resolvers (DNR) The document specifies new DHCP and IPv6 Router Advertisement options to discover encrypted DNS resolvers (e.g., DNS-over-HTTPS, DNS-over-TLS, DNS-over-QUIC). DOH DOH has been concluded but worked to standardize encodings for DNS queries and responses that are suitable for use in HTTPS.\nRFC8484 DNS Queries over HTTPS (DoH) Document describing the protocol aspects of running DNS over HTTPS. DNSOP The DNS Operations Working Group will develop guidelines for the operation of DNS software and services and for the administration of DNS zones.\nRFC9210 DNS Transport over TCP - Operational Requirements This document requires the operational practice of permitting DNS messages to be carried over TCP on the Internet as a Best Current Practice. RFC8806 Running a Root Server Local to a Resolver This document shows how to start and maintain such a copy of the root zone that does not cause problems for other users of the DNS, at the cost of adding some operational fragility for the operator. RFC7766 DNS Transport over TCP - Implementation Requirements This document specifies the requirement for support of TCP as a transport protocol for DNS implementations and provides guidelines towards DNS-over-TCP performance on par with that of DNS-over-UDP. RFC9156 DNS Query Name Minimisation to Improve Privacy This document describes a technique called \"QNAME minimisation\" to improve DNS privacy, where the DNS resolver no longer always sends the full original QNAME and original QTYPE to the upstream name server. RFC7828 The edns-tcp-keepalive EDNS0 Option This document defines an EDNS0 option (\"edns-tcp-keepalive\") that allows DNS clients and servers to signal their respective readiness to conduct multiple DNS transactions over individual TCP sessions. Other RFC5246 The Transport Layer Security (TLS) Protocol RFC7525 Recommendations for Secure Use of TLS and DTLS RFC7413 TCP Fastopen RFC8094 - Experimental Specification for DNS over Datagram Transport Layer Security (DTLS) Selection of Presentations Also see the DNS Privacy Workshop pages!\nOARC 29 Where will encrypted DNS transports push DNS operators?- Slides, Video RIPE 77 It\u0026rsquo;s DNS Jim, But Not as We Know It - Slides, Video DNS Privacy measurements (Benchmarking DoT) - Slides, Video ICANN DNS Symposium 2018 \u0026lsquo;Where\u0026rsquo;s my DNS?\u0026rsquo; (video) RIPE 76 Measurements on DNS Privacy (DNS-over-TCP and TLS benchmarking) BCOP WG - DNS Privacy PCP Dude, where\u0026rsquo;s my DNS? (subtitle \u0026lsquo;DNS-over-HTTPS is coming!\u0026rsquo;) FOSDEM 2018 Willem Toorop on Stub resolvers OARC 27 DNS Privacy clients. You tube video. JCSA 2017 Hands on with getdns IETF 99 EDU Privacy Tutorial DNS Privacy Tutorial (Sara Dickinson, Daniel Kahn Gillmor) RIPE 72 DNS Privacy Public Resolver discussion (Sara Dickinson) IETF 94: DNS-over-TLS draft update (D. Wessels, S. Dickinson) IETF 93: Update on 5966bis and EDNS0 keepalive (Sara Dickinson) DNS-OARC Fall workshop 2015: Using TLS for DNS Privacy in practice (Sara Dickinson) IETF 91: DNS over TCP and TLS - draft-hzhwm-dprive-start-tls-for-dns-00 (John Heidermann, Sara Dickinson) A short video is demonstrating TCP connection re-use, pipelining, TCP Fast Open and DNS-over-TLS: DNS-over-TLS demo video IETF 89: T-DNS: Connection-Oriented DNS to Improve Privacy and Security (Duane Wessels) DNS-OARC Spring workshop 2014: T-DNS: Connection-Oriented DNS to Improve Privacy and Security (John Heidemann) getdns-api implementation (Willen Toorop) Technical reports T-DNS: Connection-Oriented DNS to Improve Privacy and Security http://www.isi.edu/publications/trpublic/files/tr-693.pdf\nhttp://googlecode.blogspot.co.uk/2012/01/lets-make-tcp-faster.html\n"
},
{
	"uri": "http://dnsprivacy.org/performance_measurements/",
	"title": "Performance Measurements",
	"tags": [],
	"description": "",
	"content": " Thanks to a grant from the Open Technology Fund for funding work on performance measurements of DNS Privacy implementations.\nWe\u0026rsquo;ve done various pieces of work on this, the results can be found on the following pages:\nInitial measurements (Q1 2018) Using dnsperf concentrating on low numbers of clients for TCP/TLS for several nameservers and also on behaviour for low numbers of queries per connection\nFollow up work measuring (Q4 2018)\nUsing dnsperf TCP/TLS for up to 24,000 clients for several configurations.\nInvestigations of alternative benchmarking tools This included some tools used for HTTP that can model different client populations for session based transports\nProposal for a new DNS measurement tool\nWe have created an initial set of requirements for a flexible tool designed to support multiple protocols and that could more accurately model DoT and DoH clients traffic. "
},
{
	"uri": "http://dnsprivacy.org/ndss_dns_privacy_workshop/",
	"title": "NDSS DNS Privacy Workshop",
	"tags": [],
	"description": "",
	"content": " This is the homepage of the DNS Privacy Workshop.\nAbout The first DNS Privacy workshop was co-located with NDSS in February 2017 and has also run in 2018 and 2021. The topics cover all aspects of the threats, the protocols, and future design spaces, of DNS privacy or the privacy of adjacent protocols. See below for details of past workshops.\nPrevious Workshops 2021 NDSS DNS Privacy Workshop Workshop Notes Zoom Breakout Room 1: Measurement of Encrypted DNS Zoom Breakout Room 2: Civil Society, Usability and DNS Zoom Breakout Room 3: Novel Work, ADoT and Future Research Call for Papers 2018 NDSS DNS Privacy Workshop 2017 NDSS DNS Privacy Workshop "
},
{
	"uri": "http://dnsprivacy.org/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://dnsprivacy.org/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]